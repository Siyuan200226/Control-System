
DS18B20_Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b88c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800b9a0  0800b9a0  0000c9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d0  0800c2d0  0000e234  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2d0  0800c2d0  0000d2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d8  0800c2d8  0000e234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d8  0800c2d8  0000d2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2dc  0800c2dc  0000d2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800c2e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  20000234  0800c514  0000e234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f68  0800c514  0000ef68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131a5  00000000  00000000  0000e25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003132  00000000  00000000  00021402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00024538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3d  00000000  00000000  00025790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aace  00000000  00000000  000265cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001736e  00000000  00000000  0004109b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094677  00000000  00000000  00058409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eca80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db4  00000000  00000000  000ecac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f2878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000234 	.word	0x20000234
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b984 	.word	0x0800b984

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000238 	.word	0x20000238
 800014c:	0800b984 	.word	0x0800b984

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000a9a:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <MX_ADC1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000ab2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000ac6:	f004 fef9 	bl	80058bc <HAL_ADC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f004 fb3e 	bl	8005150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC1_Init+0x74>)
 8000ae6:	f005 f9ad 	bl	8005e44 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000af0:	f004 fb2e 	bl	8005150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000025c 	.word	0x2000025c
 8000b00:	40012400 	.word	0x40012400

08000b04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <HAL_ADC_MspInit+0x6c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d121      	bne.n	8000b68 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <HAL_ADC_MspInit+0x70>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <HAL_ADC_MspInit+0x70>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_ADC_MspInit+0x70>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <HAL_ADC_MspInit+0x70>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a0c      	ldr	r2, [pc, #48]	@ (8000b74 <HAL_ADC_MspInit+0x70>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_ADC_MspInit+0x70>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Dissolved_Oxygen_Sensor_Pin;
 8000b54:	2301      	movs	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Dissolved_Oxygen_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <HAL_ADC_MspInit+0x74>)
 8000b64:	f005 fcbe 	bl	80064e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40012400 	.word	0x40012400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800

08000b7c <DS18B20_SetPinOutput>:
#include "ds18b20.h"
#include "gpio.h"
#include "tim.h"
#include "usart.h"

void DS18B20_SetPinOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f005 fc9b 	bl	80064e4 <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <DS18B20_SetPinInput>:

void DS18B20_SetPinInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4619      	mov	r1, r3
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f005 fc7e 	bl	80064e4 <HAL_GPIO_Init>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <DS18B20_DelayUs>:

void DS18B20_DelayUs(uint16_t us) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <DS18B20_DelayUs+0x2c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000c02:	bf00      	nop
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <DS18B20_DelayUs+0x2c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3f9      	bcc.n	8000c04 <DS18B20_DelayUs+0x14>
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000d40 	.word	0x20000d40

08000c20 <DS18B20_Start>:

uint8_t DS18B20_Start(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
    uint8_t response = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
    DS18B20_SetPinOutput(GPIOx, GPIO_Pin);
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4619      	mov	r1, r3
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffa1 	bl	8000b7c <DS18B20_SetPinOutput>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f005 fdea 	bl	800681a <HAL_GPIO_WritePin>
    DS18B20_DelayUs(500);
 8000c46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4a:	f7ff ffd1 	bl	8000bf0 <DS18B20_DelayUs>

    DS18B20_SetPinInput(GPIOx, GPIO_Pin);
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffaf 	bl	8000bb6 <DS18B20_SetPinInput>
    DS18B20_DelayUs(70);
 8000c58:	2046      	movs	r0, #70	@ 0x46
 8000c5a:	f7ff ffc9 	bl	8000bf0 <DS18B20_DelayUs>

    if (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f005 fdc2 	bl	80067ec <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <DS18B20_Start+0x52>
        response = 1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
    }
    DS18B20_DelayUs(410);
 8000c72:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000c76:	f7ff ffbb 	bl	8000bf0 <DS18B20_DelayUs>
    return response;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DS18B20_Write>:

void DS18B20_Write(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t data) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
 8000c90:	4613      	mov	r3, r2
 8000c92:	707b      	strb	r3, [r7, #1]
    for (int i = 0; i < 8; i++) {
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e02c      	b.n	8000cf4 <DS18B20_Write+0x70>
        DS18B20_SetPinOutput(GPIOx, GPIO_Pin);
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff6c 	bl	8000b7c <DS18B20_SetPinOutput>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000ca4:	887b      	ldrh	r3, [r7, #2]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f005 fdb5 	bl	800681a <HAL_GPIO_WritePin>

        if ((data >> i) & 0x01) {
 8000cb0:	787a      	ldrb	r2, [r7, #1]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	fa42 f303 	asr.w	r3, r2, r3
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <DS18B20_Write+0x54>
            DS18B20_DelayUs(3);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff ff95 	bl	8000bf0 <DS18B20_DelayUs>
            DS18B20_SetPinInput(GPIOx, GPIO_Pin);
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff73 	bl	8000bb6 <DS18B20_SetPinInput>
            DS18B20_DelayUs(60);
 8000cd0:	203c      	movs	r0, #60	@ 0x3c
 8000cd2:	f7ff ff8d 	bl	8000bf0 <DS18B20_DelayUs>
 8000cd6:	e007      	b.n	8000ce8 <DS18B20_Write+0x64>
        } else {
            DS18B20_DelayUs(60);
 8000cd8:	203c      	movs	r0, #60	@ 0x3c
 8000cda:	f7ff ff89 	bl	8000bf0 <DS18B20_DelayUs>
            DS18B20_SetPinInput(GPIOx, GPIO_Pin);
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff67 	bl	8000bb6 <DS18B20_SetPinInput>
        }
        DS18B20_DelayUs(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff81 	bl	8000bf0 <DS18B20_DelayUs>
    for (int i = 0; i < 8; i++) {
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	ddcf      	ble.n	8000c9a <DS18B20_Write+0x16>
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <DS18B20_Read>:

uint8_t DS18B20_Read(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
    uint8_t value = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	e02d      	b.n	8000d76 <DS18B20_Read+0x72>
        DS18B20_SetPinOutput(GPIOx, GPIO_Pin);
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff2c 	bl	8000b7c <DS18B20_SetPinOutput>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f005 fd75 	bl	800681a <HAL_GPIO_WritePin>
        DS18B20_DelayUs(3);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f7ff ff5d 	bl	8000bf0 <DS18B20_DelayUs>
        DS18B20_SetPinInput(GPIOx, GPIO_Pin);
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff3b 	bl	8000bb6 <DS18B20_SetPinInput>
        DS18B20_DelayUs(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f7ff ff55 	bl	8000bf0 <DS18B20_DelayUs>

        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f005 fd4e 	bl	80067ec <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d009      	beq.n	8000d6a <DS18B20_Read+0x66>
            value |= (1 << i);
 8000d56:	2201      	movs	r2, #1
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	73fb      	strb	r3, [r7, #15]
        }
        DS18B20_DelayUs(50);
 8000d6a:	2032      	movs	r0, #50	@ 0x32
 8000d6c:	f7ff ff40 	bl	8000bf0 <DS18B20_DelayUs>
    for (int i = 0; i < 8; i++) {
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	ddce      	ble.n	8000d1a <DS18B20_Read+0x16>
    }
    return value;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <DS18B20_GetTemp_Int>:
    temp = (temp_h << 8) | temp_l;
    return (float)temp / 16.0;
}*/

// 新增整数版本函数 (返回温度*100，精度0.01°C)
int16_t DS18B20_GetTemp_Int(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
    uint8_t temp_l, temp_h;
    int16_t temp;

    if (!DS18B20_Start(GPIOx, GPIO_Pin)) {
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	4619      	mov	r1, r3
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff41 	bl	8000c20 <DS18B20_Start>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <DS18B20_GetTemp_Int+0x20>
        return -1000;  // 错误代码
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <DS18B20_GetTemp_Int+0xb4>)
 8000da6:	e044      	b.n	8000e32 <DS18B20_GetTemp_Int+0xaa>
    }

    DS18B20_Write(GPIOx, GPIO_Pin, 0xCC);
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	22cc      	movs	r2, #204	@ 0xcc
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff68 	bl	8000c84 <DS18B20_Write>
    DS18B20_Write(GPIOx, GPIO_Pin, 0x44);
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	2244      	movs	r2, #68	@ 0x44
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff62 	bl	8000c84 <DS18B20_Write>
    HAL_Delay(750);
 8000dc0:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000dc4:	f004 fd56 	bl	8005874 <HAL_Delay>

    if (!DS18B20_Start(GPIOx, GPIO_Pin)) {
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff27 	bl	8000c20 <DS18B20_Start>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <DS18B20_GetTemp_Int+0x54>
        return -1000;  // 错误代码
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <DS18B20_GetTemp_Int+0xb4>)
 8000dda:	e02a      	b.n	8000e32 <DS18B20_GetTemp_Int+0xaa>
    }

    DS18B20_Write(GPIOx, GPIO_Pin, 0xCC);
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	22cc      	movs	r2, #204	@ 0xcc
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff4e 	bl	8000c84 <DS18B20_Write>
    DS18B20_Write(GPIOx, GPIO_Pin, 0xBE);
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	22be      	movs	r2, #190	@ 0xbe
 8000dec:	4619      	mov	r1, r3
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff48 	bl	8000c84 <DS18B20_Write>

    temp_l = DS18B20_Read(GPIOx, GPIO_Pin);
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff83 	bl	8000d04 <DS18B20_Read>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]
    temp_h = DS18B20_Read(GPIOx, GPIO_Pin);
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff7c 	bl	8000d04 <DS18B20_Read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73bb      	strb	r3, [r7, #14]

    temp = (temp_h << 8) | temp_l;
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	81bb      	strh	r3, [r7, #12]

    // 转换为整数 (温度*100)
    // DS18B20精度为0.0625°C，所以temp需要除以16
    // 为了保持精度，先乘以100再除以16
    return (temp * 100) / 16;
 8000e1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e22:	2264      	movs	r2, #100	@ 0x64
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	da00      	bge.n	8000e2e <DS18B20_GetTemp_Int+0xa6>
 8000e2c:	330f      	adds	r3, #15
 8000e2e:	111b      	asrs	r3, r3, #4
 8000e30:	b21b      	sxth	r3, r3
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	fffffc18 	.word	0xfffffc18

08000e40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e54:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a39      	ldr	r2, [pc, #228]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e5a:	f043 0320 	orr.w	r3, r3, #32
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a33      	ldr	r2, [pc, #204]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b2e      	ldr	r3, [pc, #184]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a2d      	ldr	r2, [pc, #180]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <MX_GPIO_Init+0x100>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Temp_Sensor_Pin|GPIO_PIN_4|LED_D1_Pin|LED_D2_Pin
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f640 6114 	movw	r1, #3604	@ 0xe14
 8000ea2:	4828      	ldr	r0, [pc, #160]	@ (8000f44 <MX_GPIO_Init+0x104>)
 8000ea4:	f005 fcb9 	bl	800681a <HAL_GPIO_WritePin>
                          |LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heating_GPIO_Port, Heating_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4826      	ldr	r0, [pc, #152]	@ (8000f48 <MX_GPIO_Init+0x108>)
 8000eae:	f005 fcb4 	bl	800681a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3|Vacuum_Pump_Pin|Water_Pump_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	21ca      	movs	r1, #202	@ 0xca
 8000eb6:	4824      	ldr	r0, [pc, #144]	@ (8000f48 <MX_GPIO_Init+0x108>)
 8000eb8:	f005 fcaf 	bl	800681a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Temp_Sensor_Pin PA4 LED_D1_Pin LED_D2_Pin
                           LED_D3_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin|GPIO_PIN_4|LED_D1_Pin|LED_D2_Pin
 8000ebc:	f640 6314 	movw	r3, #3604	@ 0xe14
 8000ec0:	613b      	str	r3, [r7, #16]
                          |LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481b      	ldr	r0, [pc, #108]	@ (8000f44 <MX_GPIO_Init+0x104>)
 8000ed6:	f005 fb05 	bl	80064e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : YF_S401_Pin */
  GPIO_InitStruct.Pin = YF_S401_Pin;
 8000eda:	2308      	movs	r3, #8
 8000edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_GPIO_Init+0x10c>)
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(YF_S401_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	4815      	ldr	r0, [pc, #84]	@ (8000f44 <MX_GPIO_Init+0x104>)
 8000eee:	f005 faf9 	bl	80064e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Heating_Pin PB1 PB3 Vacuum_Pump_Pin
                           Water_Pump_Pin */
  GPIO_InitStruct.Pin = Heating_Pin|GPIO_PIN_1|GPIO_PIN_3|Vacuum_Pump_Pin
 8000ef2:	23cb      	movs	r3, #203	@ 0xcb
 8000ef4:	613b      	str	r3, [r7, #16]
                          |Water_Pump_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480f      	ldr	r0, [pc, #60]	@ (8000f48 <MX_GPIO_Init+0x108>)
 8000f0a:	f005 faeb 	bl	80064e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4808      	ldr	r0, [pc, #32]	@ (8000f44 <MX_GPIO_Init+0x104>)
 8000f24:	f005 fade 	bl	80064e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f005 faa2 	bl	8006476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f32:	2009      	movs	r0, #9
 8000f34:	f005 fabb 	bl	80064ae <HAL_NVIC_EnableIRQ>

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	10210000 	.word	0x10210000

08000f50 <HAL_GPIO_EXTI_Callback>:

//**********************************************************************************************************


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3)
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d105      	bne.n	8000f6c <HAL_GPIO_EXTI_Callback+0x1c>
    {
        golbal_flow.pluse_1s++;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f62:	885b      	ldrh	r3, [r3, #2]
 8000f64:	3301      	adds	r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f6a:	805a      	strh	r2, [r3, #2]
    }
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000250 	.word	0x20000250

08000f7c <Debug_Print>:

//串口调试
void Debug_Print(const char* message)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    // 通过UART3硬件串口输出
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), 100);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f8e3 	bl	8000150 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	2364      	movs	r3, #100	@ 0x64
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <Debug_Print+0x24>)
 8000f94:	f007 fc0e 	bl	80087b4 <HAL_UART_Transmit>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000dd0 	.word	0x20000dd0

08000fa4 <Debug_Printf>:

//格式化调试信息输出函数 format: 格式化字符串 可变参数
void Debug_Printf(const char* format, ...)
{
 8000fa4:	b40f      	push	{r0, r1, r2, r3}
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b0c2      	sub	sp, #264	@ 0x108
 8000faa:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8000fac:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fb8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fc2:	f107 0008 	add.w	r0, r7, #8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000fcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd0:	f008 fbf8 	bl	80097c4 <vsniprintf>
    va_end(args);

    Debug_Print(buffer);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffcf 	bl	8000f7c <Debug_Print>
}
 8000fde:	bf00      	nop
 8000fe0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fea:	b004      	add	sp, #16
 8000fec:	4770      	bx	lr
	...

08000ff0 <filterVoltage>:

//5点移动平均滤波
uint16_t filterVoltage(uint16_t new_voltage)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
    // 将新值存入缓冲区
    voltage_buffer[filter_index] = new_voltage;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <filterVoltage+0x9c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <filterVoltage+0xa0>)
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    filter_index = (filter_index + 1) % FILTER_SIZE;
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <filterVoltage+0x9c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <filterVoltage+0xa4>)
 8001010:	fb83 1302 	smull	r1, r3, r3, r2
 8001014:	1059      	asrs	r1, r3, #1
 8001016:	17d3      	asrs	r3, r2, #31
 8001018:	1ac9      	subs	r1, r1, r3
 800101a:	460b      	mov	r3, r1
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	1ad1      	subs	r1, r2, r3
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <filterVoltage+0x9c>)
 8001026:	701a      	strb	r2, [r3, #0]

    // 检查缓冲区是否填满
    if (!filter_filled && filter_index == 0) {
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <filterVoltage+0xa8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d106      	bne.n	800103e <filterVoltage+0x4e>
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <filterVoltage+0x9c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <filterVoltage+0x4e>
        filter_filled = 1;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <filterVoltage+0xa8>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
    }

    // 计算平均值
    uint32_t sum = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
    uint8_t count = filter_filled ? FILTER_SIZE : filter_index;
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <filterVoltage+0xa8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <filterVoltage+0x60>
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <filterVoltage+0x9c>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	e000      	b.n	8001052 <filterVoltage+0x62>
 8001050:	2305      	movs	r3, #5
 8001052:	72bb      	strb	r3, [r7, #10]

    for (uint8_t i = 0; i < count; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	72fb      	strb	r3, [r7, #11]
 8001058:	e00a      	b.n	8001070 <filterVoltage+0x80>
        sum += voltage_buffer[i];
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <filterVoltage+0xa0>)
 800105e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < count; i++) {
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	3301      	adds	r3, #1
 800106e:	72fb      	strb	r3, [r7, #11]
 8001070:	7afa      	ldrb	r2, [r7, #11]
 8001072:	7abb      	ldrb	r3, [r7, #10]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3f0      	bcc.n	800105a <filterVoltage+0x6a>
    }

    return (uint16_t)(sum / count);
 8001078:	7abb      	ldrb	r3, [r7, #10]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000502 	.word	0x20000502
 8001090:	200004f8 	.word	0x200004f8
 8001094:	66666667 	.word	0x66666667
 8001098:	20000503 	.word	0x20000503

0800109c <readDO>:

//基于官方算法计算DO值
uint16_t readDO(uint8_t temperature_c)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    // 限制温度范围
    if (temperature_c > 40) temperature_c = 40;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b28      	cmp	r3, #40	@ 0x28
 80010aa:	d901      	bls.n	80010b0 <readDO+0x14>
 80010ac:	2328      	movs	r3, #40	@ 0x28
 80010ae:	71fb      	strb	r3, [r7, #7]

    // 从表中获取饱和DO值
    uint16_t do_sat = DO_Table[temperature_c];
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <readDO+0x8c>)
 80010b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b8:	81bb      	strh	r3, [r7, #12]

    // 基于官方两点校准的线性插值
    uint16_t cal_voltage;
    if (temperature_c == CAL1_T) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b19      	cmp	r3, #25
 80010be:	d103      	bne.n	80010c8 <readDO+0x2c>
        cal_voltage = CAL1_V;
 80010c0:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80010c4:	81fb      	strh	r3, [r7, #14]
 80010c6:	e018      	b.n	80010fa <readDO+0x5e>
    } else if (temperature_c == CAL2_T) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d103      	bne.n	80010d6 <readDO+0x3a>
        cal_voltage = CAL2_V;
 80010ce:	f240 5314 	movw	r3, #1300	@ 0x514
 80010d2:	81fb      	strh	r3, [r7, #14]
 80010d4:	e011      	b.n	80010fa <readDO+0x5e>
    } else {
        // 线性插值计算校准电压
        if (temperature_c > CAL1_T) {
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b19      	cmp	r3, #25
 80010da:	d903      	bls.n	80010e4 <readDO+0x48>
            // 外推 (高于25℃)
            cal_voltage = CAL1_V;
 80010dc:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	e00a      	b.n	80010fa <readDO+0x5e>
        } else {
            // 插值 (15-25℃之间)
            cal_voltage = CAL2_V + (CAL1_V - CAL2_V) * (temperature_c - CAL2_T) / (CAL1_T - CAL2_T);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	3b0f      	subs	r3, #15
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80010f8:	81fb      	strh	r3, [r7, #14]
        }
    }

    // 计算DO浓度 (简化版官方算法)
    if (adc_voltage <= 0) return 0;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <readDO+0x90>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <readDO+0x6a>
 8001102:	2300      	movs	r3, #0
 8001104:	e00b      	b.n	800111e <readDO+0x82>

    // 假设零点为0V，线性计算
    uint32_t do_result = ((uint32_t)adc_voltage * do_sat) / cal_voltage;
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <readDO+0x90>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	89bb      	ldrh	r3, [r7, #12]
 800110e:	fb03 f202 	mul.w	r2, r3, r2
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	60bb      	str	r3, [r7, #8]

    return (uint16_t)do_result;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	b29b      	uxth	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	0800bec8 	.word	0x0800bec8
 800112c:	200004f4 	.word	0x200004f4

08001130 <ReadDOSensor>:

// 读取DO传感器数据
void ReadDOSensor(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
    // 读取ADC原始值
    HAL_ADC_Start(&hadc1);
 8001136:	4818      	ldr	r0, [pc, #96]	@ (8001198 <ReadDOSensor+0x68>)
 8001138:	f004 fc98 	bl	8005a6c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800113c:	2164      	movs	r1, #100	@ 0x64
 800113e:	4816      	ldr	r0, [pc, #88]	@ (8001198 <ReadDOSensor+0x68>)
 8001140:	f004 fd6e 	bl	8005c20 <HAL_ADC_PollForConversion>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d105      	bne.n	8001156 <ReadDOSensor+0x26>
    {
        adc_raw = HAL_ADC_GetValue(&hadc1);
 800114a:	4813      	ldr	r0, [pc, #76]	@ (8001198 <ReadDOSensor+0x68>)
 800114c:	f004 fe6e 	bl	8005e2c <HAL_ADC_GetValue>
 8001150:	4603      	mov	r3, r0
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <ReadDOSensor+0x6c>)
 8001154:	6013      	str	r3, [r2, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8001156:	4810      	ldr	r0, [pc, #64]	@ (8001198 <ReadDOSensor+0x68>)
 8001158:	f004 fd36 	bl	8005bc8 <HAL_ADC_Stop>

    // 转换为电压 (mv)
    uint16_t raw_voltage = (uint16_t)(adc_raw * VREF_MV / ADC_RES);
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <ReadDOSensor+0x6c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	0b1b      	lsrs	r3, r3, #12
 800116a:	80fb      	strh	r3, [r7, #6]

    // 应用滤波
    adc_voltage = filterVoltage(raw_voltage);
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff3e 	bl	8000ff0 <filterVoltage>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <ReadDOSensor+0x70>)
 800117a:	801a      	strh	r2, [r3, #0]

    // 计算DO值 (基于官方算法)
    do_value = readDO(temperature);
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <ReadDOSensor+0x74>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff8b 	bl	800109c <readDO>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <ReadDOSensor+0x78>)
 800118c:	801a      	strh	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000025c 	.word	0x2000025c
 800119c:	200004f0 	.word	0x200004f0
 80011a0:	200004f4 	.word	0x200004f4
 80011a4:	2000005c 	.word	0x2000005c
 80011a8:	200004f6 	.word	0x200004f6

080011ac <UpdateTemperatureControlWithHysteresis>:

// 带滞后的温度控制逻辑
void UpdateTemperatureControlWithHysteresis(int16_t temp_x100)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af04      	add	r7, sp, #16
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
        system_state.temp_debounce_count = 0;
        return;
    }

    // 根据滞后逻辑确定新状态
    if (system_state.temp_control_active) {
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <UpdateTemperatureControlWithHysteresis+0x28>
        // 当前是开启状态，检查是否应该关闭
        new_state = (temp_x100 < TEMP_TURN_OFF) ? 1 : 0;
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	f640 62d7 	movw	r2, #3799	@ 0xed7
 80011c6:	4293      	cmp	r3, r2
 80011c8:	bfd4      	ite	le
 80011ca:	2301      	movle	r3, #1
 80011cc:	2300      	movgt	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e009      	b.n	80011e8 <UpdateTemperatureControlWithHysteresis+0x3c>
    } else {
        // 当前是关闭状态，检查是否应该开启
        new_state = (temp_x100 < TEMP_TURN_ON) ? 1 : 0;
 80011d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d8:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80011dc:	4293      	cmp	r3, r2
 80011de:	bfd4      	ite	le
 80011e0:	2301      	movle	r3, #1
 80011e2:	2300      	movgt	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
    }

    // 防抖动逻辑
    if (new_state == system_state.temp_pending_state) {
 80011e8:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 80011ea:	7a5b      	ldrb	r3, [r3, #9]
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d14e      	bne.n	8001290 <UpdateTemperatureControlWithHysteresis+0xe4>
        system_state.temp_debounce_count++;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 80011f4:	799b      	ldrb	r3, [r3, #6]
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 80011fc:	719a      	strb	r2, [r3, #6]
        if (system_state.temp_debounce_count >= DEBOUNCE_COUNT) {
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 8001200:	799b      	ldrb	r3, [r3, #6]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d94a      	bls.n	800129c <UpdateTemperatureControlWithHysteresis+0xf0>
            if (system_state.temp_control_active != new_state) {
 8001206:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d03b      	beq.n	8001288 <UpdateTemperatureControlWithHysteresis+0xdc>
                system_state.temp_control_active = new_state;
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	7013      	strb	r3, [r2, #0]

                // 更新LED状态
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, new_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001228:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <UpdateTemperatureControlWithHysteresis+0xfc>)
 800122a:	f005 faf6 	bl	800681a <HAL_GPIO_WritePin>

                Debug_Printf("Temperature Control State Changed: %s\r\n", new_state ? "ON" : "OFF");
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <UpdateTemperatureControlWithHysteresis+0x8c>
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <UpdateTemperatureControlWithHysteresis+0x100>)
 8001236:	e000      	b.n	800123a <UpdateTemperatureControlWithHysteresis+0x8e>
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <UpdateTemperatureControlWithHysteresis+0x104>)
 800123a:	4619      	mov	r1, r3
 800123c:	481d      	ldr	r0, [pc, #116]	@ (80012b4 <UpdateTemperatureControlWithHysteresis+0x108>)
 800123e:	f7ff feb1 	bl	8000fa4 <Debug_Printf>
                Debug_Printf("Current: %d.%02d°C, Thresholds: ON<%d.%02d°C, OFF>%d.%02d°C\r\n",
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	4a1c      	ldr	r2, [pc, #112]	@ (80012b8 <UpdateTemperatureControlWithHysteresis+0x10c>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1152      	asrs	r2, r2, #5
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b21b      	sxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <UpdateTemperatureControlWithHysteresis+0x10c>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1151      	asrs	r1, r2, #5
 8001262:	17da      	asrs	r2, r3, #31
 8001264:	1a8a      	subs	r2, r1, r2
 8001266:	2164      	movs	r1, #100	@ 0x64
 8001268:	fb01 f202 	mul.w	r2, r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	2300      	movs	r3, #0
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2326      	movs	r3, #38	@ 0x26
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2324      	movs	r3, #36	@ 0x24
 8001280:	4601      	mov	r1, r0
 8001282:	480e      	ldr	r0, [pc, #56]	@ (80012bc <UpdateTemperatureControlWithHysteresis+0x110>)
 8001284:	f7ff fe8e 	bl	8000fa4 <Debug_Printf>
                            temp_x100/100, temp_x100%100,
                            TEMP_TURN_ON/100, TEMP_TURN_ON%100,
                            TEMP_TURN_OFF/100, TEMP_TURN_OFF%100);
            }
            system_state.temp_debounce_count = 0;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 800128a:	2200      	movs	r2, #0
 800128c:	719a      	strb	r2, [r3, #6]
 800128e:	e005      	b.n	800129c <UpdateTemperatureControlWithHysteresis+0xf0>
        }
    } else {
        system_state.temp_pending_state = new_state;
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	7253      	strb	r3, [r2, #9]
        system_state.temp_debounce_count = 1;
 8001296:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <UpdateTemperatureControlWithHysteresis+0xf8>)
 8001298:	2201      	movs	r2, #1
 800129a:	719a      	strb	r2, [r3, #6]
    }
}
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200004dc 	.word	0x200004dc
 80012a8:	40010800 	.word	0x40010800
 80012ac:	0800ba2c 	.word	0x0800ba2c
 80012b0:	0800ba30 	.word	0x0800ba30
 80012b4:	0800ba34 	.word	0x0800ba34
 80012b8:	51eb851f 	.word	0x51eb851f
 80012bc:	0800ba5c 	.word	0x0800ba5c

080012c0 <UpdateFlowControlWithHysteresis>:

// 带滞后的流量控制逻辑
void UpdateFlowControlWithHysteresis(uint32_t flow_x100)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
    uint8_t new_state;

    // 根据滞后逻辑确定新状态
    if (system_state.flow_control_active) {
 80012c8:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <UpdateFlowControlWithHysteresis+0x20>
        // 当前是开启状态，检查是否应该关闭
        new_state = (flow_x100 < FLOW_TURN_OFF) ? 1 : 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b4a      	cmp	r3, #74	@ 0x4a
 80012d4:	bf94      	ite	ls
 80012d6:	2301      	movls	r3, #1
 80012d8:	2300      	movhi	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e006      	b.n	80012ee <UpdateFlowControlWithHysteresis+0x2e>
    } else {
        // 当前是关闭状态，检查是否应该开启
        new_state = (flow_x100 < FLOW_TURN_ON) ? 1 : 0;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b18      	cmp	r3, #24
 80012e4:	bf94      	ite	ls
 80012e6:	2301      	movls	r3, #1
 80012e8:	2300      	movhi	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	73fb      	strb	r3, [r7, #15]
    }

    // 防抖动逻辑
    if (new_state == system_state.flow_pending_state) {
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 80012f0:	7a9b      	ldrb	r3, [r3, #10]
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d143      	bne.n	8001380 <UpdateFlowControlWithHysteresis+0xc0>
        system_state.flow_debounce_count++;
 80012f8:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 80012fa:	79db      	ldrb	r3, [r3, #7]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 8001302:	71da      	strb	r2, [r3, #7]
        if (system_state.flow_debounce_count >= DEBOUNCE_COUNT) {
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 8001306:	79db      	ldrb	r3, [r3, #7]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d93f      	bls.n	800138c <UpdateFlowControlWithHysteresis+0xcc>
            if (system_state.flow_control_active != new_state) {
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 800130e:	785b      	ldrb	r3, [r3, #1]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	429a      	cmp	r2, r3
 8001314:	d030      	beq.n	8001378 <UpdateFlowControlWithHysteresis+0xb8>
                system_state.flow_control_active = new_state;
 8001316:	4a1f      	ldr	r2, [pc, #124]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	7053      	strb	r3, [r2, #1]

                // 更新LED状态
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, new_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800132e:	481a      	ldr	r0, [pc, #104]	@ (8001398 <UpdateFlowControlWithHysteresis+0xd8>)
 8001330:	f005 fa73 	bl	800681a <HAL_GPIO_WritePin>

                Debug_Printf("Flow Control State Changed: %s\r\n", new_state ? "ON" : "OFF");
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <UpdateFlowControlWithHysteresis+0x7e>
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <UpdateFlowControlWithHysteresis+0xdc>)
 800133c:	e000      	b.n	8001340 <UpdateFlowControlWithHysteresis+0x80>
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <UpdateFlowControlWithHysteresis+0xe0>)
 8001340:	4619      	mov	r1, r3
 8001342:	4818      	ldr	r0, [pc, #96]	@ (80013a4 <UpdateFlowControlWithHysteresis+0xe4>)
 8001344:	f7ff fe2e 	bl	8000fa4 <Debug_Printf>
                Debug_Printf("Current: %d.%02d L/min, Thresholds: ON<%d.%02d, OFF>%d.%02d\r\n",
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <UpdateFlowControlWithHysteresis+0xe8>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0959      	lsrs	r1, r3, #5
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <UpdateFlowControlWithHysteresis+0xe8>)
 8001356:	fba2 0203 	umull	r0, r2, r2, r3
 800135a:	0952      	lsrs	r2, r2, #5
 800135c:	2064      	movs	r0, #100	@ 0x64
 800135e:	fb00 f202 	mul.w	r2, r0, r2
 8001362:	1a9a      	subs	r2, r3, r2
 8001364:	234b      	movs	r3, #75	@ 0x4b
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2300      	movs	r3, #0
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	2319      	movs	r3, #25
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	480e      	ldr	r0, [pc, #56]	@ (80013ac <UpdateFlowControlWithHysteresis+0xec>)
 8001374:	f7ff fe16 	bl	8000fa4 <Debug_Printf>
                            flow_x100/100, flow_x100%100,
                            FLOW_TURN_ON/100, FLOW_TURN_ON%100,
                            FLOW_TURN_OFF/100, FLOW_TURN_OFF%100);
            }
            system_state.flow_debounce_count = 0;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 800137a:	2200      	movs	r2, #0
 800137c:	71da      	strb	r2, [r3, #7]
        }
    } else {
        system_state.flow_pending_state = new_state;
        system_state.flow_debounce_count = 1;
    }
}
 800137e:	e005      	b.n	800138c <UpdateFlowControlWithHysteresis+0xcc>
        system_state.flow_pending_state = new_state;
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	7293      	strb	r3, [r2, #10]
        system_state.flow_debounce_count = 1;
 8001386:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <UpdateFlowControlWithHysteresis+0xd4>)
 8001388:	2201      	movs	r2, #1
 800138a:	71da      	strb	r2, [r3, #7]
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200004dc 	.word	0x200004dc
 8001398:	40010800 	.word	0x40010800
 800139c:	0800ba2c 	.word	0x0800ba2c
 80013a0:	0800ba30 	.word	0x0800ba30
 80013a4:	0800baa0 	.word	0x0800baa0
 80013a8:	51eb851f 	.word	0x51eb851f
 80013ac:	0800bac4 	.word	0x0800bac4

080013b0 <UpdateDOControlWithHysteresis>:

// 带滞后的DO控制逻辑
void UpdateDOControlWithHysteresis(uint16_t do_x1000)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
    uint8_t new_state;

    // 根据滞后逻辑确定新状态
    if (system_state.do_control_active) {
 80013ba:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <UpdateDOControlWithHysteresis+0x26>
        // 当前是开启状态，检查是否应该关闭
        new_state = (do_x1000 > DO_TURN_OFF) ? 1 : 0;
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf8c      	ite	hi
 80013cc:	2301      	movhi	r3, #1
 80013ce:	2300      	movls	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e008      	b.n	80013e8 <UpdateDOControlWithHysteresis+0x38>
    } else {
        // 当前是关闭状态，检查是否应该开启
        new_state = (do_x1000 > DO_TURN_ON) ? 1 : 0;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80013dc:	4293      	cmp	r3, r2
 80013de:	bf8c      	ite	hi
 80013e0:	2301      	movhi	r3, #1
 80013e2:	2300      	movls	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
    }

    // 防抖动逻辑
    if (new_state == system_state.do_pending_state) {
 80013e8:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 80013ea:	7adb      	ldrb	r3, [r3, #11]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d14b      	bne.n	800148a <UpdateDOControlWithHysteresis+0xda>
        system_state.do_debounce_count++;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 80013f4:	7a1b      	ldrb	r3, [r3, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 80013fc:	721a      	strb	r2, [r3, #8]
        if (system_state.do_debounce_count >= DEBOUNCE_COUNT) {
 80013fe:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 8001400:	7a1b      	ldrb	r3, [r3, #8]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d947      	bls.n	8001496 <UpdateDOControlWithHysteresis+0xe6>
            if (system_state.do_control_active != new_state) {
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	429a      	cmp	r2, r3
 800140e:	d038      	beq.n	8001482 <UpdateDOControlWithHysteresis+0xd2>
                system_state.do_control_active = new_state;
 8001410:	4a23      	ldr	r2, [pc, #140]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	7093      	strb	r3, [r2, #2]

                // 更新LED状态
                HAL_GPIO_WritePin(DO_LED_PORT, DO_LED_PIN, new_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001428:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <UpdateDOControlWithHysteresis+0xf4>)
 800142a:	f005 f9f6 	bl	800681a <HAL_GPIO_WritePin>

                Debug_Printf("DO Control State Changed: %s\r\n", new_state ? "ON" : "OFF");
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <UpdateDOControlWithHysteresis+0x88>
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <UpdateDOControlWithHysteresis+0xf8>)
 8001436:	e000      	b.n	800143a <UpdateDOControlWithHysteresis+0x8a>
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <UpdateDOControlWithHysteresis+0xfc>)
 800143a:	4619      	mov	r1, r3
 800143c:	481c      	ldr	r0, [pc, #112]	@ (80014b0 <UpdateDOControlWithHysteresis+0x100>)
 800143e:	f7ff fdb1 	bl	8000fa4 <Debug_Printf>
                Debug_Printf("Current: %d.%03d mg/L, Thresholds: ON>%d.%03d, OFF<%d.%03d\r\n",
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <UpdateDOControlWithHysteresis+0x104>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	099b      	lsrs	r3, r3, #6
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <UpdateDOControlWithHysteresis+0x104>)
 8001454:	fba2 1203 	umull	r1, r2, r2, r3
 8001458:	0992      	lsrs	r2, r2, #6
 800145a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800145e:	fb01 f202 	mul.w	r2, r1, r2
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2302      	movs	r3, #2
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2303      	movs	r3, #3
 800147a:	4601      	mov	r1, r0
 800147c:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <UpdateDOControlWithHysteresis+0x108>)
 800147e:	f7ff fd91 	bl	8000fa4 <Debug_Printf>
                            do_x1000/1000, do_x1000%1000,
                            DO_TURN_ON/1000, DO_TURN_ON%1000,
                            DO_TURN_OFF/1000, DO_TURN_OFF%1000);
            }
            system_state.do_debounce_count = 0;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 8001484:	2200      	movs	r2, #0
 8001486:	721a      	strb	r2, [r3, #8]
        }
    } else {
        system_state.do_pending_state = new_state;
        system_state.do_debounce_count = 1;
    }
}
 8001488:	e005      	b.n	8001496 <UpdateDOControlWithHysteresis+0xe6>
        system_state.do_pending_state = new_state;
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	72d3      	strb	r3, [r2, #11]
        system_state.do_debounce_count = 1;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <UpdateDOControlWithHysteresis+0xf0>)
 8001492:	2201      	movs	r2, #1
 8001494:	721a      	strb	r2, [r3, #8]
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200004dc 	.word	0x200004dc
 80014a4:	40010800 	.word	0x40010800
 80014a8:	0800ba2c 	.word	0x0800ba2c
 80014ac:	0800ba30 	.word	0x0800ba30
 80014b0:	0800bb04 	.word	0x0800bb04
 80014b4:	10624dd3 	.word	0x10624dd3
 80014b8:	0800bb24 	.word	0x0800bb24

080014bc <UpdateHeaterControl>:

//更新加热器控制 (低电平触发MOSFET)
void UpdateHeaterControl(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    if (system_state.temp_control_active) {
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <UpdateHeaterControl+0x50>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00f      	beq.n	80014e8 <UpdateHeaterControl+0x2c>
        // 温度LED亮起时，打开加热器 (输出低电平)
        if (!system_state.heater_on) {
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <UpdateHeaterControl+0x50>)
 80014ca:	78db      	ldrb	r3, [r3, #3]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d11a      	bne.n	8001506 <UpdateHeaterControl+0x4a>
            HAL_GPIO_WritePin(HEATER_PORT, HEATER_PIN, GPIO_PIN_SET);  // 低电平导通
 80014d0:	2201      	movs	r2, #1
 80014d2:	2101      	movs	r1, #1
 80014d4:	480e      	ldr	r0, [pc, #56]	@ (8001510 <UpdateHeaterControl+0x54>)
 80014d6:	f005 f9a0 	bl	800681a <HAL_GPIO_WritePin>
            system_state.heater_on = 1;
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <UpdateHeaterControl+0x50>)
 80014dc:	2201      	movs	r2, #1
 80014de:	70da      	strb	r2, [r3, #3]
            Debug_Print("Heater: ON (GPIO LOW)\r\n");
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <UpdateHeaterControl+0x58>)
 80014e2:	f7ff fd4b 	bl	8000f7c <Debug_Print>
            HAL_GPIO_WritePin(HEATER_PORT, HEATER_PIN, GPIO_PIN_RESET);    // 高电平断开
            system_state.heater_on = 0;
            Debug_Print("Heater: OFF (GPIO HIGH)\r\n");
        }
    }
}
 80014e6:	e00e      	b.n	8001506 <UpdateHeaterControl+0x4a>
        if (system_state.heater_on) {
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <UpdateHeaterControl+0x50>)
 80014ea:	78db      	ldrb	r3, [r3, #3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <UpdateHeaterControl+0x4a>
            HAL_GPIO_WritePin(HEATER_PORT, HEATER_PIN, GPIO_PIN_RESET);    // 高电平断开
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4806      	ldr	r0, [pc, #24]	@ (8001510 <UpdateHeaterControl+0x54>)
 80014f6:	f005 f990 	bl	800681a <HAL_GPIO_WritePin>
            system_state.heater_on = 0;
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <UpdateHeaterControl+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	70da      	strb	r2, [r3, #3]
            Debug_Print("Heater: OFF (GPIO HIGH)\r\n");
 8001500:	4805      	ldr	r0, [pc, #20]	@ (8001518 <UpdateHeaterControl+0x5c>)
 8001502:	f7ff fd3b 	bl	8000f7c <Debug_Print>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004dc 	.word	0x200004dc
 8001510:	40010c00 	.word	0x40010c00
 8001514:	0800bb64 	.word	0x0800bb64
 8001518:	0800bb7c 	.word	0x0800bb7c

0800151c <UpdatePumpControl>:

// 水泵控制 (低电平触发MOSFET)
void UpdatePumpControl(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    if (system_state.flow_control_active) {
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <UpdatePumpControl+0x50>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00f      	beq.n	8001548 <UpdatePumpControl+0x2c>
        // 流量LED亮起时，打开水泵 (输出低电平)
        if (!system_state.pump_on) {
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <UpdatePumpControl+0x50>)
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11a      	bne.n	8001566 <UpdatePumpControl+0x4a>
            HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_SET);      // 低电平导通
 8001530:	2201      	movs	r2, #1
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	480e      	ldr	r0, [pc, #56]	@ (8001570 <UpdatePumpControl+0x54>)
 8001536:	f005 f970 	bl	800681a <HAL_GPIO_WritePin>
            system_state.pump_on = 1;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <UpdatePumpControl+0x50>)
 800153c:	2201      	movs	r2, #1
 800153e:	711a      	strb	r2, [r3, #4]
            Debug_Print("Heater: ON (GPIO LOW)\r\n");
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <UpdatePumpControl+0x58>)
 8001542:	f7ff fd1b 	bl	8000f7c <Debug_Print>
            HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_RESET);        // 高电平断开
            system_state.pump_on = 0;
             Debug_Print("Heater: OFF (GPIO HIGH)\r\n");
        }
    }
}
 8001546:	e00e      	b.n	8001566 <UpdatePumpControl+0x4a>
        if (system_state.pump_on) {
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <UpdatePumpControl+0x50>)
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00a      	beq.n	8001566 <UpdatePumpControl+0x4a>
            HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_RESET);        // 高电平断开
 8001550:	2200      	movs	r2, #0
 8001552:	2180      	movs	r1, #128	@ 0x80
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <UpdatePumpControl+0x54>)
 8001556:	f005 f960 	bl	800681a <HAL_GPIO_WritePin>
            system_state.pump_on = 0;
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <UpdatePumpControl+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	711a      	strb	r2, [r3, #4]
             Debug_Print("Heater: OFF (GPIO HIGH)\r\n");
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <UpdatePumpControl+0x5c>)
 8001562:	f7ff fd0b 	bl	8000f7c <Debug_Print>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200004dc 	.word	0x200004dc
 8001570:	40010c00 	.word	0x40010c00
 8001574:	0800bb64 	.word	0x0800bb64
 8001578:	0800bb7c 	.word	0x0800bb7c

0800157c <UpdateVacuumPumpControl>:

// 真空泵控制 (低电平触发MOSFET)
void UpdateVacuumPumpControl(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    if (system_state.do_control_active) {
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <UpdateVacuumPumpControl+0x50>)
 8001582:	789b      	ldrb	r3, [r3, #2]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00f      	beq.n	80015a8 <UpdateVacuumPumpControl+0x2c>
        // DO LED亮起时，打开真空泵 (输出低电平)
        if (!system_state.vacuum_pump_on) {
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <UpdateVacuumPumpControl+0x50>)
 800158a:	795b      	ldrb	r3, [r3, #5]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11a      	bne.n	80015c6 <UpdateVacuumPumpControl+0x4a>
            HAL_GPIO_WritePin(VACUUM_PUMP_PORT, VACUUM_PUMP_PIN, GPIO_PIN_SET);  // 低电平导通
 8001590:	2201      	movs	r2, #1
 8001592:	2140      	movs	r1, #64	@ 0x40
 8001594:	480e      	ldr	r0, [pc, #56]	@ (80015d0 <UpdateVacuumPumpControl+0x54>)
 8001596:	f005 f940 	bl	800681a <HAL_GPIO_WritePin>
            system_state.vacuum_pump_on = 1;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <UpdateVacuumPumpControl+0x50>)
 800159c:	2201      	movs	r2, #1
 800159e:	715a      	strb	r2, [r3, #5]
            Debug_Print("Vacuum Pump: ON (GPIO LOW)\r\n");
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <UpdateVacuumPumpControl+0x58>)
 80015a2:	f7ff fceb 	bl	8000f7c <Debug_Print>
            HAL_GPIO_WritePin(VACUUM_PUMP_PORT, VACUUM_PUMP_PIN, GPIO_PIN_RESET);    // 高电平断开
            system_state.vacuum_pump_on = 0;
            Debug_Print("Vacuum Pump: OFF (GPIO HIGH)\r\n");
        }
    }
}
 80015a6:	e00e      	b.n	80015c6 <UpdateVacuumPumpControl+0x4a>
        if (system_state.vacuum_pump_on) {
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <UpdateVacuumPumpControl+0x50>)
 80015aa:	795b      	ldrb	r3, [r3, #5]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00a      	beq.n	80015c6 <UpdateVacuumPumpControl+0x4a>
            HAL_GPIO_WritePin(VACUUM_PUMP_PORT, VACUUM_PUMP_PIN, GPIO_PIN_RESET);    // 高电平断开
 80015b0:	2200      	movs	r2, #0
 80015b2:	2140      	movs	r1, #64	@ 0x40
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <UpdateVacuumPumpControl+0x54>)
 80015b6:	f005 f930 	bl	800681a <HAL_GPIO_WritePin>
            system_state.vacuum_pump_on = 0;
 80015ba:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <UpdateVacuumPumpControl+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	715a      	strb	r2, [r3, #5]
            Debug_Print("Vacuum Pump: OFF (GPIO HIGH)\r\n");
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <UpdateVacuumPumpControl+0x5c>)
 80015c2:	f7ff fcdb 	bl	8000f7c <Debug_Print>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004dc 	.word	0x200004dc
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	0800bb98 	.word	0x0800bb98
 80015d8:	0800bbb8 	.word	0x0800bbb8

080015dc <SyncTargetValuesToControl>:

//*******************************FT812******************************************************
// 目标值同步函数
void SyncTargetValuesToControl(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
    // 将屏幕设置的目标值同步到控制系统
    target_temp = chart_settings[2].target_value;  // 温度图表(索引2)的目标值
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <SyncTargetValuesToControl+0x24>)
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <SyncTargetValuesToControl+0x28>)
 80015e6:	6013      	str	r3, [r2, #0]
    target_flow = chart_settings[0].target_value;  // 流量图表(索引0)的目标值
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SyncTargetValuesToControl+0x24>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <SyncTargetValuesToControl+0x2c>)
 80015ee:	6013      	str	r3, [r2, #0]
    target_do = chart_settings[1].target_value;    // DO图表(索引1)的目标值
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <SyncTargetValuesToControl+0x24>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <SyncTargetValuesToControl+0x30>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000290 	.word	0x20000290
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004
 800160c:	20000008 	.word	0x20000008

08001610 <EVE_CS_LOW>:
    chart_settings[0].target_value = target_flow;  // 流量
    chart_settings[1].target_value = target_do;    // DO
}

// FT812 GPIO控制
static void EVE_CS_LOW(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EVE_CS_Port, EVE_CS_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2110      	movs	r1, #16
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <EVE_CS_LOW+0x14>)
 800161a:	f005 f8fe 	bl	800681a <HAL_GPIO_WritePin>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40010800 	.word	0x40010800

08001628 <EVE_CS_HIGH>:

static void EVE_CS_HIGH(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EVE_CS_Port, EVE_CS_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2110      	movs	r1, #16
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <EVE_CS_HIGH+0x14>)
 8001632:	f005 f8f2 	bl	800681a <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010800 	.word	0x40010800

08001640 <EVE_PD_LOW>:

static void EVE_PD_LOW(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EVE_PD_Port, EVE_PD_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2108      	movs	r1, #8
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <EVE_PD_LOW+0x14>)
 800164a:	f005 f8e6 	bl	800681a <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40010c00 	.word	0x40010c00

08001658 <EVE_PD_HIGH>:

static void EVE_PD_HIGH(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EVE_PD_Port, EVE_PD_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2108      	movs	r1, #8
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <EVE_PD_HIGH+0x14>)
 8001662:	f005 f8da 	bl	800681a <HAL_GPIO_WritePin>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40010c00 	.word	0x40010c00

08001670 <FT812_SendHostCommand>:

// FT812通信函数
void FT812_SendHostCommand(uint8_t cmd) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    uint8_t command[3] = {cmd, 0x00, 0x00};
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	733b      	strb	r3, [r7, #12]
 800167e:	2300      	movs	r3, #0
 8001680:	737b      	strb	r3, [r7, #13]
 8001682:	2300      	movs	r3, #0
 8001684:	73bb      	strb	r3, [r7, #14]
    EVE_CS_LOW();
 8001686:	f7ff ffc3 	bl	8001610 <EVE_CS_LOW>
    HAL_SPI_Transmit(&hspi1, command, 3, HAL_MAX_DELAY);
 800168a:	f107 010c 	add.w	r1, r7, #12
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2203      	movs	r2, #3
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <FT812_SendHostCommand+0x38>)
 8001696:	f005 fef1 	bl	800747c <HAL_SPI_Transmit>
    EVE_CS_HIGH();
 800169a:	f7ff ffc5 	bl	8001628 <EVE_CS_HIGH>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000ce4 	.word	0x20000ce4

080016ac <FT812_ReadByte>:

uint8_t FT812_ReadByte(uint32_t addr) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint8_t data = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	72fb      	strb	r3, [r7, #11]

    cmd[0] = MEM_READ | ((addr >> 16) & 0x3F);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0c1b      	lsrs	r3, r3, #16
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	733b      	strb	r3, [r7, #12]
    cmd[1] = (addr >> 8) & 0xFF;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	737b      	strb	r3, [r7, #13]
    cmd[2] = addr & 0xFF;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	73bb      	strb	r3, [r7, #14]
    cmd[3] = 0x00;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]

    EVE_CS_LOW();
 80016d8:	f7ff ff9a 	bl	8001610 <EVE_CS_LOW>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 80016dc:	f107 010c 	add.w	r1, r7, #12
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	2204      	movs	r2, #4
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <FT812_ReadByte+0x60>)
 80016e8:	f005 fec8 	bl	800747c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80016ec:	f107 010b 	add.w	r1, r7, #11
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	2201      	movs	r2, #1
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <FT812_ReadByte+0x60>)
 80016f8:	f006 f804 	bl	8007704 <HAL_SPI_Receive>
    EVE_CS_HIGH();
 80016fc:	f7ff ff94 	bl	8001628 <EVE_CS_HIGH>

    return data;
 8001700:	7afb      	ldrb	r3, [r7, #11]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000ce4 	.word	0x20000ce4

08001710 <FT812_WriteByte>:

void FT812_WriteByte(uint32_t addr, uint8_t data) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd[4];

    cmd[0] = MEM_WRITE | ((addr >> 16) & 0x3F);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	0c1b      	lsrs	r3, r3, #16
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800172c:	b2db      	uxtb	r3, r3
 800172e:	733b      	strb	r3, [r7, #12]
    cmd[1] = (addr >> 8) & 0xFF;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b2db      	uxtb	r3, r3
 8001736:	737b      	strb	r3, [r7, #13]
    cmd[2] = addr & 0xFF;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	73bb      	strb	r3, [r7, #14]
    cmd[3] = data;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	73fb      	strb	r3, [r7, #15]

    EVE_CS_LOW();
 8001742:	f7ff ff65 	bl	8001610 <EVE_CS_LOW>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8001746:	f107 010c 	add.w	r1, r7, #12
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	2204      	movs	r2, #4
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <FT812_WriteByte+0x54>)
 8001752:	f005 fe93 	bl	800747c <HAL_SPI_Transmit>
    EVE_CS_HIGH();
 8001756:	f7ff ff67 	bl	8001628 <EVE_CS_HIGH>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000ce4 	.word	0x20000ce4

08001768 <FT812_WriteReg16>:

void FT812_WriteReg16(uint32_t addr, uint16_t data) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
    FT812_WriteByte(addr, data & 0xFF);
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffc8 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(addr + 1, (data >> 8) & 0xFF);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f7ff ffbe 	bl	8001710 <FT812_WriteByte>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <FT812_WriteReg32>:

void FT812_WriteReg32(uint32_t addr, uint32_t data) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
    FT812_WriteByte(addr, data & 0xFF);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffaf 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(addr + 1, (data >> 8) & 0xFF);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f7ff ffa6 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(addr + 2, (data >> 16) & 0xFF);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	1c9a      	adds	r2, r3, #2
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff ff9d 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(addr + 3, (data >> 24) & 0xFF);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	1cda      	adds	r2, r3, #3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	0e1b      	lsrs	r3, r3, #24
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f7ff ff94 	bl	8001710 <FT812_WriteByte>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <FT812_ReadReg32>:

uint32_t FT812_ReadReg32(uint32_t addr) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    uint32_t data = FT812_ReadByte(addr);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff57 	bl	80016ac <FT812_ReadByte>
 80017fe:	4603      	mov	r3, r0
 8001800:	60fb      	str	r3, [r7, #12]
    data |= (uint32_t)FT812_ReadByte(addr + 1) << 8;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff50 	bl	80016ac <FT812_ReadByte>
 800180c:	4603      	mov	r3, r0
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
    data |= (uint32_t)FT812_ReadByte(addr + 2) << 16;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3302      	adds	r3, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff46 	bl	80016ac <FT812_ReadByte>
 8001820:	4603      	mov	r3, r0
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
    data |= (uint32_t)FT812_ReadByte(addr + 3) << 24;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff3c 	bl	80016ac <FT812_ReadByte>
 8001834:	4603      	mov	r3, r0
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
    return data;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <FT812_ReadReg16>:

uint16_t FT812_ReadReg16(uint32_t addr) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    uint16_t data = FT812_ReadByte(addr);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff2b 	bl	80016ac <FT812_ReadByte>
 8001856:	4603      	mov	r3, r0
 8001858:	81fb      	strh	r3, [r7, #14]
    data |= (uint16_t)FT812_ReadByte(addr + 1) << 8;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff24 	bl	80016ac <FT812_ReadByte>
 8001864:	4603      	mov	r3, r0
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800186e:	4313      	orrs	r3, r2
 8001870:	b21b      	sxth	r3, r3
 8001872:	81fb      	strh	r3, [r7, #14]
    return data;
 8001874:	89fb      	ldrh	r3, [r7, #14]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <GetFontIndex>:

// FT812初始化相关函数
int GetFontIndex(uint8_t font) {
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
    for(int i = 0; i < USED_FONT_COUNT; i++) {
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e00b      	b.n	80018a8 <GetFontIndex+0x28>
        if(used_fonts[i] == font) {
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <GetFontIndex+0x3c>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	429a      	cmp	r2, r3
 800189c:	d101      	bne.n	80018a2 <GetFontIndex+0x22>
            return i;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	e007      	b.n	80018b2 <GetFontIndex+0x32>
    for(int i = 0; i < USED_FONT_COUNT; i++) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	ddf0      	ble.n	8001890 <GetFontIndex+0x10>
        }
    }
    return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	0800bf1c 	.word	0x0800bf1c

080018c0 <LoadFontWidthTable>:

void LoadFontWidthTable(uint8_t font)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
    int font_index = GetFontIndex(font);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffd7 	bl	8001880 <GetFontIndex>
 80018d2:	61b8      	str	r0, [r7, #24]
    if(font_index == -1) return;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d028      	beq.n	800192e <LoadFontWidthTable+0x6e>

    uint32_t font_metrics_addr = 0x2FFFFC;
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <LoadFontWidthTable+0x78>)
 80018de:	617b      	str	r3, [r7, #20]
    uint32_t root_addr = FT812_ReadReg32(font_metrics_addr);
 80018e0:	6978      	ldr	r0, [r7, #20]
 80018e2:	f7ff ff85 	bl	80017f0 <FT812_ReadReg32>
 80018e6:	6138      	str	r0, [r7, #16]
    uint32_t metrics_addr = root_addr + 148 * (font - 16);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	3b10      	subs	r3, #16
 80018ec:	2294      	movs	r2, #148	@ 0x94
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < 128; i++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e012      	b.n	8001926 <LoadFontWidthTable+0x66>
        font_width_tab[font_index][i] = FT812_ReadByte(metrics_addr + i);
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fed0 	bl	80016ac <FT812_ReadByte>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <LoadFontWidthTable+0x7c>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	01db      	lsls	r3, r3, #7
 8001916:	441a      	add	r2, r3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4413      	add	r3, r2
 800191c:	460a      	mov	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++) {
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b7f      	cmp	r3, #127	@ 0x7f
 800192a:	dde9      	ble.n	8001900 <LoadFontWidthTable+0x40>
 800192c:	e000      	b.n	8001930 <LoadFontWidthTable+0x70>
    if(font_index == -1) return;
 800192e:	bf00      	nop
    }
}
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	002ffffc 	.word	0x002ffffc
 800193c:	200002dc 	.word	0x200002dc

08001940 <LoadAllRequiredFonts>:

void LoadAllRequiredFonts(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
    for(int i = 0; i < USED_FONT_COUNT; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	e00c      	b.n	8001966 <LoadAllRequiredFonts+0x26>
        LoadFontWidthTable(used_fonts[i]);
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoadAllRequiredFonts+0x38>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ffb3 	bl	80018c0 <LoadFontWidthTable>
        HAL_Delay(10);
 800195a:	200a      	movs	r0, #10
 800195c:	f003 ff8a 	bl	8005874 <HAL_Delay>
    for(int i = 0; i < USED_FONT_COUNT; i++) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b03      	cmp	r3, #3
 800196a:	ddef      	ble.n	800194c <LoadAllRequiredFonts+0xc>
    }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	0800bf1c 	.word	0x0800bf1c

0800197c <TouchInitialize_WithYourCalibrationData>:

void TouchInitialize_WithYourCalibrationData(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
    FT812_WriteReg32(0x302150, 32368);
 8001982:	f647 6170 	movw	r1, #32368	@ 0x7e70
 8001986:	4828      	ldr	r0, [pc, #160]	@ (8001a28 <TouchInitialize_WithYourCalibrationData+0xac>)
 8001988:	f7ff ff08 	bl	800179c <FT812_WriteReg32>
    FT812_WriteReg32(0x302154, 613);
 800198c:	f240 2165 	movw	r1, #613	@ 0x265
 8001990:	4826      	ldr	r0, [pc, #152]	@ (8001a2c <TouchInitialize_WithYourCalibrationData+0xb0>)
 8001992:	f7ff ff03 	bl	800179c <FT812_WriteReg32>
    FT812_WriteReg32(0x302158, -1006113);
 8001996:	4926      	ldr	r1, [pc, #152]	@ (8001a30 <TouchInitialize_WithYourCalibrationData+0xb4>)
 8001998:	4826      	ldr	r0, [pc, #152]	@ (8001a34 <TouchInitialize_WithYourCalibrationData+0xb8>)
 800199a:	f7ff feff 	bl	800179c <FT812_WriteReg32>
    FT812_WriteReg32(0x30215C, 263);
 800199e:	f240 1107 	movw	r1, #263	@ 0x107
 80019a2:	4825      	ldr	r0, [pc, #148]	@ (8001a38 <TouchInitialize_WithYourCalibrationData+0xbc>)
 80019a4:	f7ff fefa 	bl	800179c <FT812_WriteReg32>
    FT812_WriteReg32(0x302160, -20164);
 80019a8:	4924      	ldr	r1, [pc, #144]	@ (8001a3c <TouchInitialize_WithYourCalibrationData+0xc0>)
 80019aa:	4825      	ldr	r0, [pc, #148]	@ (8001a40 <TouchInitialize_WithYourCalibrationData+0xc4>)
 80019ac:	f7ff fef6 	bl	800179c <FT812_WriteReg32>
    FT812_WriteReg32(0x302164, 19061412);
 80019b0:	4924      	ldr	r1, [pc, #144]	@ (8001a44 <TouchInitialize_WithYourCalibrationData+0xc8>)
 80019b2:	4825      	ldr	r0, [pc, #148]	@ (8001a48 <TouchInitialize_WithYourCalibrationData+0xcc>)
 80019b4:	f7ff fef2 	bl	800179c <FT812_WriteReg32>

    uint32_t dl_addr = RAM_DL;
 80019b8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80019bc:	607b      	str	r3, [r7, #4]
    FT812_WriteReg32(dl_addr, CLEAR_COLOR_RGB(0, 100, 0)); dl_addr += 4;
 80019be:	4923      	ldr	r1, [pc, #140]	@ (8001a4c <TouchInitialize_WithYourCalibrationData+0xd0>)
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff feeb 	bl	800179c <FT812_WriteReg32>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	607b      	str	r3, [r7, #4]
    FT812_WriteReg32(dl_addr, CLEAR(1, 1, 1)); dl_addr += 4;
 80019cc:	4920      	ldr	r1, [pc, #128]	@ (8001a50 <TouchInitialize_WithYourCalibrationData+0xd4>)
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fee4 	bl	800179c <FT812_WriteReg32>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	607b      	str	r3, [r7, #4]
    FT812_WriteReg32(dl_addr, COLOR_RGB(255, 255, 255)); dl_addr += 4;
 80019da:	f06f 417b 	mvn.w	r1, #4211081216	@ 0xfb000000
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fedc 	bl	800179c <FT812_WriteReg32>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	607b      	str	r3, [r7, #4]
    FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 80019ea:	491a      	ldr	r1, [pc, #104]	@ (8001a54 <TouchInitialize_WithYourCalibrationData+0xd8>)
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fed5 	bl	800179c <FT812_WriteReg32>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3304      	adds	r3, #4
 80019f6:	607b      	str	r3, [r7, #4]

    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 80019f8:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fecd 	bl	800179c <FT812_WriteReg32>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	607b      	str	r3, [r7, #4]
    FT812_WriteReg32(dl_addr, DISPLAY());
 8001a08:	2100      	movs	r1, #0
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fec6 	bl	800179c <FT812_WriteReg32>
    FT812_WriteByte(REG_DLSWAP, DLSWAP_FRAME);
 8001a10:	2102      	movs	r1, #2
 8001a12:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <TouchInitialize_WithYourCalibrationData+0xdc>)
 8001a14:	f7ff fe7c 	bl	8001710 <FT812_WriteByte>

    HAL_Delay(500);
 8001a18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a1c:	f003 ff2a 	bl	8005874 <HAL_Delay>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	00302150 	.word	0x00302150
 8001a2c:	00302154 	.word	0x00302154
 8001a30:	fff0a5df 	.word	0xfff0a5df
 8001a34:	00302158 	.word	0x00302158
 8001a38:	0030215c 	.word	0x0030215c
 8001a3c:	ffffb13c 	.word	0xffffb13c
 8001a40:	00302160 	.word	0x00302160
 8001a44:	0122daa4 	.word	0x0122daa4
 8001a48:	00302164 	.word	0x00302164
 8001a4c:	02006400 	.word	0x02006400
 8001a50:	26000007 	.word	0x26000007
 8001a54:	1f000001 	.word	0x1f000001
 8001a58:	00302054 	.word	0x00302054

08001a5c <FT812_Initialize>:

void FT812_Initialize(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    EVE_CS_HIGH();
 8001a60:	f7ff fde2 	bl	8001628 <EVE_CS_HIGH>
    HAL_Delay(10);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f003 ff05 	bl	8005874 <HAL_Delay>
    EVE_PD_LOW();
 8001a6a:	f7ff fde9 	bl	8001640 <EVE_PD_LOW>
    HAL_Delay(20);
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f003 ff00 	bl	8005874 <HAL_Delay>
    EVE_PD_HIGH();
 8001a74:	f7ff fdf0 	bl	8001658 <EVE_PD_HIGH>
    HAL_Delay(20);
 8001a78:	2014      	movs	r0, #20
 8001a7a:	f003 fefb 	bl	8005874 <HAL_Delay>

    FT812_SendHostCommand(HOST_CMD_CLKEXT);
 8001a7e:	2044      	movs	r0, #68	@ 0x44
 8001a80:	f7ff fdf6 	bl	8001670 <FT812_SendHostCommand>
    HAL_Delay(10);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f003 fef5 	bl	8005874 <HAL_Delay>
    FT812_SendHostCommand(HOST_CMD_ACTIVE);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fdf0 	bl	8001670 <FT812_SendHostCommand>
    HAL_Delay(300);
 8001a90:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a94:	f003 feee 	bl	8005874 <HAL_Delay>

    FT812_ReadByte(REG_ID);
 8001a98:	483a      	ldr	r0, [pc, #232]	@ (8001b84 <FT812_Initialize+0x128>)
 8001a9a:	f7ff fe07 	bl	80016ac <FT812_ReadByte>

    FT812_WriteReg16(REG_HCYCLE, 548);
 8001a9e:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8001aa2:	4839      	ldr	r0, [pc, #228]	@ (8001b88 <FT812_Initialize+0x12c>)
 8001aa4:	f7ff fe60 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_HOFFSET, 43);
 8001aa8:	212b      	movs	r1, #43	@ 0x2b
 8001aaa:	4838      	ldr	r0, [pc, #224]	@ (8001b8c <FT812_Initialize+0x130>)
 8001aac:	f7ff fe5c 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_HSIZE, 480);
 8001ab0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001ab4:	4836      	ldr	r0, [pc, #216]	@ (8001b90 <FT812_Initialize+0x134>)
 8001ab6:	f7ff fe57 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_HSYNC0, 0);
 8001aba:	2100      	movs	r1, #0
 8001abc:	4835      	ldr	r0, [pc, #212]	@ (8001b94 <FT812_Initialize+0x138>)
 8001abe:	f7ff fe53 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_HSYNC1, 41);
 8001ac2:	2129      	movs	r1, #41	@ 0x29
 8001ac4:	4834      	ldr	r0, [pc, #208]	@ (8001b98 <FT812_Initialize+0x13c>)
 8001ac6:	f7ff fe4f 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_VCYCLE, 292);
 8001aca:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8001ace:	4833      	ldr	r0, [pc, #204]	@ (8001b9c <FT812_Initialize+0x140>)
 8001ad0:	f7ff fe4a 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_VOFFSET, 12);
 8001ad4:	210c      	movs	r1, #12
 8001ad6:	4832      	ldr	r0, [pc, #200]	@ (8001ba0 <FT812_Initialize+0x144>)
 8001ad8:	f7ff fe46 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_VSIZE, 272);
 8001adc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001ae0:	4830      	ldr	r0, [pc, #192]	@ (8001ba4 <FT812_Initialize+0x148>)
 8001ae2:	f7ff fe41 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_VSYNC0, 0);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	482f      	ldr	r0, [pc, #188]	@ (8001ba8 <FT812_Initialize+0x14c>)
 8001aea:	f7ff fe3d 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteReg16(REG_VSYNC1, 10);
 8001aee:	210a      	movs	r1, #10
 8001af0:	482e      	ldr	r0, [pc, #184]	@ (8001bac <FT812_Initialize+0x150>)
 8001af2:	f7ff fe39 	bl	8001768 <FT812_WriteReg16>

    FT812_WriteByte(REG_SWIZZLE, 0);
 8001af6:	2100      	movs	r1, #0
 8001af8:	482d      	ldr	r0, [pc, #180]	@ (8001bb0 <FT812_Initialize+0x154>)
 8001afa:	f7ff fe09 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_PCLK_POL, 1);
 8001afe:	2101      	movs	r1, #1
 8001b00:	482c      	ldr	r0, [pc, #176]	@ (8001bb4 <FT812_Initialize+0x158>)
 8001b02:	f7ff fe05 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_CSPREAD, 1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	482b      	ldr	r0, [pc, #172]	@ (8001bb8 <FT812_Initialize+0x15c>)
 8001b0a:	f7ff fe01 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_DITHER, 1);
 8001b0e:	2101      	movs	r1, #1
 8001b10:	482a      	ldr	r0, [pc, #168]	@ (8001bbc <FT812_Initialize+0x160>)
 8001b12:	f7ff fdfd 	bl	8001710 <FT812_WriteByte>

    FT812_WriteByte(REG_TOUCH_MODE, 0x03);
 8001b16:	2103      	movs	r1, #3
 8001b18:	4829      	ldr	r0, [pc, #164]	@ (8001bc0 <FT812_Initialize+0x164>)
 8001b1a:	f7ff fdf9 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_TOUCH_ADC_MODE, 0x01);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4828      	ldr	r0, [pc, #160]	@ (8001bc4 <FT812_Initialize+0x168>)
 8001b22:	f7ff fdf5 	bl	8001710 <FT812_WriteByte>
    FT812_WriteReg16(REG_TOUCH_CHARGE, 6000);
 8001b26:	f241 7170 	movw	r1, #6000	@ 0x1770
 8001b2a:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <FT812_Initialize+0x16c>)
 8001b2c:	f7ff fe1c 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteByte(REG_TOUCH_SETTLE, 3);
 8001b30:	2103      	movs	r1, #3
 8001b32:	4826      	ldr	r0, [pc, #152]	@ (8001bcc <FT812_Initialize+0x170>)
 8001b34:	f7ff fdec 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_TOUCH_OVERSAMPLE, 7);
 8001b38:	2107      	movs	r1, #7
 8001b3a:	4825      	ldr	r0, [pc, #148]	@ (8001bd0 <FT812_Initialize+0x174>)
 8001b3c:	f7ff fde8 	bl	8001710 <FT812_WriteByte>
    FT812_WriteReg16(REG_TOUCH_RZTHRESH, 1200);
 8001b40:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8001b44:	4823      	ldr	r0, [pc, #140]	@ (8001bd4 <FT812_Initialize+0x178>)
 8001b46:	f7ff fe0f 	bl	8001768 <FT812_WriteReg16>

    TouchInitialize_WithYourCalibrationData();
 8001b4a:	f7ff ff17 	bl	800197c <TouchInitialize_WithYourCalibrationData>

    FT812_WriteReg16(REG_PWM_HZ, 1000);
 8001b4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b52:	4821      	ldr	r0, [pc, #132]	@ (8001bd8 <FT812_Initialize+0x17c>)
 8001b54:	f7ff fe08 	bl	8001768 <FT812_WriteReg16>
    FT812_WriteByte(REG_PWM_DUTY, 128);
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	4820      	ldr	r0, [pc, #128]	@ (8001bdc <FT812_Initialize+0x180>)
 8001b5c:	f7ff fdd8 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_GPIO_DIR, 0x80);
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	481f      	ldr	r0, [pc, #124]	@ (8001be0 <FT812_Initialize+0x184>)
 8001b64:	f7ff fdd4 	bl	8001710 <FT812_WriteByte>
    FT812_WriteByte(REG_GPIO, 0x80);
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	481e      	ldr	r0, [pc, #120]	@ (8001be4 <FT812_Initialize+0x188>)
 8001b6c:	f7ff fdd0 	bl	8001710 <FT812_WriteByte>

    FT812_WriteByte(REG_PCLK, 5);
 8001b70:	2105      	movs	r1, #5
 8001b72:	481d      	ldr	r0, [pc, #116]	@ (8001be8 <FT812_Initialize+0x18c>)
 8001b74:	f7ff fdcc 	bl	8001710 <FT812_WriteByte>
    init_complete = 1;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <FT812_Initialize+0x190>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	00302000 	.word	0x00302000
 8001b88:	0030202c 	.word	0x0030202c
 8001b8c:	00302030 	.word	0x00302030
 8001b90:	00302034 	.word	0x00302034
 8001b94:	00302038 	.word	0x00302038
 8001b98:	0030203c 	.word	0x0030203c
 8001b9c:	00302040 	.word	0x00302040
 8001ba0:	00302044 	.word	0x00302044
 8001ba4:	00302048 	.word	0x00302048
 8001ba8:	0030204c 	.word	0x0030204c
 8001bac:	00302050 	.word	0x00302050
 8001bb0:	00302064 	.word	0x00302064
 8001bb4:	0030206c 	.word	0x0030206c
 8001bb8:	00302068 	.word	0x00302068
 8001bbc:	00302060 	.word	0x00302060
 8001bc0:	00302104 	.word	0x00302104
 8001bc4:	00302108 	.word	0x00302108
 8001bc8:	0030210c 	.word	0x0030210c
 8001bcc:	00302110 	.word	0x00302110
 8001bd0:	00302114 	.word	0x00302114
 8001bd4:	00302118 	.word	0x00302118
 8001bd8:	003020d0 	.word	0x003020d0
 8001bdc:	003020d4 	.word	0x003020d4
 8001be0:	00302090 	.word	0x00302090
 8001be4:	00302094 	.word	0x00302094
 8001be8:	00302070 	.word	0x00302070
 8001bec:	20000504 	.word	0x20000504

08001bf0 <DrawString_Proportional>:

// 绘图函数
void DrawString_Proportional(uint32_t *dl_addr, int x, int y, int font, const char* str, int center)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
    int font_index = GetFontIndex(font);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe3c 	bl	8001880 <GetFontIndex>
 8001c08:	61b8      	str	r0, [r7, #24]
    if(font_index == -1) {
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d131      	bne.n	8001c76 <DrawString_Proportional+0x86>
        for(int i = 0; str[i] != '\0'; i++) {
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c16:	e027      	b.n	8001c68 <DrawString_Proportional+0x78>
            FT812_WriteReg32(*dl_addr, VERTEX2II(x + i * 8, y, font, str[i]));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1e:	00da      	lsls	r2, r3, #3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	055b      	lsls	r3, r3, #21
 8001c26:	4a4b      	ldr	r2, [pc, #300]	@ (8001d54 <DrawString_Proportional+0x164>)
 8001c28:	401a      	ands	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	031b      	lsls	r3, r3, #12
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4b49      	ldr	r3, [pc, #292]	@ (8001d58 <DrawString_Proportional+0x168>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	431a      	orrs	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	01db      	lsls	r3, r3, #7
 8001c3a:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c44:	440b      	add	r3, r1
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7ff fda2 	bl	800179c <FT812_WriteReg32>
            *dl_addr += 4;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1d1a      	adds	r2, r3, #4
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	601a      	str	r2, [r3, #0]
        for(int i = 0; str[i] != '\0'; i++) {
 8001c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c64:	3301      	adds	r3, #1
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1d1      	bne.n	8001c18 <DrawString_Proportional+0x28>
        }
        return;
 8001c74:	e06a      	b.n	8001d4c <DrawString_Proportional+0x15c>
    }

    int len = strlen(str);
 8001c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c78:	f7fe fa6a 	bl	8000150 <strlen>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	617b      	str	r3, [r7, #20]
    int sum = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28

    if(center) {
 8001c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d021      	beq.n	8001cce <DrawString_Proportional+0xde>
        for(int i = 0; i < len; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8e:	e011      	b.n	8001cb4 <DrawString_Proportional+0xc4>
            sum += font_width_tab[font_index][(uint8_t)str[i]];
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4a30      	ldr	r2, [pc, #192]	@ (8001d5c <DrawString_Proportional+0x16c>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	01db      	lsls	r3, r3, #7
 8001ca0:	4413      	add	r3, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001caa:	4413      	add	r3, r2
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
        for(int i = 0; i < len; i++) {
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbe9      	blt.n	8001c90 <DrawString_Proportional+0xa0>
        }
        x -= sum / 2;
 8001cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbe:	0fda      	lsrs	r2, r3, #31
 8001cc0:	4413      	add	r3, r2
 8001cc2:	105b      	asrs	r3, r3, #1
 8001cc4:	425b      	negs	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
    }

    int x_pos = x;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	623b      	str	r3, [r7, #32]
    for(int i = 0; str[i] != '\0'; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e033      	b.n	8001d40 <DrawString_Proportional+0x150>
        FT812_WriteReg32(*dl_addr, VERTEX2II(x_pos, y, font, str[i]));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	055b      	lsls	r3, r3, #21
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <DrawString_Proportional+0x164>)
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	031b      	lsls	r3, r3, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <DrawString_Proportional+0x168>)
 8001cec:	400b      	ands	r3, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	01db      	lsls	r3, r3, #7
 8001cf4:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cfe:	440b      	add	r3, r1
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7ff fd45 	bl	800179c <FT812_WriteReg32>
        *dl_addr += 4;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]
        x_pos += font_width_tab[font_index][(uint8_t)str[i]];
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <DrawString_Proportional+0x16c>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	01db      	lsls	r3, r3, #7
 8001d2c:	4413      	add	r3, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	4413      	add	r3, r2
 8001d38:	623b      	str	r3, [r7, #32]
    for(int i = 0; str[i] != '\0'; i++) {
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1c5      	bne.n	8001cd8 <DrawString_Proportional+0xe8>
    }
}
 8001d4c:	3730      	adds	r7, #48	@ 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	3fe00000 	.word	0x3fe00000
 8001d58:	001ff000 	.word	0x001ff000
 8001d5c:	200002dc 	.word	0x200002dc

08001d60 <DrawArrow>:

void DrawArrow(uint32_t* dl_addr, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t size) {
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	817b      	strh	r3, [r7, #10]
 8001d72:	460b      	mov	r3, r1
 8001d74:	813b      	strh	r3, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
    FT812_WriteReg32(*dl_addr, BEGIN(LINES)); *dl_addr += 4;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4996      	ldr	r1, [pc, #600]	@ (8001fd8 <DrawArrow+0x278>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fd0b 	bl	800179c <FT812_WriteReg32>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	601a      	str	r2, [r3, #0]
    FT812_WriteReg32(*dl_addr, VERTEX2II(x1, y1, 0, 0)); *dl_addr += 4;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	4a90      	ldr	r2, [pc, #576]	@ (8001fdc <DrawArrow+0x27c>)
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	0319      	lsls	r1, r3, #12
 8001da0:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe0 <DrawArrow+0x280>)
 8001da2:	400b      	ands	r3, r1
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7ff fcf6 	bl	800179c <FT812_WriteReg32>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1d1a      	adds	r2, r3, #4
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]
    FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	055b      	lsls	r3, r3, #21
 8001dc2:	4a86      	ldr	r2, [pc, #536]	@ (8001fdc <DrawArrow+0x27c>)
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001dc8:	0319      	lsls	r1, r3, #12
 8001dca:	4b85      	ldr	r3, [pc, #532]	@ (8001fe0 <DrawArrow+0x280>)
 8001dcc:	400b      	ands	r3, r1
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7ff fce1 	bl	800179c <FT812_WriteReg32>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1d1a      	adds	r2, r3, #4
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]

    int16_t dx = x2 - x1;
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	82fb      	strh	r3, [r7, #22]
    int16_t dy = y2 - y1;
 8001dee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	82bb      	strh	r3, [r7, #20]

    if (abs(dx) > abs(dy)) {
 8001df8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bfb8      	it	lt
 8001e00:	425b      	neglt	r3, r3
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bfb8      	it	lt
 8001e0c:	425b      	neglt	r3, r3
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f240 80e7 	bls.w	8001fe4 <DrawArrow+0x284>
        if (dx > 0) {
 8001e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dd6d      	ble.n	8001efa <DrawArrow+0x19a>
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	055b      	lsls	r3, r3, #21
 8001e26:	4a6d      	ldr	r2, [pc, #436]	@ (8001fdc <DrawArrow+0x27c>)
 8001e28:	401a      	ands	r2, r3
 8001e2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e2c:	0319      	lsls	r1, r3, #12
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <DrawArrow+0x280>)
 8001e30:	400b      	ands	r3, r1
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7ff fcaf 	bl	800179c <FT812_WriteReg32>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 - size, y2 - size/2, 0, 0)); *dl_addr += 4;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681c      	ldr	r4, [r3, #0]
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	055b      	lsls	r3, r3, #21
 8001e56:	4a61      	ldr	r2, [pc, #388]	@ (8001fdc <DrawArrow+0x27c>)
 8001e58:	401a      	ands	r2, r3
 8001e5a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001e5c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001e60:	0fd8      	lsrs	r0, r3, #31
 8001e62:	4403      	add	r3, r0
 8001e64:	105b      	asrs	r3, r3, #1
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	0319      	lsls	r1, r3, #12
 8001e70:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <DrawArrow+0x280>)
 8001e72:	400b      	ands	r3, r1
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fc8d 	bl	800179c <FT812_WriteReg32>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	1d1a      	adds	r2, r3, #4
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	055b      	lsls	r3, r3, #21
 8001e94:	4a51      	ldr	r2, [pc, #324]	@ (8001fdc <DrawArrow+0x27c>)
 8001e96:	401a      	ands	r2, r3
 8001e98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e9a:	0319      	lsls	r1, r3, #12
 8001e9c:	4b50      	ldr	r3, [pc, #320]	@ (8001fe0 <DrawArrow+0x280>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7ff fc78 	bl	800179c <FT812_WriteReg32>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 - size, y2 + size/2, 0, 0)); *dl_addr += 4;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	88fa      	ldrh	r2, [r7, #6]
 8001ebc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	055b      	lsls	r3, r3, #21
 8001ec4:	4a45      	ldr	r2, [pc, #276]	@ (8001fdc <DrawArrow+0x27c>)
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001ecc:	0fd9      	lsrs	r1, r3, #31
 8001ece:	440b      	add	r3, r1
 8001ed0:	105b      	asrs	r3, r3, #1
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	b299      	uxth	r1, r3
 8001ed6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ed8:	440b      	add	r3, r1
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	0319      	lsls	r1, r3, #12
 8001ede:	4b40      	ldr	r3, [pc, #256]	@ (8001fe0 <DrawArrow+0x280>)
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7ff fc57 	bl	800179c <FT812_WriteReg32>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1d1a      	adds	r2, r3, #4
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e151      	b.n	800219e <DrawArrow+0x43e>
        } else {
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	055b      	lsls	r3, r3, #21
 8001f02:	4a36      	ldr	r2, [pc, #216]	@ (8001fdc <DrawArrow+0x27c>)
 8001f04:	401a      	ands	r2, r3
 8001f06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f08:	0319      	lsls	r1, r3, #12
 8001f0a:	4b35      	ldr	r3, [pc, #212]	@ (8001fe0 <DrawArrow+0x280>)
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7ff fc41 	bl	800179c <FT812_WriteReg32>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1d1a      	adds	r2, r3, #4
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 + size, y2 - size/2, 0, 0)); *dl_addr += 4;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681c      	ldr	r4, [r3, #0]
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	055b      	lsls	r3, r3, #21
 8001f32:	4a2a      	ldr	r2, [pc, #168]	@ (8001fdc <DrawArrow+0x27c>)
 8001f34:	401a      	ands	r2, r3
 8001f36:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001f38:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001f3c:	0fd8      	lsrs	r0, r3, #31
 8001f3e:	4403      	add	r3, r0
 8001f40:	105b      	asrs	r3, r3, #1
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	1acb      	subs	r3, r1, r3
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	0319      	lsls	r1, r3, #12
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <DrawArrow+0x280>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f56:	4619      	mov	r1, r3
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff fc1f 	bl	800179c <FT812_WriteReg32>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1d1a      	adds	r2, r3, #4
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	055b      	lsls	r3, r3, #21
 8001f70:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <DrawArrow+0x27c>)
 8001f72:	401a      	ands	r2, r3
 8001f74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f76:	0319      	lsls	r1, r3, #12
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <DrawArrow+0x280>)
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7ff fc0a 	bl	800179c <FT812_WriteReg32>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1d1a      	adds	r2, r3, #4
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 + size, y2 + size/2, 0, 0)); *dl_addr += 4;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	055b      	lsls	r3, r3, #21
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8001fdc <DrawArrow+0x27c>)
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001fa8:	0fd9      	lsrs	r1, r3, #31
 8001faa:	440b      	add	r3, r1
 8001fac:	105b      	asrs	r3, r3, #1
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001fb4:	440b      	add	r3, r1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	0319      	lsls	r1, r3, #12
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <DrawArrow+0x280>)
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7ff fbe9 	bl	800179c <FT812_WriteReg32>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e0e3      	b.n	800219e <DrawArrow+0x43e>
 8001fd6:	bf00      	nop
 8001fd8:	1f000003 	.word	0x1f000003
 8001fdc:	3fe00000 	.word	0x3fe00000
 8001fe0:	001ff000 	.word	0x001ff000
        }
    } else {
        if (dy < 0) {
 8001fe4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da6c      	bge.n	80020c6 <DrawArrow+0x366>
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4a72      	ldr	r2, [pc, #456]	@ (80021c0 <DrawArrow+0x460>)
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ffa:	0319      	lsls	r1, r3, #12
 8001ffc:	4b71      	ldr	r3, [pc, #452]	@ (80021c4 <DrawArrow+0x464>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	4313      	orrs	r3, r2
 8002002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002006:	4619      	mov	r1, r3
 8002008:	f7ff fbc8 	bl	800179c <FT812_WriteReg32>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 - size/2, y2 + size, 0, 0)); *dl_addr += 4;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	88fa      	ldrh	r2, [r7, #6]
 800201c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8002020:	0fd9      	lsrs	r1, r3, #31
 8002022:	440b      	add	r3, r1
 8002024:	105b      	asrs	r3, r3, #1
 8002026:	b21b      	sxth	r3, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4a63      	ldr	r2, [pc, #396]	@ (80021c0 <DrawArrow+0x460>)
 8002032:	401a      	ands	r2, r3
 8002034:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002036:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002038:	440b      	add	r3, r1
 800203a:	b29b      	uxth	r3, r3
 800203c:	0319      	lsls	r1, r3, #12
 800203e:	4b61      	ldr	r3, [pc, #388]	@ (80021c4 <DrawArrow+0x464>)
 8002040:	400b      	ands	r3, r1
 8002042:	4313      	orrs	r3, r2
 8002044:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002048:	4619      	mov	r1, r3
 800204a:	f7ff fba7 	bl	800179c <FT812_WriteReg32>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	055b      	lsls	r3, r3, #21
 8002060:	4a57      	ldr	r2, [pc, #348]	@ (80021c0 <DrawArrow+0x460>)
 8002062:	401a      	ands	r2, r3
 8002064:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002066:	0319      	lsls	r1, r3, #12
 8002068:	4b56      	ldr	r3, [pc, #344]	@ (80021c4 <DrawArrow+0x464>)
 800206a:	400b      	ands	r3, r1
 800206c:	4313      	orrs	r3, r2
 800206e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002072:	4619      	mov	r1, r3
 8002074:	f7ff fb92 	bl	800179c <FT812_WriteReg32>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1d1a      	adds	r2, r3, #4
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 + size/2, y2 + size, 0, 0)); *dl_addr += 4;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800208a:	0fda      	lsrs	r2, r3, #31
 800208c:	4413      	add	r3, r2
 800208e:	105b      	asrs	r3, r3, #1
 8002090:	b21b      	sxth	r3, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	4413      	add	r3, r2
 8002098:	b29b      	uxth	r3, r3
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	4a48      	ldr	r2, [pc, #288]	@ (80021c0 <DrawArrow+0x460>)
 800209e:	401a      	ands	r2, r3
 80020a0:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80020a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80020a4:	440b      	add	r3, r1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	0319      	lsls	r1, r3, #12
 80020aa:	4b46      	ldr	r3, [pc, #280]	@ (80021c4 <DrawArrow+0x464>)
 80020ac:	400b      	ands	r3, r1
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff fb71 	bl	800179c <FT812_WriteReg32>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1d1a      	adds	r2, r3, #4
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e06b      	b.n	800219e <DrawArrow+0x43e>
        } else {
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	055b      	lsls	r3, r3, #21
 80020ce:	4a3c      	ldr	r2, [pc, #240]	@ (80021c0 <DrawArrow+0x460>)
 80020d0:	401a      	ands	r2, r3
 80020d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020d4:	0319      	lsls	r1, r3, #12
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <DrawArrow+0x464>)
 80020d8:	400b      	ands	r3, r1
 80020da:	4313      	orrs	r3, r2
 80020dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7ff fb5b 	bl	800179c <FT812_WriteReg32>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1d1a      	adds	r2, r3, #4
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 - size/2, y2 - size, 0, 0)); *dl_addr += 4;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80020fa:	0fd9      	lsrs	r1, r3, #31
 80020fc:	440b      	add	r3, r1
 80020fe:	105b      	asrs	r3, r3, #1
 8002100:	b21b      	sxth	r3, r3
 8002102:	b29b      	uxth	r3, r3
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	b29b      	uxth	r3, r3
 8002108:	055b      	lsls	r3, r3, #21
 800210a:	4a2d      	ldr	r2, [pc, #180]	@ (80021c0 <DrawArrow+0x460>)
 800210c:	401a      	ands	r2, r3
 800210e:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002110:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002112:	1acb      	subs	r3, r1, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	0319      	lsls	r1, r3, #12
 8002118:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <DrawArrow+0x464>)
 800211a:	400b      	ands	r3, r1
 800211c:	4313      	orrs	r3, r2
 800211e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002122:	4619      	mov	r1, r3
 8002124:	f7ff fb3a 	bl	800179c <FT812_WriteReg32>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1d1a      	adds	r2, r3, #4
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	055b      	lsls	r3, r3, #21
 800213a:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <DrawArrow+0x460>)
 800213c:	401a      	ands	r2, r3
 800213e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002140:	0319      	lsls	r1, r3, #12
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <DrawArrow+0x464>)
 8002144:	400b      	ands	r3, r1
 8002146:	4313      	orrs	r3, r2
 8002148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800214c:	4619      	mov	r1, r3
 800214e:	f7ff fb25 	bl	800179c <FT812_WriteReg32>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(x2 + size/2, y2 - size, 0, 0)); *dl_addr += 4;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8002164:	0fda      	lsrs	r2, r3, #31
 8002166:	4413      	add	r3, r2
 8002168:	105b      	asrs	r3, r3, #1
 800216a:	b21b      	sxth	r3, r3
 800216c:	b29a      	uxth	r2, r3
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	055b      	lsls	r3, r3, #21
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <DrawArrow+0x460>)
 8002178:	401a      	ands	r2, r3
 800217a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800217c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800217e:	1acb      	subs	r3, r1, r3
 8002180:	b29b      	uxth	r3, r3
 8002182:	0319      	lsls	r1, r3, #12
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <DrawArrow+0x464>)
 8002186:	400b      	ands	r3, r1
 8002188:	4313      	orrs	r3, r2
 800218a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800218e:	4619      	mov	r1, r3
 8002190:	f7ff fb04 	bl	800179c <FT812_WriteReg32>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1d1a      	adds	r2, r3, #4
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	601a      	str	r2, [r3, #0]
        }
    }

    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff faf8 	bl	800179c <FT812_WriteReg32>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	3fe00000 	.word	0x3fe00000
 80021c4:	001ff000 	.word	0x001ff000

080021c8 <DrawDashedLine>:

void DrawDashedLine(uint32_t* dl_addr, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
    int16_t dx = x2 - x1;
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	897b      	ldrh	r3, [r7, #10]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	837b      	strh	r3, [r7, #26]
    int16_t dy = y2 - y1;
 80021ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80021ee:	893b      	ldrh	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	833b      	strh	r3, [r7, #24]
    int16_t steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 80021f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bfb8      	it	lt
 80021fe:	425b      	neglt	r3, r3
 8002200:	b29a      	uxth	r2, r3
 8002202:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002206:	2b00      	cmp	r3, #0
 8002208:	bfb8      	it	lt
 800220a:	425b      	neglt	r3, r3
 800220c:	b29b      	uxth	r3, r3
 800220e:	4293      	cmp	r3, r2
 8002210:	bf38      	it	cc
 8002212:	4613      	movcc	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	82fb      	strh	r3, [r7, #22]

    if (steps == 0) return;
 8002218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05e      	beq.n	80022de <DrawDashedLine+0x116>

    FT812_WriteReg32(*dl_addr, BEGIN(POINTS)); *dl_addr += 4;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4930      	ldr	r1, [pc, #192]	@ (80022e8 <DrawDashedLine+0x120>)
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fab8 	bl	800179c <FT812_WriteReg32>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1d1a      	adds	r2, r3, #4
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]
    FT812_WriteReg32(*dl_addr, POINT_SIZE(1 * 16)); *dl_addr += 4;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	492c      	ldr	r1, [pc, #176]	@ (80022ec <DrawDashedLine+0x124>)
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff faad 	bl	800179c <FT812_WriteReg32>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

    for (int i = 0; i <= steps; i += 8) {
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e033      	b.n	80022ba <DrawDashedLine+0xf2>
        int16_t x = x1 + (dx * i) / steps;
 8002252:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	fb03 f202 	mul.w	r2, r3, r2
 800225c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002260:	fb92 f3f3 	sdiv	r3, r2, r3
 8002264:	b29a      	uxth	r2, r3
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	4413      	add	r3, r2
 800226a:	b29b      	uxth	r3, r3
 800226c:	82bb      	strh	r3, [r7, #20]
        int16_t y = y1 + (dy * i) / steps;
 800226e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	fb03 f202 	mul.w	r2, r3, r2
 8002278:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800227c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002280:	b29a      	uxth	r2, r3
 8002282:	893b      	ldrh	r3, [r7, #8]
 8002284:	4413      	add	r3, r2
 8002286:	b29b      	uxth	r3, r3
 8002288:	827b      	strh	r3, [r7, #18]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, y, 0, 0)); *dl_addr += 4;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	8abb      	ldrh	r3, [r7, #20]
 8002290:	055b      	lsls	r3, r3, #21
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <DrawDashedLine+0x128>)
 8002294:	401a      	ands	r2, r3
 8002296:	8a7b      	ldrh	r3, [r7, #18]
 8002298:	0319      	lsls	r1, r3, #12
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <DrawDashedLine+0x12c>)
 800229c:	400b      	ands	r3, r1
 800229e:	4313      	orrs	r3, r2
 80022a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7ff fa79 	bl	800179c <FT812_WriteReg32>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1d1a      	adds	r2, r3, #4
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i <= steps; i += 8) {
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3308      	adds	r3, #8
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	ddc6      	ble.n	8002252 <DrawDashedLine+0x8a>
    }

    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fa65 	bl	800179c <FT812_WriteReg32>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <DrawDashedLine+0x118>
    if (steps == 0) return;
 80022de:	bf00      	nop
}
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	1f000002 	.word	0x1f000002
 80022ec:	0d000010 	.word	0x0d000010
 80022f0:	3fe00000 	.word	0x3fe00000
 80022f4:	001ff000 	.word	0x001ff000

080022f8 <IntToString>:

void IntToString(char* str, int32_t value, uint8_t decimal_places) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	@ 0x30
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
    if (decimal_places == 0) {
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <IntToString+0x20>
        sprintf(str, "%ld", value);
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	4925      	ldr	r1, [pc, #148]	@ (80023a4 <IntToString+0xac>)
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f007 f9c9 	bl	80096a8 <siprintf>
        return;
 8002316:	e042      	b.n	800239e <IntToString+0xa6>
    }

    uint8_t negative = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (value < 0) {
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	da05      	bge.n	8002330 <IntToString+0x38>
        negative = 1;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        value = -value;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	425b      	negs	r3, r3
 800232e:	60bb      	str	r3, [r7, #8]
    }

    int32_t divisor = 1;
 8002330:	2301      	movs	r3, #1
 8002332:	623b      	str	r3, [r7, #32]
    for (uint8_t i = 0; i < decimal_places; i++) {
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
 8002338:	e008      	b.n	800234c <IntToString+0x54>
        divisor *= 10;
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	623b      	str	r3, [r7, #32]
    for (uint8_t i = 0; i < decimal_places; i++) {
 8002346:	7ffb      	ldrb	r3, [r7, #31]
 8002348:	3301      	adds	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	7ffa      	ldrb	r2, [r7, #31]
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	429a      	cmp	r2, r3
 8002352:	d3f2      	bcc.n	800233a <IntToString+0x42>
    }

    int32_t integer_part = value / divisor;
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	fb92 f3f3 	sdiv	r3, r2, r3
 800235c:	61bb      	str	r3, [r7, #24]
    int32_t decimal_part = value % divisor;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	fb93 f2f2 	sdiv	r2, r3, r2
 8002366:	6a39      	ldr	r1, [r7, #32]
 8002368:	fb01 f202 	mul.w	r2, r1, r2
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	617b      	str	r3, [r7, #20]

    if (negative) {
 8002370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <IntToString+0x94>
        sprintf(str, "-%ld.%0*ld", integer_part, decimal_places, decimal_part);
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4909      	ldr	r1, [pc, #36]	@ (80023a8 <IntToString+0xb0>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f007 f98f 	bl	80096a8 <siprintf>
 800238a:	e008      	b.n	800239e <IntToString+0xa6>
    } else {
        sprintf(str, "%ld.%0*ld", integer_part, decimal_places, decimal_part);
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4905      	ldr	r1, [pc, #20]	@ (80023ac <IntToString+0xb4>)
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f007 f985 	bl	80096a8 <siprintf>
    }
}
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	0800bbd8 	.word	0x0800bbd8
 80023a8:	0800bbdc 	.word	0x0800bbdc
 80023ac:	0800bbe8 	.word	0x0800bbe8

080023b0 <ChartToScreen_Int_Safe>:

void ChartToScreen_Int_Safe(int32_t chart_x, int32_t chart_y, const ChartConfig_Int* config,
                           Rect chart_area, uint16_t* screen_x, uint16_t* screen_y) {
 80023b0:	b082      	sub	sp, #8
 80023b2:	b480      	push	{r7}
 80023b4:	b08b      	sub	sp, #44	@ 0x2c
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t plot_x1 = chart_area.x1 + 40;
 80023c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023c2:	3328      	adds	r3, #40	@ 0x28
 80023c4:	83fb      	strh	r3, [r7, #30]
    uint16_t plot_y1 = chart_area.y1 + 30;
 80023c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023c8:	331e      	adds	r3, #30
 80023ca:	83bb      	strh	r3, [r7, #28]
    uint16_t plot_x2 = chart_area.x2 - 20;
 80023cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80023ce:	3b14      	subs	r3, #20
 80023d0:	837b      	strh	r3, [r7, #26]
    uint16_t plot_y2 = chart_area.y2 - 40;
 80023d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80023d4:	3b28      	subs	r3, #40	@ 0x28
 80023d6:	833b      	strh	r3, [r7, #24]

    int32_t x_range = config->x_max - config->x_min;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
    int32_t x_offset = chart_x - config->x_min;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24

    if(x_offset < 0) x_offset = 0;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	da01      	bge.n	80023f8 <ChartToScreen_Int_Safe+0x48>
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if(x_offset > x_range) x_offset = x_range;
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dd01      	ble.n	8002404 <ChartToScreen_Int_Safe+0x54>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24

    *screen_x = plot_x1 + (uint16_t)((x_offset * (plot_x2 - plot_x1)) / x_range);
 8002404:	8b7a      	ldrh	r2, [r7, #26]
 8002406:	8bfb      	ldrh	r3, [r7, #30]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240c:	fb03 f202 	mul.w	r2, r3, r2
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fb92 f3f3 	sdiv	r3, r2, r3
 8002416:	b29a      	uxth	r2, r3
 8002418:	8bfb      	ldrh	r3, [r7, #30]
 800241a:	4413      	add	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002420:	801a      	strh	r2, [r3, #0]

    int32_t y_range = config->y_max - config->y_min;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	613b      	str	r3, [r7, #16]
    int32_t y_offset = chart_y - config->y_min;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	623b      	str	r3, [r7, #32]

    if(y_offset < 0) y_offset = 0;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da01      	bge.n	8002442 <ChartToScreen_Int_Safe+0x92>
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
    if(y_offset > y_range) y_offset = y_range;
 8002442:	6a3a      	ldr	r2, [r7, #32]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	dd01      	ble.n	800244e <ChartToScreen_Int_Safe+0x9e>
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	623b      	str	r3, [r7, #32]

    *screen_y = plot_y2 - (uint16_t)((y_offset * (plot_y2 - plot_y1)) / y_range);
 800244e:	8b3a      	ldrh	r2, [r7, #24]
 8002450:	8bbb      	ldrh	r3, [r7, #28]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	8b3a      	ldrh	r2, [r7, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29a      	uxth	r2, r3
 8002468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800246a:	801a      	strh	r2, [r3, #0]

    if(*screen_x < plot_x1) *screen_x = plot_x1;
 800246c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	8bfa      	ldrh	r2, [r7, #30]
 8002472:	429a      	cmp	r2, r3
 8002474:	d902      	bls.n	800247c <ChartToScreen_Int_Safe+0xcc>
 8002476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002478:	8bfa      	ldrh	r2, [r7, #30]
 800247a:	801a      	strh	r2, [r3, #0]
    if(*screen_x > plot_x2) *screen_x = plot_x2;
 800247c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	8b7a      	ldrh	r2, [r7, #26]
 8002482:	429a      	cmp	r2, r3
 8002484:	d202      	bcs.n	800248c <ChartToScreen_Int_Safe+0xdc>
 8002486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002488:	8b7a      	ldrh	r2, [r7, #26]
 800248a:	801a      	strh	r2, [r3, #0]
    if(*screen_y < plot_y1) *screen_y = plot_y1;
 800248c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	8bba      	ldrh	r2, [r7, #28]
 8002492:	429a      	cmp	r2, r3
 8002494:	d902      	bls.n	800249c <ChartToScreen_Int_Safe+0xec>
 8002496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002498:	8bba      	ldrh	r2, [r7, #28]
 800249a:	801a      	strh	r2, [r3, #0]
    if(*screen_y > plot_y2) *screen_y = plot_y2;
 800249c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	8b3a      	ldrh	r2, [r7, #24]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d202      	bcs.n	80024ac <ChartToScreen_Int_Safe+0xfc>
 80024a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a8:	8b3a      	ldrh	r2, [r7, #24]
 80024aa:	801a      	strh	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	372c      	adds	r7, #44	@ 0x2c
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	b002      	add	sp, #8
 80024b6:	4770      	bx	lr

080024b8 <InitDefaultSettings>:

// 数据处理函数
void InitDefaultSettings(void) {
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    // 使用控制系统的目标值初始化
    chart_settings[0].target_value = target_flow;    // 流量
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <InitDefaultSettings+0x78>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024c2:	6013      	str	r3, [r2, #0]
    chart_settings[0].x_min = 0;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
    chart_settings[0].x_max = 1000;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024d0:	609a      	str	r2, [r3, #8]
    chart_settings[0].y_min = 0;
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
    chart_settings[0].y_max = 10000;
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80024de:	611a      	str	r2, [r3, #16]

    chart_settings[1].target_value = target_do;      // DO
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <InitDefaultSettings+0x80>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024e6:	6153      	str	r3, [r2, #20]
    chart_settings[1].x_min = 0;
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    chart_settings[1].x_max = 1000;
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024f4:	61da      	str	r2, [r3, #28]
    chart_settings[1].y_min = 0;
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
    chart_settings[1].y_max = 15000;
 80024fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <InitDefaultSettings+0x7c>)
 80024fe:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24

    chart_settings[2].target_value = target_temp;    // 温度
 8002504:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <InitDefaultSettings+0x84>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <InitDefaultSettings+0x7c>)
 800250a:	6293      	str	r3, [r2, #40]	@ 0x28
    chart_settings[2].x_min = 0;
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <InitDefaultSettings+0x7c>)
 800250e:	2200      	movs	r2, #0
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c
    chart_settings[2].x_max = 1000;
 8002512:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <InitDefaultSettings+0x7c>)
 8002514:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002518:	631a      	str	r2, [r3, #48]	@ 0x30
    chart_settings[2].y_min = 0;
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <InitDefaultSettings+0x7c>)
 800251c:	2200      	movs	r2, #0
 800251e:	635a      	str	r2, [r3, #52]	@ 0x34
    chart_settings[2].y_max = 5000;
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <InitDefaultSettings+0x7c>)
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000004 	.word	0x20000004
 8002534:	20000290 	.word	0x20000290
 8002538:	20000008 	.word	0x20000008
 800253c:	20000000 	.word	0x20000000

08002540 <InitRealTimeBuffers>:

void InitRealTimeBuffers(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8002546:	f003 f98b 	bl	8005860 <HAL_GetTick>
 800254a:	6038      	str	r0, [r7, #0]

    for(int i = 0; i < 3; i++) {
 800254c:	2300      	movs	r3, #0
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	e06f      	b.n	8002632 <InitRealTimeBuffers+0xf2>
        chart_buffers[i].data_count = 0;
 8002552:	4a3c      	ldr	r2, [pc, #240]	@ (8002644 <InitRealTimeBuffers+0x104>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
        chart_buffers[i].start_time = current_time;
 8002568:	4a36      	ldr	r2, [pc, #216]	@ (8002644 <InitRealTimeBuffers+0x104>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]
        chart_buffers[i].last_update_time = current_time;
 800257e:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <InitRealTimeBuffers+0x104>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]
        chart_buffers[i].update_interval = 500; //
 8002594:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <InitRealTimeBuffers+0x104>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80025a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025aa:	601a      	str	r2, [r3, #0]
        chart_buffers[i].time_window = chart_settings[i].x_max - chart_settings[i].x_min;
 80025ac:	4926      	ldr	r1, [pc, #152]	@ (8002648 <InitRealTimeBuffers+0x108>)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3308      	adds	r3, #8
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	4822      	ldr	r0, [pc, #136]	@ (8002648 <InitRealTimeBuffers+0x108>)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4403      	add	r3, r0
 80025cc:	3304      	adds	r3, #4
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	1aca      	subs	r2, r1, r3
 80025d2:	491c      	ldr	r1, [pc, #112]	@ (8002644 <InitRealTimeBuffers+0x104>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f44f 7027 	mov.w	r0, #668	@ 0x29c
 80025da:	fb00 f303 	mul.w	r3, r0, r3
 80025de:	440b      	add	r3, r1
 80025e0:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80025e4:	601a      	str	r2, [r3, #0]
        chart_buffers[i].current_time_offset = 0;
 80025e6:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <InitRealTimeBuffers+0x104>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
        chart_buffers[i].is_scrolling = 0;
 80025fc:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <InitRealTimeBuffers+0x104>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]

        memset(chart_buffers[i].buffer, 0, sizeof(chart_buffers[i].buffer));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <InitRealTimeBuffers+0x104>)
 800261e:	4413      	add	r3, r2
 8002620:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f007 f8da 	bl	80097e0 <memset>
    for(int i = 0; i < 3; i++) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	dd8c      	ble.n	8002552 <InitRealTimeBuffers+0x12>
    }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000508 	.word	0x20000508
 8002648:	20000290 	.word	0x20000290

0800264c <UpdateRealTimeData>:

void UpdateRealTimeData(uint8_t chart_index) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	@ 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
    uint32_t current_time = HAL_GetTick();
 8002656:	f003 f903 	bl	8005860 <HAL_GetTick>
 800265a:	62b8      	str	r0, [r7, #40]	@ 0x28
    RealTimeDataBuffer* buffer = &chart_buffers[chart_index];
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a67      	ldr	r2, [pc, #412]	@ (8002804 <UpdateRealTimeData+0x1b8>)
 8002668:	4413      	add	r3, r2
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24

    if(current_time - buffer->last_update_time < buffer->update_interval) {
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8002672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800267c:	429a      	cmp	r2, r3
 800267e:	f0c0 80bc 	bcc.w	80027fa <UpdateRealTimeData+0x1ae>
        return;
    }

    buffer->last_update_time = current_time;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002686:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288

    DataPoint_Int new_point;
    new_point.x = buffer->data_count * 50; // 每个点间隔0.5秒(50/100)
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8002690:	2232      	movs	r2, #50	@ 0x32
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	60fb      	str	r3, [r7, #12]

    int32_t x_max = chart_settings[chart_index].x_max;
 8002698:	79fa      	ldrb	r2, [r7, #7]
 800269a:	495b      	ldr	r1, [pc, #364]	@ (8002808 <UpdateRealTimeData+0x1bc>)
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3308      	adds	r3, #8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	623b      	str	r3, [r7, #32]
    if(new_point.x > x_max) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	da05      	bge.n	80026c0 <UpdateRealTimeData+0x74>
        buffer->is_scrolling = 1;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
        new_point.x = x_max;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	60fb      	str	r3, [r7, #12]
    }

    // 使用统一的传感器数据
    switch(chart_index) {
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d010      	beq.n	80026e8 <UpdateRealTimeData+0x9c>
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	dc18      	bgt.n	80026fc <UpdateRealTimeData+0xb0>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <UpdateRealTimeData+0x88>
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d004      	beq.n	80026dc <UpdateRealTimeData+0x90>
 80026d2:	e013      	b.n	80026fc <UpdateRealTimeData+0xb0>
        case 0: // 流量数据
            new_point.y = instant_flow_x100;
 80026d4:	4b4d      	ldr	r3, [pc, #308]	@ (800280c <UpdateRealTimeData+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
            break;
 80026da:	e00f      	b.n	80026fc <UpdateRealTimeData+0xb0>

        case 1: // DO数据
            ReadDOSensor(); // 实时读取
 80026dc:	f7fe fd28 	bl	8001130 <ReadDOSensor>
            new_point.y = do_value;
 80026e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002810 <UpdateRealTimeData+0x1c4>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	613b      	str	r3, [r7, #16]
            break;
 80026e6:	e009      	b.n	80026fc <UpdateRealTimeData+0xb0>

        case 2: // 温度数据
            {
                int16_t temp_x100 = DS18B20_GetTemp_Int(DS18B20_2_PORT, DS18B20_2_PIN);
 80026e8:	2104      	movs	r1, #4
 80026ea:	484a      	ldr	r0, [pc, #296]	@ (8002814 <UpdateRealTimeData+0x1c8>)
 80026ec:	f7fe fb4c 	bl	8000d88 <DS18B20_GetTemp_Int>
 80026f0:	4603      	mov	r3, r0
 80026f2:	83fb      	strh	r3, [r7, #30]
                if(temp_x100 == -100000) {
                    new_point.y = chart_settings[chart_index].y_min;
                } else {
                    new_point.y = temp_x100;
 80026f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026f8:	613b      	str	r3, [r7, #16]
                }
            }
            break;
 80026fa:	bf00      	nop
    }

    // Y值范围限制
    int32_t y_min = chart_settings[chart_index].y_min;
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	4942      	ldr	r1, [pc, #264]	@ (8002808 <UpdateRealTimeData+0x1bc>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	330c      	adds	r3, #12
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61bb      	str	r3, [r7, #24]
    int32_t y_max = chart_settings[chart_index].y_max;
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	493d      	ldr	r1, [pc, #244]	@ (8002808 <UpdateRealTimeData+0x1bc>)
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3310      	adds	r3, #16
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
    if(new_point.y < y_min) new_point.y = y_min;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	429a      	cmp	r2, r3
 800272a:	dd01      	ble.n	8002730 <UpdateRealTimeData+0xe4>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	613b      	str	r3, [r7, #16]
    if(new_point.y > y_max) new_point.y = y_max;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	da01      	bge.n	800273c <UpdateRealTimeData+0xf0>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]

    // 修复：改进缓冲区管理
    if(!buffer->is_scrolling && buffer->data_count < MAX_DATA_POINTS) {
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <UpdateRealTimeData+0x12c>
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800274c:	2b4f      	cmp	r3, #79	@ 0x4f
 800274e:	dc13      	bgt.n	8002778 <UpdateRealTimeData+0x12c>
        // 填充模式：直接添加
        buffer->buffer[buffer->data_count] = new_point;
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8002756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	f107 020c 	add.w	r2, r7, #12
 8002760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002764:	e883 0003 	stmia.w	r3, {r0, r1}
        buffer->data_count++;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
 8002776:	e041      	b.n	80027fc <UpdateRealTimeData+0x1b0>
    } else {
        // 滚动模式：移除旧数据，添加新数据
        buffer->is_scrolling = 1;
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298

        // 左移所有数据
        for(int i = 0; i < buffer->data_count - 1; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	e00f      	b.n	80027a6 <UpdateRealTimeData+0x15a>
            buffer->buffer[i] = buffer->buffer[i + 1];
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800278c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4403      	add	r3, r0
 8002794:	00d2      	lsls	r2, r2, #3
 8002796:	440a      	add	r2, r1
 8002798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279c:	e883 0003 	stmia.w	r3, {r0, r1}
        for(int i = 0; i < buffer->data_count - 1; i++) {
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	3301      	adds	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80027ac:	3b01      	subs	r3, #1
 80027ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dbe8      	blt.n	8002786 <UpdateRealTimeData+0x13a>
        }

        // 在最后位置添加新数据
        if(buffer->data_count < MAX_DATA_POINTS) {
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80027ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80027bc:	dc13      	bgt.n	80027e6 <UpdateRealTimeData+0x19a>
            buffer->buffer[buffer->data_count] = new_point;
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80027c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d2:	e883 0003 	stmia.w	r3, {r0, r1}
            buffer->data_count++;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
 80027e4:	e00a      	b.n	80027fc <UpdateRealTimeData+0x1b0>
        } else {
            buffer->buffer[MAX_DATA_POINTS - 1] = new_point;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80027ec:	f107 020c 	add.w	r2, r7, #12
 80027f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80027f8:	e000      	b.n	80027fc <UpdateRealTimeData+0x1b0>
        return;
 80027fa:	bf00      	nop
        }
    }

}
 80027fc:	3730      	adds	r7, #48	@ 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000508 	.word	0x20000508
 8002808:	20000290 	.word	0x20000290
 800280c:	200004ec 	.word	0x200004ec
 8002810:	200004f6 	.word	0x200004f6
 8002814:	40010800 	.word	0x40010800

08002818 <GetRealTimeDisplayData>:

void GetRealTimeDisplayData(uint8_t chart_index, DataPoint_Int* display_data, int max_display_count) {
 8002818:	b490      	push	{r4, r7}
 800281a:	b090      	sub	sp, #64	@ 0x40
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	73fb      	strb	r3, [r7, #15]
    RealTimeDataBuffer* buffer = &chart_buffers[chart_index];
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	4a65      	ldr	r2, [pc, #404]	@ (80029c8 <GetRealTimeDisplayData+0x1b0>)
 8002832:	4413      	add	r3, r2
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t x_min = chart_settings[chart_index].x_min;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	4964      	ldr	r1, [pc, #400]	@ (80029cc <GetRealTimeDisplayData+0x1b4>)
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3304      	adds	r3, #4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t x_max = chart_settings[chart_index].x_max;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	495f      	ldr	r1, [pc, #380]	@ (80029cc <GetRealTimeDisplayData+0x1b4>)
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3308      	adds	r3, #8
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	623b      	str	r3, [r7, #32]
    int32_t y_min = chart_settings[chart_index].y_min;
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	495a      	ldr	r1, [pc, #360]	@ (80029cc <GetRealTimeDisplayData+0x1b4>)
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	330c      	adds	r3, #12
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61fb      	str	r3, [r7, #28]

    if(buffer->data_count == 0) {
 8002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002874:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8002878:	2b00      	cmp	r3, #0
 800287a:	d116      	bne.n	80028aa <GetRealTimeDisplayData+0x92>
        for(int i = 0; i < max_display_count; i++) {
 800287c:	2300      	movs	r3, #0
 800287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002880:	e00e      	b.n	80028a0 <GetRealTimeDisplayData+0x88>
            display_data[i].x = x_min;
 8002882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4413      	add	r3, r2
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	601a      	str	r2, [r3, #0]
            display_data[i].y = y_min;
 800288e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4413      	add	r3, r2
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	605a      	str	r2, [r3, #4]
        for(int i = 0; i < max_display_count; i++) {
 800289a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289c:	3301      	adds	r3, #1
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbec      	blt.n	8002882 <GetRealTimeDisplayData+0x6a>
        }
        return;
 80028a8:	e089      	b.n	80029be <GetRealTimeDisplayData+0x1a6>
    }

    if(buffer->is_scrolling) {
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d043      	beq.n	800293c <GetRealTimeDisplayData+0x124>
        int display_count = (buffer->data_count < max_display_count) ? buffer->data_count : max_display_count;
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4293      	cmp	r3, r2
 80028be:	bfa8      	it	ge
 80028c0:	4613      	movge	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

        for(int i = 0; i < display_count; i++) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028c8:	e01d      	b.n	8002906 <GetRealTimeDisplayData+0xee>
            display_data[i].y = buffer->buffer[i].y;
 80028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	441a      	add	r2, r3
 80028d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	6053      	str	r3, [r2, #4]
            display_data[i].x = x_min + (i * (x_max - x_min)) / (display_count - 1);
 80028de:	6a3a      	ldr	r2, [r7, #32]
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028e6:	fb03 f202 	mul.w	r2, r3, r2
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	fb92 f1f3 	sdiv	r1, r2, r3
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	440a      	add	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
        for(int i = 0; i < display_count; i++) {
 8002900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002902:	3301      	adds	r3, #1
 8002904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002906:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	429a      	cmp	r2, r3
 800290c:	dbdd      	blt.n	80028ca <GetRealTimeDisplayData+0xb2>
        }

        for(int i = display_count; i < max_display_count; i++) {
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
 8002912:	e00e      	b.n	8002932 <GetRealTimeDisplayData+0x11a>
            display_data[i].x = x_min;
 8002914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4413      	add	r3, r2
 800291c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291e:	601a      	str	r2, [r3, #0]
            display_data[i].y = y_min;
 8002920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4413      	add	r3, r2
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	605a      	str	r2, [r3, #4]
        for(int i = display_count; i < max_display_count; i++) {
 800292c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800292e:	3301      	adds	r3, #1
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
 8002932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	dbec      	blt.n	8002914 <GetRealTimeDisplayData+0xfc>
 800293a:	e040      	b.n	80029be <GetRealTimeDisplayData+0x1a6>
        }
    } else {
        int display_count = (buffer->data_count < max_display_count) ? buffer->data_count : max_display_count;
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4293      	cmp	r3, r2
 8002946:	bfa8      	it	ge
 8002948:	4613      	movge	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]

        for(int i = 0; i < display_count; i++) {
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002950:	e01b      	b.n	800298a <GetRealTimeDisplayData+0x172>
            display_data[i] = buffer->buffer[i];
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	18d1      	adds	r1, r2, r3
 800295a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295e:	460c      	mov	r4, r1
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002968:	e884 0003 	stmia.w	r4, {r0, r1}
            display_data[i].x += x_min;
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	4413      	add	r3, r2
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4413      	add	r3, r2
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	440a      	add	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
        for(int i = 0; i < display_count; i++) {
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	3301      	adds	r3, #1
 8002988:	633b      	str	r3, [r7, #48]	@ 0x30
 800298a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	429a      	cmp	r2, r3
 8002990:	dbdf      	blt.n	8002952 <GetRealTimeDisplayData+0x13a>
        }

        for(int i = display_count; i < max_display_count; i++) {
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002996:	e00e      	b.n	80029b6 <GetRealTimeDisplayData+0x19e>
            display_data[i].x = x_min;
 8002998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	4413      	add	r3, r2
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	601a      	str	r2, [r3, #0]
            display_data[i].y = y_min;
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	4413      	add	r3, r2
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	605a      	str	r2, [r3, #4]
        for(int i = display_count; i < max_display_count; i++) {
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b2:	3301      	adds	r3, #1
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	dbec      	blt.n	8002998 <GetRealTimeDisplayData+0x180>
        }
    }
}
 80029be:	3740      	adds	r7, #64	@ 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc90      	pop	{r4, r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000508 	.word	0x20000508
 80029cc:	20000290 	.word	0x20000290

080029d0 <ResetChartData>:

void ResetChartData(uint8_t chart_index) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
    RealTimeDataBuffer* buffer = &chart_buffers[chart_index];
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <ResetChartData+0x8c>)
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

    buffer->data_count = 0;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
    buffer->start_time = HAL_GetTick();
 80029f2:	f002 ff35 	bl	8005860 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
    buffer->last_update_time = buffer->start_time;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
    buffer->current_time_offset = 0;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    buffer->is_scrolling = 0;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
    buffer->time_window = chart_settings[chart_index].x_max - chart_settings[chart_index].x_min;
 8002a1a:	79fa      	ldrb	r2, [r7, #7]
 8002a1c:	4910      	ldr	r1, [pc, #64]	@ (8002a60 <ResetChartData+0x90>)
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3308      	adds	r3, #8
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	79fa      	ldrb	r2, [r7, #7]
 8002a2e:	480c      	ldr	r0, [pc, #48]	@ (8002a60 <ResetChartData+0x90>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4403      	add	r3, r0
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1aca      	subs	r2, r1, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290

    memset(buffer->buffer, 0, sizeof(buffer->buffer));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f006 fec6 	bl	80097e0 <memset>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000508 	.word	0x20000508
 8002a60:	20000290 	.word	0x20000290

08002a64 <OnSettingsChanged>:

void OnSettingsChanged(uint8_t chart_index) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
    ResetChartData(chart_index);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ffad 	bl	80029d0 <ResetChartData>
    // 同步目标值到控制系统
    SyncTargetValuesToControl();
 8002a76:	f7fe fdb1 	bl	80015dc <SyncTargetValuesToControl>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <DrawDetailedChart_Int>:
//**************检查是否缺少**************
// 绘制详细图表的函数
void DrawDetailedChart_Int(uint32_t* dl_addr, Rect chart_area, const ChartConfig_Int* config,
                           DataPoint_Int* data, int data_count, uint8_t chart_index) {
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b0b1      	sub	sp, #196	@ 0xc4
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	1d38      	adds	r0, r7, #4
 8002a8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002a92:	603b      	str	r3, [r7, #0]
    uint16_t plot_x1 = chart_area.x1 + 40;
 8002a94:	88bb      	ldrh	r3, [r7, #4]
 8002a96:	3328      	adds	r3, #40	@ 0x28
 8002a98:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    uint16_t plot_y1 = chart_area.y1 + 30;
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	331e      	adds	r3, #30
 8002aa0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    uint16_t plot_x2 = chart_area.x2 - 20;
 8002aa4:	893b      	ldrh	r3, [r7, #8]
 8002aa6:	3b14      	subs	r3, #20
 8002aa8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    uint16_t plot_y2 = chart_area.y2 - 40;
 8002aac:	897b      	ldrh	r3, [r7, #10]
 8002aae:	3b28      	subs	r3, #40	@ 0x28
 8002ab0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    // 绘制坐标轴
    FT812_WriteReg32(*dl_addr, COLOR_RGB(0, 0, 0)); *dl_addr += 4;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe fe6d 	bl	800179c <FT812_WriteReg32>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1d1a      	adds	r2, r3, #4
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]
    DrawArrow(dl_addr, plot_x1, plot_y2, plot_x2 + 15, plot_y2, 6);
 8002acc:	f9b7 108e 	ldrsh.w	r1, [r7, #142]	@ 0x8e
 8002ad0:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	@ 0x88
 8002ad4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002ad8:	330f      	adds	r3, #15
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	b218      	sxth	r0, r3
 8002ade:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8002ae2:	2406      	movs	r4, #6
 8002ae4:	9401      	str	r4, [sp, #4]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4603      	mov	r3, r0
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff f938 	bl	8001d60 <DrawArrow>
    DrawArrow(dl_addr, plot_x1, plot_y2, plot_x1, plot_y1 - 15, 6);
 8002af0:	f9b7 108e 	ldrsh.w	r1, [r7, #142]	@ 0x8e
 8002af4:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	@ 0x88
 8002af8:	f9b7 008e 	ldrsh.w	r0, [r7, #142]	@ 0x8e
 8002afc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8002b00:	3b0f      	subs	r3, #15
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	2406      	movs	r4, #6
 8002b08:	9401      	str	r4, [sp, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff f926 	bl	8001d60 <DrawArrow>

    // 绘制刻度标记
    FT812_WriteReg32(*dl_addr, BEGIN(LINES)); *dl_addr += 4;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	498a      	ldr	r1, [pc, #552]	@ (8002d44 <DrawDetailedChart_Int+0x2c0>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fe3e 	bl	800179c <FT812_WriteReg32>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1d1a      	adds	r2, r3, #4
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

    for(int i = 0; i <= config->x_divisions; i++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b30:	e047      	b.n	8002bc2 <DrawDetailedChart_Int+0x13e>
        uint16_t x = plot_x1 + (plot_x2 - plot_x1) * i / config->x_divisions;
 8002b32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8002b36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	7f12      	ldrb	r2, [r2, #28]
 8002b48:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002b52:	4413      	add	r3, r2
 8002b54:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, plot_y2, 0, 0)); *dl_addr += 4;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002b60:	055b      	lsls	r3, r3, #21
 8002b62:	4a79      	ldr	r2, [pc, #484]	@ (8002d48 <DrawDetailedChart_Int+0x2c4>)
 8002b64:	401a      	ands	r2, r3
 8002b66:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002b6a:	0319      	lsls	r1, r3, #12
 8002b6c:	4b77      	ldr	r3, [pc, #476]	@ (8002d4c <DrawDetailedChart_Int+0x2c8>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b76:	4619      	mov	r1, r3
 8002b78:	f7fe fe10 	bl	800179c <FT812_WriteReg32>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1d1a      	adds	r2, r3, #4
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, plot_y2 + 5, 0, 0)); *dl_addr += 4;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002b8e:	055b      	lsls	r3, r3, #21
 8002b90:	4a6d      	ldr	r2, [pc, #436]	@ (8002d48 <DrawDetailedChart_Int+0x2c4>)
 8002b92:	401a      	ands	r2, r3
 8002b94:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002b98:	3305      	adds	r3, #5
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d4c <DrawDetailedChart_Int+0x2c8>)
 8002ba0:	400b      	ands	r3, r1
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fe fdf7 	bl	800179c <FT812_WriteReg32>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1d1a      	adds	r2, r3, #4
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]
    for(int i = 0; i <= config->x_divisions; i++) {
 8002bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	7f1b      	ldrb	r3, [r3, #28]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	ddb0      	ble.n	8002b32 <DrawDetailedChart_Int+0xae>
    }

    for(int i = 0; i <= config->y_divisions; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bd6:	e046      	b.n	8002c66 <DrawDetailedChart_Int+0x1e2>
        uint16_t y = plot_y2 - (plot_y2 - plot_y1) * i / config->y_divisions;
 8002bd8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002bdc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	7f52      	ldrb	r2, [r2, #29]
 8002bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        FT812_WriteReg32(*dl_addr, VERTEX2II(plot_x1 - 5, y, 0, 0)); *dl_addr += 4;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002c06:	3b05      	subs	r3, #5
 8002c08:	055b      	lsls	r3, r3, #21
 8002c0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d48 <DrawDetailedChart_Int+0x2c4>)
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002c12:	0319      	lsls	r1, r3, #12
 8002c14:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <DrawDetailedChart_Int+0x2c8>)
 8002c16:	400b      	ands	r3, r1
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fe fdbc 	bl	800179c <FT812_WriteReg32>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	1d1a      	adds	r2, r3, #4
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(plot_x1, y, 0, 0)); *dl_addr += 4;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002c36:	055b      	lsls	r3, r3, #21
 8002c38:	4a43      	ldr	r2, [pc, #268]	@ (8002d48 <DrawDetailedChart_Int+0x2c4>)
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002c40:	0319      	lsls	r1, r3, #12
 8002c42:	4b42      	ldr	r3, [pc, #264]	@ (8002d4c <DrawDetailedChart_Int+0x2c8>)
 8002c44:	400b      	ands	r3, r1
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fe fda5 	bl	800179c <FT812_WriteReg32>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	601a      	str	r2, [r3, #0]
    for(int i = 0; i <= config->y_divisions; i++) {
 8002c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c60:	3301      	adds	r3, #1
 8002c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	7f5b      	ldrb	r3, [r3, #29]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c70:	4293      	cmp	r3, r2
 8002c72:	ddb1      	ble.n	8002bd8 <DrawDetailedChart_Int+0x154>
    }
    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fd8d 	bl	800179c <FT812_WriteReg32>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1d1a      	adds	r2, r3, #4
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

    // 绘制刻度值
    FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	492f      	ldr	r1, [pc, #188]	@ (8002d50 <DrawDetailedChart_Int+0x2cc>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fd82 	bl	800179c <FT812_WriteReg32>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1d1a      	adds	r2, r3, #4
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

    for(int i = 0; i <= config->x_divisions; i++) {
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ca8:	e041      	b.n	8002d2e <DrawDetailedChart_Int+0x2aa>
        uint16_t x = plot_x1 + (plot_x2 - plot_x1) * i / config->x_divisions;
 8002caa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8002cae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	7f12      	ldrb	r2, [r2, #28]
 8002cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002cca:	4413      	add	r3, r2
 8002ccc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        int32_t value = config->x_min + (config->x_max - config->x_min) * i / config->x_divisions;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6919      	ldr	r1, [r3, #16]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	1acb      	subs	r3, r1, r3
 8002cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	7f09      	ldrb	r1, [r1, #28]
 8002cea:	fb93 f3f1 	sdiv	r3, r3, r1
 8002cee:	4413      	add	r3, r2
 8002cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
        char value_str[12];
        IntToString(value_str, value, config->x_decimal_places);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	7f9a      	ldrb	r2, [r3, #30]
 8002cf6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cfa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fafb 	bl	80022f8 <IntToString>
        DrawString_Proportional(dl_addr, x - 10, plot_y2 + 8, 20, value_str, 0);
 8002d02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002d06:	f1a3 010a 	sub.w	r1, r3, #10
 8002d0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d0e:	f103 0208 	add.w	r2, r3, #8
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2314      	movs	r3, #20
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7fe ff66 	bl	8001bf0 <DrawString_Proportional>
    for(int i = 0; i <= config->x_divisions; i++) {
 8002d24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	7f1b      	ldrb	r3, [r3, #28]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	ddb6      	ble.n	8002caa <DrawDetailedChart_Int+0x226>
    }

    for(int i = 0; i <= config->y_divisions; i++) {
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d42:	e048      	b.n	8002dd6 <DrawDetailedChart_Int+0x352>
 8002d44:	1f000003 	.word	0x1f000003
 8002d48:	3fe00000 	.word	0x3fe00000
 8002d4c:	001ff000 	.word	0x001ff000
 8002d50:	1f000001 	.word	0x1f000001
        uint16_t y = plot_y2 - (plot_y2 - plot_y1) * i / config->y_divisions;
 8002d54:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002d58:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	7f52      	ldrb	r2, [r2, #29]
 8002d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        int32_t value = config->y_min + (config->y_max - config->y_min) * i / config->y_divisions;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	1acb      	subs	r3, r1, r3
 8002d88:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	7f49      	ldrb	r1, [r1, #29]
 8002d94:	fb93 f3f1 	sdiv	r3, r3, r1
 8002d98:	4413      	add	r3, r2
 8002d9a:	663b      	str	r3, [r7, #96]	@ 0x60
        char value_str[12];
        IntToString(value_str, value, config->y_decimal_places);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	7fda      	ldrb	r2, [r3, #31]
 8002da0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002da4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff faa6 	bl	80022f8 <IntToString>
        DrawString_Proportional(dl_addr, plot_x1 - 35, y - 6, 20, value_str, 0);
 8002dac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002db0:	f1a3 0123 	sub.w	r1, r3, #35	@ 0x23
 8002db4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002db8:	1f9a      	subs	r2, r3, #6
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2314      	movs	r3, #20
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7fe ff12 	bl	8001bf0 <DrawString_Proportional>
    for(int i = 0; i <= config->y_divisions; i++) {
 8002dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	7f5b      	ldrb	r3, [r3, #29]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	ddb7      	ble.n	8002d54 <DrawDetailedChart_Int+0x2d0>
    }
    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fcd5 	bl	800179c <FT812_WriteReg32>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1d1a      	adds	r2, r3, #4
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

    // 绘制坐标轴标签
    FT812_WriteReg32(*dl_addr, COLOR_RGB(60, 60, 60)); *dl_addr += 4;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	49b0      	ldr	r1, [pc, #704]	@ (80030c4 <DrawDetailedChart_Int+0x640>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fcca 	bl	800179c <FT812_WriteReg32>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1d1a      	adds	r2, r3, #4
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	601a      	str	r2, [r3, #0]
    FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	49ac      	ldr	r1, [pc, #688]	@ (80030c8 <DrawDetailedChart_Int+0x644>)
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fcbf 	bl	800179c <FT812_WriteReg32>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

    int x_label_width = strlen(config->x_label) * 8;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd f98f 	bl	8000150 <strlen>
 8002e32:	4603      	mov	r3, r0
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    DrawString_Proportional(dl_addr, (plot_x1 + plot_x2) / 2 - x_label_width/2, plot_y2 + 25, 20, config->x_label, 0);
 8002e3a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8002e3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002e42:	4413      	add	r3, r2
 8002e44:	0fda      	lsrs	r2, r3, #31
 8002e46:	4413      	add	r3, r2
 8002e48:	105b      	asrs	r3, r3, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e50:	0fda      	lsrs	r2, r3, #31
 8002e52:	4413      	add	r3, r2
 8002e54:	105b      	asrs	r3, r3, #1
 8002e56:	425b      	negs	r3, r3
 8002e58:	4419      	add	r1, r3
 8002e5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002e5e:	f103 0219 	add.w	r2, r3, #25
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2000      	movs	r0, #0
 8002e68:	9001      	str	r0, [sp, #4]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2314      	movs	r3, #20
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7fe febe 	bl	8001bf0 <DrawString_Proportional>
    DrawString_Proportional(dl_addr, plot_x1 - 35, plot_y1 - 15, 20, config->y_label, 0);
 8002e74:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8002e78:	f1a3 0123 	sub.w	r1, r3, #35	@ 0x23
 8002e7c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8002e80:	f1a3 020f 	sub.w	r2, r3, #15
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2000      	movs	r0, #0
 8002e8a:	9001      	str	r0, [sp, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2314      	movs	r3, #20
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7fe fead 	bl	8001bf0 <DrawString_Proportional>

    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fc7c 	bl	800179c <FT812_WriteReg32>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1d1a      	adds	r2, r3, #4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

    // 计算有效数据点数量
    int valid_data_count = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    int32_t y_min_threshold = config->y_min;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    for(int i = 0; i < data_count; i++) {
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ec2:	e014      	b.n	8002eee <DrawDetailedChart_Int+0x46a>
        if(data[i].y > y_min_threshold) {
 8002ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ece:	4413      	add	r3, r2
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	da04      	bge.n	8002ee4 <DrawDetailedChart_Int+0x460>
            valid_data_count = i + 1;
 8002eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    for(int i = 0; i < data_count; i++) {
 8002ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	dbe4      	blt.n	8002ec4 <DrawDetailedChart_Int+0x440>
        }
    }

    // 绘制数据折线
    if(valid_data_count > 1) {
 8002efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	f340 8143 	ble.w	800318a <DrawDetailedChart_Int+0x706>
        const uint32_t colors[] = {0xFF0000, 0x00AA00, 0x0066FF};
 8002f04:	4a71      	ldr	r2, [pc, #452]	@ (80030cc <DrawDetailedChart_Int+0x648>)
 8002f06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        uint32_t color = colors[chart_index % 3];
 8002f10:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8002f14:	4b6e      	ldr	r3, [pc, #440]	@ (80030d0 <DrawDetailedChart_Int+0x64c>)
 8002f16:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1a:	0859      	lsrs	r1, r3, #1
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	440b      	add	r3, r1
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	33b0      	adds	r3, #176	@ 0xb0
 8002f2a:	443b      	add	r3, r7
 8002f2c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002f30:	67fb      	str	r3, [r7, #124]	@ 0x7c

        FT812_WriteReg32(*dl_addr, COLOR_RGB((color >> 16) & 0xFF, (color >> 8) & 0xFF, color & 0xFF));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f7fe fc2a 	bl	800179c <FT812_WriteReg32>
        *dl_addr += 4;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(LINES)); *dl_addr += 4;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	495f      	ldr	r1, [pc, #380]	@ (80030d4 <DrawDetailedChart_Int+0x650>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fc1f 	bl	800179c <FT812_WriteReg32>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

        for(int i = 0; i < valid_data_count - 1; i++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f6e:	e07b      	b.n	8003068 <DrawDetailedChart_Int+0x5e4>
            if(data[i].y > y_min_threshold && data[i+1].y > y_min_threshold) {
 8002f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f7a:	4413      	add	r3, r2
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f82:	429a      	cmp	r2, r3
 8002f84:	da6b      	bge.n	800305e <DrawDetailedChart_Int+0x5da>
 8002f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f92:	4413      	add	r3, r2
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	da5f      	bge.n	800305e <DrawDetailedChart_Int+0x5da>
                uint16_t x1, y1, x2, y2;
                ChartToScreen_Int_Safe(data[i].x, data[i].y, config, chart_area, &x1, &y1);
 8002f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fa8:	4413      	add	r3, r2
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fb6:	4413      	add	r3, r2
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	f7ff f9ef 	bl	80023b0 <ChartToScreen_Int_Safe>
                ChartToScreen_Int_Safe(data[i+1].x, data[i+1].y, config, chart_area, &x2, &y2);
 8002fd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fde:	4413      	add	r3, r2
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fee:	4413      	add	r3, r2
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	f7ff f9d3 	bl	80023b0 <ChartToScreen_Int_Safe>

                FT812_WriteReg32(*dl_addr, VERTEX2II(x1, y1, 0, 0)); *dl_addr += 4;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003010:	055b      	lsls	r3, r3, #21
 8003012:	4a31      	ldr	r2, [pc, #196]	@ (80030d8 <DrawDetailedChart_Int+0x654>)
 8003014:	401a      	ands	r2, r3
 8003016:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003018:	0319      	lsls	r1, r3, #12
 800301a:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <DrawDetailedChart_Int+0x658>)
 800301c:	400b      	ands	r3, r1
 800301e:	4313      	orrs	r3, r2
 8003020:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003024:	4619      	mov	r1, r3
 8003026:	f7fe fbb9 	bl	800179c <FT812_WriteReg32>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	1d1a      	adds	r2, r3, #4
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]
                FT812_WriteReg32(*dl_addr, VERTEX2II(x2, y2, 0, 0)); *dl_addr += 4;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <DrawDetailedChart_Int+0x654>)
 800303e:	401a      	ands	r2, r3
 8003040:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003042:	0319      	lsls	r1, r3, #12
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <DrawDetailedChart_Int+0x658>)
 8003046:	400b      	ands	r3, r1
 8003048:	4313      	orrs	r3, r2
 800304a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800304e:	4619      	mov	r1, r3
 8003050:	f7fe fba4 	bl	800179c <FT812_WriteReg32>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	1d1a      	adds	r2, r3, #4
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	601a      	str	r2, [r3, #0]
        for(int i = 0; i < valid_data_count - 1; i++) {
 800305e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003062:	3301      	adds	r3, #1
 8003064:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800306c:	3b01      	subs	r3, #1
 800306e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003072:	429a      	cmp	r2, r3
 8003074:	f6ff af7c 	blt.w	8002f70 <DrawDetailedChart_Int+0x4ec>
            }
        }
        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe fb8b 	bl	800179c <FT812_WriteReg32>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	601a      	str	r2, [r3, #0]

        // 绘制数据点
        FT812_WriteReg32(*dl_addr, POINT_SIZE(3 * 16)); *dl_addr += 4;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4912      	ldr	r1, [pc, #72]	@ (80030e0 <DrawDetailedChart_Int+0x65c>)
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fb80 	bl	800179c <FT812_WriteReg32>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1d1a      	adds	r2, r3, #4
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(POINTS)); *dl_addr += 4;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	490e      	ldr	r1, [pc, #56]	@ (80030e4 <DrawDetailedChart_Int+0x660>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fb75 	bl	800179c <FT812_WriteReg32>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1d1a      	adds	r2, r3, #4
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

        for(int i = 0; i < valid_data_count; i += 2) {
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030c2:	e050      	b.n	8003166 <DrawDetailedChart_Int+0x6e2>
 80030c4:	043c3c3c 	.word	0x043c3c3c
 80030c8:	1f000001 	.word	0x1f000001
 80030cc:	0800bbfc 	.word	0x0800bbfc
 80030d0:	aaaaaaab 	.word	0xaaaaaaab
 80030d4:	1f000003 	.word	0x1f000003
 80030d8:	3fe00000 	.word	0x3fe00000
 80030dc:	001ff000 	.word	0x001ff000
 80030e0:	0d000030 	.word	0x0d000030
 80030e4:	1f000002 	.word	0x1f000002
            if(data[i].y > y_min_threshold) {
 80030e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030f2:	4413      	add	r3, r2
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030fa:	429a      	cmp	r2, r3
 80030fc:	da2e      	bge.n	800315c <DrawDetailedChart_Int+0x6d8>
                uint16_t x, y;
                ChartToScreen_Int_Safe(data[i].x, data[i].y, config, chart_area, &x, &y);
 80030fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003108:	4413      	add	r3, r2
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003116:	4413      	add	r3, r2
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800311e:	9302      	str	r3, [sp, #8]
 8003120:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	f7ff f93f 	bl	80023b0 <ChartToScreen_Int_Safe>
                FT812_WriteReg32(*dl_addr, VERTEX2II(x, y, 0, 0)); *dl_addr += 4;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003138:	055b      	lsls	r3, r3, #21
 800313a:	4a85      	ldr	r2, [pc, #532]	@ (8003350 <DrawDetailedChart_Int+0x8cc>)
 800313c:	401a      	ands	r2, r3
 800313e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003140:	0319      	lsls	r1, r3, #12
 8003142:	4b84      	ldr	r3, [pc, #528]	@ (8003354 <DrawDetailedChart_Int+0x8d0>)
 8003144:	400b      	ands	r3, r1
 8003146:	4313      	orrs	r3, r2
 8003148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800314c:	4619      	mov	r1, r3
 800314e:	f7fe fb25 	bl	800179c <FT812_WriteReg32>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]
        for(int i = 0; i < valid_data_count; i += 2) {
 800315c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003160:	3302      	adds	r3, #2
 8003162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003166:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800316a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800316e:	429a      	cmp	r2, r3
 8003170:	dbba      	blt.n	80030e8 <DrawDetailedChart_Int+0x664>
            }
        }
        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fb0e 	bl	800179c <FT812_WriteReg32>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1d1a      	adds	r2, r3, #4
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	601a      	str	r2, [r3, #0]
    }

    // 绘制期望值虚线
    int32_t target_value = chart_settings[chart_index].target_value;
 800318a:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 800318e:	4972      	ldr	r1, [pc, #456]	@ (8003358 <DrawDetailedChart_Int+0x8d4>)
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (target_value > config->y_min && target_value < config->y_max) {
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f340 8084 	ble.w	80032b2 <DrawDetailedChart_Int+0x82e>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031b0:	429a      	cmp	r2, r3
 80031b2:	da7e      	bge.n	80032b2 <DrawDetailedChart_Int+0x82e>
        int32_t y_range = config->y_max - config->y_min;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	677b      	str	r3, [r7, #116]	@ 0x74
        int32_t y_offset = target_value - config->y_min;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	673b      	str	r3, [r7, #112]	@ 0x70
        uint16_t target_y = plot_y2 - (uint16_t)((y_offset * (plot_y2 - plot_y1)) / y_range);
 80031ca:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 80031ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
 80031da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

        FT812_WriteReg32(*dl_addr, COLOR_RGB(255, 100, 100)); *dl_addr += 4;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	495a      	ldr	r1, [pc, #360]	@ (800335c <DrawDetailedChart_Int+0x8d8>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fad2 	bl	800179c <FT812_WriteReg32>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]
        DrawDashedLine(dl_addr, plot_x1, target_y, plot_x2, target_y);
 8003202:	f9b7 108e 	ldrsh.w	r1, [r7, #142]	@ 0x8e
 8003206:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 800320a:	f9b7 008a 	ldrsh.w	r0, [r7, #138]	@ 0x8a
 800320e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	4603      	mov	r3, r0
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7fe ffd6 	bl	80021c8 <DrawDashedLine>

        FT812_WriteReg32(*dl_addr, COLOR_RGB(200, 0, 0)); *dl_addr += 4;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f04f 6199 	mov.w	r1, #80216064	@ 0x4c80000
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fab9 	bl	800179c <FT812_WriteReg32>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4949      	ldr	r1, [pc, #292]	@ (8003360 <DrawDetailedChart_Int+0x8dc>)
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe faae 	bl	800179c <FT812_WriteReg32>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1d1a      	adds	r2, r3, #4
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]

        char target_str[15];
        IntToString(target_str, target_value, 2);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	2202      	movs	r2, #2
 8003250:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f850 	bl	80022f8 <IntToString>

        DrawString_Proportional(dl_addr, plot_x2 - 100, target_y - 8, 16, "Target:", 0);
 8003258:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800325c:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
 8003260:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003264:	f1a3 0208 	sub.w	r2, r3, #8
 8003268:	2300      	movs	r3, #0
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <DrawDetailedChart_Int+0x8e0>)
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2310      	movs	r3, #16
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7fe fcbc 	bl	8001bf0 <DrawString_Proportional>
        DrawString_Proportional(dl_addr, plot_x2 - 40, target_y - 8, 16, target_str, 0);
 8003278:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800327c:	f1a3 0128 	sub.w	r1, r3, #40	@ 0x28
 8003280:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003284:	f1a3 0208 	sub.w	r2, r3, #8
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2310      	movs	r3, #16
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7fe fcab 	bl	8001bf0 <DrawString_Proportional>

        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fa7a 	bl	800179c <FT812_WriteReg32>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1d1a      	adds	r2, r3, #4
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	601a      	str	r2, [r3, #0]
    }

    // 绘制标题
    FT812_WriteReg32(*dl_addr, COLOR_RGB(0, 0, 0)); *dl_addr += 4;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fa6e 	bl	800179c <FT812_WriteReg32>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	1d1a      	adds	r2, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]
    FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4924      	ldr	r1, [pc, #144]	@ (8003360 <DrawDetailedChart_Int+0x8dc>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fa63 	bl	800179c <FT812_WriteReg32>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1d1a      	adds	r2, r3, #4
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]
    int title_width = strlen(config->title) * 12;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fc ff33 	bl	8000150 <strlen>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    DrawString_Proportional(dl_addr, (chart_area.x1 + chart_area.x2) / 2 - title_width/2 + 45 , chart_area.y1 + 8, 26, config->title, 0);
 80032f6:	88bb      	ldrh	r3, [r7, #4]
 80032f8:	461a      	mov	r2, r3
 80032fa:	893b      	ldrh	r3, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	0fda      	lsrs	r2, r3, #31
 8003300:	4413      	add	r3, r2
 8003302:	105b      	asrs	r3, r3, #1
 8003304:	4619      	mov	r1, r3
 8003306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003308:	0fda      	lsrs	r2, r3, #31
 800330a:	4413      	add	r3, r2
 800330c:	105b      	asrs	r3, r3, #1
 800330e:	425b      	negs	r3, r3
 8003310:	440b      	add	r3, r1
 8003312:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	f103 0208 	add.w	r2, r3, #8
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2000      	movs	r0, #0
 8003322:	9001      	str	r0, [sp, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	231a      	movs	r3, #26
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7fe fc61 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fa30 	bl	800179c <FT812_WriteReg32>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1d1a      	adds	r2, r3, #4
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	37b4      	adds	r7, #180	@ 0xb4
 800334a:	46bd      	mov	sp, r7
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	bf00      	nop
 8003350:	3fe00000 	.word	0x3fe00000
 8003354:	001ff000 	.word	0x001ff000
 8003358:	20000290 	.word	0x20000290
 800335c:	04ff6464 	.word	0x04ff6464
 8003360:	1f000001 	.word	0x1f000001
 8003364:	0800bbf4 	.word	0x0800bbf4

08003368 <DrawMainUI_Int>:

// 主界面绘制函数 - **关键修改：同步执行器状态**
void DrawMainUI_Int(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b0ec      	sub	sp, #432	@ 0x1b0
 800336c:	af04      	add	r7, sp, #16
    for(int i = 0; i < 3; i++) {
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003374:	e00a      	b.n	800338c <DrawMainUI_Int+0x24>
        UpdateRealTimeData(i);
 8003376:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f965 	bl	800264c <UpdateRealTimeData>
    for(int i = 0; i < 3; i++) {
 8003382:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003386:	3301      	adds	r3, #1
 8003388:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800338c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003390:	2b02      	cmp	r3, #2
 8003392:	ddf0      	ble.n	8003376 <DrawMainUI_Int+0xe>
    }

    uint32_t dl_addr = RAM_DL;
 8003394:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8003398:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

    FT812_WriteReg32(dl_addr, CLEAR_COLOR_RGB(240, 240, 240)); dl_addr += 4;
 800339c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033a0:	498c      	ldr	r1, [pc, #560]	@ (80035d4 <DrawMainUI_Int+0x26c>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f9fa 	bl	800179c <FT812_WriteReg32>
 80033a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033ac:	3304      	adds	r3, #4
 80033ae:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    FT812_WriteReg32(dl_addr, CLEAR(1,1,1)); dl_addr += 4;
 80033b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033b6:	4988      	ldr	r1, [pc, #544]	@ (80035d8 <DrawMainUI_Int+0x270>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe f9ef 	bl	800179c <FT812_WriteReg32>
 80033be:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033c2:	3304      	adds	r3, #4
 80033c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

    ChartConfig_Int configs[3] = {
 80033c8:	4b84      	ldr	r3, [pc, #528]	@ (80035dc <DrawMainUI_Int+0x274>)
 80033ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80033ce:	4b84      	ldr	r3, [pc, #528]	@ (80035e0 <DrawMainUI_Int+0x278>)
 80033d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80033d4:	4b83      	ldr	r3, [pc, #524]	@ (80035e4 <DrawMainUI_Int+0x27c>)
 80033d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        {"Flow Rate", "Time(s)", "(L/min)",
         chart_settings[0].x_min, chart_settings[0].x_max,
 80033da:	4b83      	ldr	r3, [pc, #524]	@ (80035e8 <DrawMainUI_Int+0x280>)
 80033dc:	685b      	ldr	r3, [r3, #4]
    ChartConfig_Int configs[3] = {
 80033de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
         chart_settings[0].x_min, chart_settings[0].x_max,
 80033e2:	4b81      	ldr	r3, [pc, #516]	@ (80035e8 <DrawMainUI_Int+0x280>)
 80033e4:	689b      	ldr	r3, [r3, #8]
    ChartConfig_Int configs[3] = {
 80033e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
         chart_settings[0].y_min, chart_settings[0].y_max, 5, 5, 1, 2},
 80033ea:	4b7f      	ldr	r3, [pc, #508]	@ (80035e8 <DrawMainUI_Int+0x280>)
 80033ec:	68db      	ldr	r3, [r3, #12]
    ChartConfig_Int configs[3] = {
 80033ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
         chart_settings[0].y_min, chart_settings[0].y_max, 5, 5, 1, 2},
 80033f2:	4b7d      	ldr	r3, [pc, #500]	@ (80035e8 <DrawMainUI_Int+0x280>)
 80033f4:	691b      	ldr	r3, [r3, #16]
    ChartConfig_Int configs[3] = {
 80033f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80033fa:	2305      	movs	r3, #5
 80033fc:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 8003400:	2305      	movs	r3, #5
 8003402:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
 8003406:	2301      	movs	r3, #1
 8003408:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
 800340c:	2302      	movs	r3, #2
 800340e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8003412:	4b76      	ldr	r3, [pc, #472]	@ (80035ec <DrawMainUI_Int+0x284>)
 8003414:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003418:	4b71      	ldr	r3, [pc, #452]	@ (80035e0 <DrawMainUI_Int+0x278>)
 800341a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800341e:	4b74      	ldr	r3, [pc, #464]	@ (80035f0 <DrawMainUI_Int+0x288>)
 8003420:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
        {"Dissolved Oxygen", "Time(s)", "(mg/L)",
         chart_settings[1].x_min, chart_settings[1].x_max,
 8003424:	4b70      	ldr	r3, [pc, #448]	@ (80035e8 <DrawMainUI_Int+0x280>)
 8003426:	699b      	ldr	r3, [r3, #24]
    ChartConfig_Int configs[3] = {
 8003428:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
         chart_settings[1].x_min, chart_settings[1].x_max,
 800342c:	4b6e      	ldr	r3, [pc, #440]	@ (80035e8 <DrawMainUI_Int+0x280>)
 800342e:	69db      	ldr	r3, [r3, #28]
    ChartConfig_Int configs[3] = {
 8003430:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
         chart_settings[1].y_min, chart_settings[1].y_max, 5, 5, 1, 0},
 8003434:	4b6c      	ldr	r3, [pc, #432]	@ (80035e8 <DrawMainUI_Int+0x280>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
    ChartConfig_Int configs[3] = {
 8003438:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
         chart_settings[1].y_min, chart_settings[1].y_max, 5, 5, 1, 0},
 800343c:	4b6a      	ldr	r3, [pc, #424]	@ (80035e8 <DrawMainUI_Int+0x280>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    ChartConfig_Int configs[3] = {
 8003440:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003444:	2305      	movs	r3, #5
 8003446:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 800344a:	2305      	movs	r3, #5
 800344c:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8003450:	2301      	movs	r3, #1
 8003452:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8003456:	2300      	movs	r3, #0
 8003458:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800345c:	4b65      	ldr	r3, [pc, #404]	@ (80035f4 <DrawMainUI_Int+0x28c>)
 800345e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003462:	4b5f      	ldr	r3, [pc, #380]	@ (80035e0 <DrawMainUI_Int+0x278>)
 8003464:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8003468:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <DrawMainUI_Int+0x290>)
 800346a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
        {"Temperature", "Time(s)", "(C)",
         chart_settings[2].x_min, chart_settings[2].x_max,
 800346e:	4b5e      	ldr	r3, [pc, #376]	@ (80035e8 <DrawMainUI_Int+0x280>)
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    ChartConfig_Int configs[3] = {
 8003472:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
         chart_settings[2].x_min, chart_settings[2].x_max,
 8003476:	4b5c      	ldr	r3, [pc, #368]	@ (80035e8 <DrawMainUI_Int+0x280>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    ChartConfig_Int configs[3] = {
 800347a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
         chart_settings[2].y_min, chart_settings[2].y_max, 5, 5, 1, 2}
 800347e:	4b5a      	ldr	r3, [pc, #360]	@ (80035e8 <DrawMainUI_Int+0x280>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    ChartConfig_Int configs[3] = {
 8003482:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
         chart_settings[2].y_min, chart_settings[2].y_max, 5, 5, 1, 2}
 8003486:	4b58      	ldr	r3, [pc, #352]	@ (80035e8 <DrawMainUI_Int+0x280>)
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    ChartConfig_Int configs[3] = {
 800348a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800348e:	2305      	movs	r3, #5
 8003490:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 8003494:	2305      	movs	r3, #5
 8003496:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 800349a:	2301      	movs	r3, #1
 800349c:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
    };

    Rect chart_rects[3] = { CHART1_RECT, CHART2_RECT, CHART3_RECT };
 80034a6:	230a      	movs	r3, #10
 80034a8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
 80034ac:	230a      	movs	r3, #10
 80034ae:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 80034b2:	23eb      	movs	r3, #235	@ 0xeb
 80034b4:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
 80034b8:	2383      	movs	r3, #131	@ 0x83
 80034ba:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
 80034be:	23f5      	movs	r3, #245	@ 0xf5
 80034c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 80034c4:	230a      	movs	r3, #10
 80034c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 80034ca:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 80034ce:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
 80034d2:	2383      	movs	r3, #131	@ 0x83
 80034d4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 80034d8:	230a      	movs	r3, #10
 80034da:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 80034de:	238d      	movs	r3, #141	@ 0x8d
 80034e0:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
 80034e4:	23eb      	movs	r3, #235	@ 0xeb
 80034e6:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 80034ea:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80034ee:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

    for(int i = 0; i < 3; i++) {
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80034f8:	e027      	b.n	800354a <DrawMainUI_Int+0x1e2>
        DataPoint_Int data[20];
        GetRealTimeDisplayData(i, data, 20);
 80034fa:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4639      	mov	r1, r7
 8003502:	2214      	movs	r2, #20
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f987 	bl	8002818 <GetRealTimeDisplayData>
        DrawDetailedChart_Int(&dl_addr, chart_rects[i], &configs[i], data, 20, i);
 800350a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800350e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003512:	015b      	lsls	r3, r3, #5
 8003514:	18d1      	adds	r1, r2, r3
 8003516:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003520:	00d2      	lsls	r2, r2, #3
 8003522:	f502 72d0 	add.w	r2, r2, #416	@ 0x1a0
 8003526:	443a      	add	r2, r7
 8003528:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	2314      	movs	r3, #20
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	463b      	mov	r3, r7
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	460b      	mov	r3, r1
 8003538:	3a98      	subs	r2, #152	@ 0x98
 800353a:	ca06      	ldmia	r2, {r1, r2}
 800353c:	f7ff faa2 	bl	8002a84 <DrawDetailedChart_Int>
    for(int i = 0; i < 3; i++) {
 8003540:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003544:	3301      	adds	r3, #1
 8003546:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800354a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800354e:	2b02      	cmp	r3, #2
 8003550:	ddd3      	ble.n	80034fa <DrawMainUI_Int+0x192>
    // **关键修改：状态显示区域与控制系统状态同步**
    struct {
        const char* name;
        uint8_t stat;
        Rect r;
    } items[] = {
 8003552:	4b2a      	ldr	r3, [pc, #168]	@ (80035fc <DrawMainUI_Int+0x294>)
 8003554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        {"Water pump status: ", system_state.pump_on, WP_RECT},
 8003558:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <DrawMainUI_Int+0x298>)
 800355a:	791b      	ldrb	r3, [r3, #4]
    } items[] = {
 800355c:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8003560:	23fa      	movs	r3, #250	@ 0xfa
 8003562:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
 8003566:	2392      	movs	r3, #146	@ 0x92
 8003568:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 800356c:	f240 13c7 	movw	r3, #455	@ 0x1c7
 8003570:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
 8003574:	23b0      	movs	r3, #176	@ 0xb0
 8003576:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <DrawMainUI_Int+0x29c>)
 800357c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        {"Vacuum pump status: ", system_state.vacuum_pump_on, VP_RECT},
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <DrawMainUI_Int+0x298>)
 8003582:	795b      	ldrb	r3, [r3, #5]
    } items[] = {
 8003584:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8003588:	23fa      	movs	r3, #250	@ 0xfa
 800358a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
 800358e:	23ba      	movs	r3, #186	@ 0xba
 8003590:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
 8003594:	f240 13c7 	movw	r3, #455	@ 0x1c7
 8003598:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 800359c:	23d8      	movs	r3, #216	@ 0xd8
 800359e:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
 80035a2:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <DrawMainUI_Int+0x2a0>)
 80035a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        {"Heating status: ", system_state.heater_on, HT_RECT},
 80035a8:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <DrawMainUI_Int+0x298>)
 80035aa:	78db      	ldrb	r3, [r3, #3]
    } items[] = {
 80035ac:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 80035b0:	23fa      	movs	r3, #250	@ 0xfa
 80035b2:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 80035b6:	23e2      	movs	r3, #226	@ 0xe2
 80035b8:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
 80035bc:	f240 13c7 	movw	r3, #455	@ 0x1c7
 80035c0:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
 80035c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035c8:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
    };

    for(int i=0; i<3; i++){
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80035d2:	e122      	b.n	800381a <DrawMainUI_Int+0x4b2>
 80035d4:	02f0f0f0 	.word	0x02f0f0f0
 80035d8:	26000007 	.word	0x26000007
 80035dc:	0800ba00 	.word	0x0800ba00
 80035e0:	0800bc08 	.word	0x0800bc08
 80035e4:	0800bc10 	.word	0x0800bc10
 80035e8:	20000290 	.word	0x20000290
 80035ec:	0800ba0c 	.word	0x0800ba0c
 80035f0:	0800bc18 	.word	0x0800bc18
 80035f4:	0800ba20 	.word	0x0800ba20
 80035f8:	0800bc20 	.word	0x0800bc20
 80035fc:	0800bc24 	.word	0x0800bc24
 8003600:	200004dc 	.word	0x200004dc
 8003604:	0800bc38 	.word	0x0800bc38
 8003608:	0800bc50 	.word	0x0800bc50
        Rect r = items[i].r;
 800360c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003610:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8003614:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800361e:	443b      	add	r3, r7
 8003620:	f1a3 02e0 	sub.w	r2, r3, #224	@ 0xe0
 8003624:	460b      	mov	r3, r1
 8003626:	3206      	adds	r2, #6
 8003628:	6810      	ldr	r0, [r2, #0]
 800362a:	6851      	ldr	r1, [r2, #4]
 800362c:	c303      	stmia	r3!, {r0, r1}
        FT812_WriteReg32(dl_addr, COLOR_RGB(200,200,200)); dl_addr += 4;
 800362e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003632:	4984      	ldr	r1, [pc, #528]	@ (8003844 <DrawMainUI_Int+0x4dc>)
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe f8b1 	bl	800179c <FT812_WriteReg32>
 800363a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800363e:	3304      	adds	r3, #4
 8003640:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        FT812_WriteReg32(dl_addr, BEGIN(RECTS)); dl_addr += 4;
 8003644:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003648:	497f      	ldr	r1, [pc, #508]	@ (8003848 <DrawMainUI_Int+0x4e0>)
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe f8a6 	bl	800179c <FT812_WriteReg32>
 8003650:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003654:	3304      	adds	r3, #4
 8003656:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        FT812_WriteReg32(dl_addr, VERTEX2II(r.x1, r.y1, 0, 0)); dl_addr += 4;
 800365a:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800365e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003662:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	055b      	lsls	r3, r3, #21
 800366a:	4a78      	ldr	r2, [pc, #480]	@ (800384c <DrawMainUI_Int+0x4e4>)
 800366c:	401a      	ands	r2, r3
 800366e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003672:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003676:	885b      	ldrh	r3, [r3, #2]
 8003678:	0319      	lsls	r1, r3, #12
 800367a:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <DrawMainUI_Int+0x4e8>)
 800367c:	400b      	ands	r3, r1
 800367e:	4313      	orrs	r3, r2
 8003680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003684:	4619      	mov	r1, r3
 8003686:	f7fe f889 	bl	800179c <FT812_WriteReg32>
 800368a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800368e:	3304      	adds	r3, #4
 8003690:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        FT812_WriteReg32(dl_addr, VERTEX2II(r.x2, r.y2, 0, 0)); dl_addr += 4;
 8003694:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8003698:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800369c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036a0:	889b      	ldrh	r3, [r3, #4]
 80036a2:	055b      	lsls	r3, r3, #21
 80036a4:	4a69      	ldr	r2, [pc, #420]	@ (800384c <DrawMainUI_Int+0x4e4>)
 80036a6:	401a      	ands	r2, r3
 80036a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80036ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036b0:	88db      	ldrh	r3, [r3, #6]
 80036b2:	0319      	lsls	r1, r3, #12
 80036b4:	4b66      	ldr	r3, [pc, #408]	@ (8003850 <DrawMainUI_Int+0x4e8>)
 80036b6:	400b      	ands	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fe f86c 	bl	800179c <FT812_WriteReg32>
 80036c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80036c8:	3304      	adds	r3, #4
 80036ca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 80036ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80036d2:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe f860 	bl	800179c <FT812_WriteReg32>
 80036dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80036e0:	3304      	adds	r3, #4
 80036e2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

        FT812_WriteReg32(dl_addr, COLOR_RGB(0,0,0)); dl_addr += 4;
 80036e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80036ea:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f854 	bl	800179c <FT812_WriteReg32>
 80036f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80036f8:	3304      	adds	r3, #4
 80036fa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 80036fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003702:	4954      	ldr	r1, [pc, #336]	@ (8003854 <DrawMainUI_Int+0x4ec>)
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe f849 	bl	800179c <FT812_WriteReg32>
 800370a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800370e:	3304      	adds	r3, #4
 8003710:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        const char* txt = items[i].name;
 8003714:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800371e:	443b      	add	r3, r7
 8003720:	3be0      	subs	r3, #224	@ 0xe0
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        int xx = r.x1 + 10, yy = r.y1 + 10;
 8003728:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800372c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	330a      	adds	r3, #10
 8003734:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003738:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800373c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003740:	885b      	ldrh	r3, [r3, #2]
 8003742:	330a      	adds	r3, #10
 8003744:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        DrawString_Proportional(&dl_addr, xx, yy, 26, txt, 0);
 8003748:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 800374c:	2300      	movs	r3, #0
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	231a      	movs	r3, #26
 8003758:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800375c:	f8d7 118c 	ldr.w	r1, [r7, #396]	@ 0x18c
 8003760:	f7fe fa46 	bl	8001bf0 <DrawString_Proportional>

        const char* v = items[i].stat ? "ON" : "OFF";
 8003764:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800376e:	443b      	add	r3, r7
 8003770:	3bdc      	subs	r3, #220	@ 0xdc
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <DrawMainUI_Int+0x414>
 8003778:	4b37      	ldr	r3, [pc, #220]	@ (8003858 <DrawMainUI_Int+0x4f0>)
 800377a:	e000      	b.n	800377e <DrawMainUI_Int+0x416>
 800377c:	4b37      	ldr	r3, [pc, #220]	@ (800385c <DrawMainUI_Int+0x4f4>)
 800377e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        FT812_WriteReg32(dl_addr, COLOR_RGB(items[i].stat?0:200, items[i].stat?160:0, 0)); dl_addr += 4;
 8003782:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8003786:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003790:	443b      	add	r3, r7
 8003792:	3bdc      	subs	r3, #220	@ 0xdc
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <DrawMainUI_Int+0x438>
 800379a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800379e:	e001      	b.n	80037a4 <DrawMainUI_Int+0x43c>
 80037a0:	f04f 6299 	mov.w	r2, #80216064	@ 0x4c80000
 80037a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80037ae:	443b      	add	r3, r7
 80037b0:	3bdc      	subs	r3, #220	@ 0xdc
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <DrawMainUI_Int+0x456>
 80037b8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80037bc:	e000      	b.n	80037c0 <DrawMainUI_Int+0x458>
 80037be:	2300      	movs	r3, #0
 80037c0:	4313      	orrs	r3, r2
 80037c2:	4619      	mov	r1, r3
 80037c4:	f7fd ffea 	bl	800179c <FT812_WriteReg32>
 80037c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037cc:	3304      	adds	r3, #4
 80037ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        DrawString_Proportional(&dl_addr, r.x2-45, yy, 26, v, 0);
 80037d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80037d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037da:	889b      	ldrh	r3, [r3, #4]
 80037dc:	f1a3 012d 	sub.w	r1, r3, #45	@ 0x2d
 80037e0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80037e4:	2300      	movs	r3, #0
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	231a      	movs	r3, #26
 80037f0:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 80037f4:	f7fe f9fc 	bl	8001bf0 <DrawString_Proportional>
        FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 80037f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037fc:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd ffcb 	bl	800179c <FT812_WriteReg32>
 8003806:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800380a:	3304      	adds	r3, #4
 800380c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    for(int i=0; i<3; i++){
 8003810:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003814:	3301      	adds	r3, #1
 8003816:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800381a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800381e:	2b02      	cmp	r3, #2
 8003820:	f77f aef4 	ble.w	800360c <DrawMainUI_Int+0x2a4>
    }

    FT812_WriteReg32(dl_addr, DISPLAY());
 8003824:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd ffb6 	bl	800179c <FT812_WriteReg32>
    FT812_WriteByte(REG_DLSWAP, DLSWAP_FRAME);
 8003830:	2102      	movs	r1, #2
 8003832:	480b      	ldr	r0, [pc, #44]	@ (8003860 <DrawMainUI_Int+0x4f8>)
 8003834:	f7fd ff6c 	bl	8001710 <FT812_WriteByte>
}
 8003838:	bf00      	nop
 800383a:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	04c8c8c8 	.word	0x04c8c8c8
 8003848:	1f000009 	.word	0x1f000009
 800384c:	3fe00000 	.word	0x3fe00000
 8003850:	001ff000 	.word	0x001ff000
 8003854:	1f000001 	.word	0x1f000001
 8003858:	0800ba2c 	.word	0x0800ba2c
 800385c:	0800ba30 	.word	0x0800ba30
 8003860:	00302054 	.word	0x00302054

08003864 <DrawZoomChart_Int>:

// 放大图表绘制函数
void DrawZoomChart_Int(uint8_t idx) {
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800386a:	af04      	add	r7, sp, #16
 800386c:	4602      	mov	r2, r0
 800386e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003872:	f2a3 23a1 	subw	r3, r3, #673	@ 0x2a1
 8003876:	701a      	strb	r2, [r3, #0]
    uint32_t dl_addr = RAM_DL;
 8003878:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800387c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    FT812_WriteReg32(dl_addr, CLEAR_COLOR_RGB(250,250,250)); dl_addr += 4;
 8003880:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003884:	4982      	ldr	r1, [pc, #520]	@ (8003a90 <DrawZoomChart_Int+0x22c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd ff88 	bl	800179c <FT812_WriteReg32>
 800388c:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003890:	3304      	adds	r3, #4
 8003892:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, CLEAR(1,1,1)); dl_addr += 4;
 8003896:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800389a:	497e      	ldr	r1, [pc, #504]	@ (8003a94 <DrawZoomChart_Int+0x230>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7fd ff7d 	bl	800179c <FT812_WriteReg32>
 80038a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80038a6:	3304      	adds	r3, #4
 80038a8:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    UpdateRealTimeData(idx - 1);
 80038ac:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80038b0:	f2a3 23a1 	subw	r3, r3, #673	@ 0x2a1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fec6 	bl	800264c <UpdateRealTimeData>

    ChartConfig_Int configs[3] = {
 80038c0:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <DrawZoomChart_Int+0x234>)
 80038c2:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80038c6:	4b75      	ldr	r3, [pc, #468]	@ (8003a9c <DrawZoomChart_Int+0x238>)
 80038c8:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80038cc:	4b74      	ldr	r3, [pc, #464]	@ (8003aa0 <DrawZoomChart_Int+0x23c>)
 80038ce:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        {"Flow Rate Monitor", "Time (seconds)", "(L/min)",
         chart_settings[0].x_min, chart_settings[0].x_max,
 80038d2:	4b74      	ldr	r3, [pc, #464]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 80038d4:	685b      	ldr	r3, [r3, #4]
    ChartConfig_Int configs[3] = {
 80038d6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
         chart_settings[0].x_min, chart_settings[0].x_max,
 80038da:	4b72      	ldr	r3, [pc, #456]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
    ChartConfig_Int configs[3] = {
 80038de:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
         chart_settings[0].y_min, chart_settings[0].y_max, 10, 10, 1, 2},
 80038e2:	4b70      	ldr	r3, [pc, #448]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 80038e4:	68db      	ldr	r3, [r3, #12]
    ChartConfig_Int configs[3] = {
 80038e6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
         chart_settings[0].y_min, chart_settings[0].y_max, 10, 10, 1, 2},
 80038ea:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 80038ec:	691b      	ldr	r3, [r3, #16]
    ChartConfig_Int configs[3] = {
 80038ee:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80038f2:	230a      	movs	r3, #10
 80038f4:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 80038f8:	230a      	movs	r3, #10
 80038fa:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
 8003904:	2302      	movs	r3, #2
 8003906:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
 800390a:	4b67      	ldr	r3, [pc, #412]	@ (8003aa8 <DrawZoomChart_Int+0x244>)
 800390c:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8003910:	4b62      	ldr	r3, [pc, #392]	@ (8003a9c <DrawZoomChart_Int+0x238>)
 8003912:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8003916:	4b65      	ldr	r3, [pc, #404]	@ (8003aac <DrawZoomChart_Int+0x248>)
 8003918:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        {"Dissolved Oxygen Monitor", "Time (seconds)", "(mg/L)",
         chart_settings[1].x_min, chart_settings[1].x_max,
 800391c:	4b61      	ldr	r3, [pc, #388]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 800391e:	699b      	ldr	r3, [r3, #24]
    ChartConfig_Int configs[3] = {
 8003920:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
         chart_settings[1].x_min, chart_settings[1].x_max,
 8003924:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 8003926:	69db      	ldr	r3, [r3, #28]
    ChartConfig_Int configs[3] = {
 8003928:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
         chart_settings[1].y_min, chart_settings[1].y_max, 10, 10, 1, 0},
 800392c:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
    ChartConfig_Int configs[3] = {
 8003930:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
         chart_settings[1].y_min, chart_settings[1].y_max, 10, 10, 1, 0},
 8003934:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    ChartConfig_Int configs[3] = {
 8003938:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800393c:	230a      	movs	r3, #10
 800393e:	f887 3274 	strb.w	r3, [r7, #628]	@ 0x274
 8003942:	230a      	movs	r3, #10
 8003944:	f887 3275 	strb.w	r3, [r7, #629]	@ 0x275
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3276 	strb.w	r3, [r7, #630]	@ 0x276
 800394e:	2300      	movs	r3, #0
 8003950:	f887 3277 	strb.w	r3, [r7, #631]	@ 0x277
 8003954:	4b56      	ldr	r3, [pc, #344]	@ (8003ab0 <DrawZoomChart_Int+0x24c>)
 8003956:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 800395a:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <DrawZoomChart_Int+0x238>)
 800395c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8003960:	4b54      	ldr	r3, [pc, #336]	@ (8003ab4 <DrawZoomChart_Int+0x250>)
 8003962:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
        {"Temperature Monitor", "Time (seconds)", "(C)",
         chart_settings[2].x_min, chart_settings[2].x_max,
 8003966:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 8003968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    ChartConfig_Int configs[3] = {
 800396a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
         chart_settings[2].x_min, chart_settings[2].x_max,
 800396e:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    ChartConfig_Int configs[3] = {
 8003972:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
         chart_settings[2].y_min, chart_settings[2].y_max, 10, 10, 1, 2}
 8003976:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 8003978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    ChartConfig_Int configs[3] = {
 800397a:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
         chart_settings[2].y_min, chart_settings[2].y_max, 10, 10, 1, 2}
 800397e:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <DrawZoomChart_Int+0x240>)
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    ChartConfig_Int configs[3] = {
 8003982:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8003986:	230a      	movs	r3, #10
 8003988:	f887 3294 	strb.w	r3, [r7, #660]	@ 0x294
 800398c:	230a      	movs	r3, #10
 800398e:	f887 3295 	strb.w	r3, [r7, #661]	@ 0x295
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
 8003998:	2302      	movs	r3, #2
 800399a:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
    };

    Rect large_chart = {20, 70, 460, 230};
 800399e:	4a46      	ldr	r2, [pc, #280]	@ (8003ab8 <DrawZoomChart_Int+0x254>)
 80039a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80039a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a8:	e883 0003 	stmia.w	r3, {r0, r1}

    DataPoint_Int data[50];
    GetRealTimeDisplayData(idx - 1, data, 50);
 80039ac:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80039b0:	f2a3 23a1 	subw	r3, r3, #673	@ 0x2a1
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80039be:	2232      	movs	r2, #50	@ 0x32
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe ff29 	bl	8002818 <GetRealTimeDisplayData>

    DrawDetailedChart_Int(&dl_addr, large_chart, &configs[idx-1], data, 50, idx-1);
 80039c6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80039ca:	f2a3 23a1 	subw	r3, r3, #673	@ 0x2a1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 80039d6:	015b      	lsls	r3, r3, #5
 80039d8:	441a      	add	r2, r3
 80039da:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80039de:	f2a3 23a1 	subw	r3, r3, #673	@ 0x2a1
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 80039ec:	9302      	str	r3, [sp, #8]
 80039ee:	2332      	movs	r3, #50	@ 0x32
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80039fe:	ca06      	ldmia	r2, {r1, r2}
 8003a00:	f7ff f840 	bl	8002a84 <DrawDetailedChart_Int>

    // 添加时间状态显示
    FT812_WriteReg32(dl_addr, COLOR_RGB(100, 100, 100)); dl_addr += 4;
 8003a04:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003a08:	492c      	ldr	r1, [pc, #176]	@ (8003abc <DrawZoomChart_Int+0x258>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd fec6 	bl	800179c <FT812_WriteReg32>
 8003a10:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003a14:	3304      	adds	r3, #4
 8003a16:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 8003a1a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003a1e:	4928      	ldr	r1, [pc, #160]	@ (8003ac0 <DrawZoomChart_Int+0x25c>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd febb 	bl	800179c <FT812_WriteReg32>
 8003a26:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    RealTimeDataBuffer* buffer = &chart_buffers[idx - 1];
 8003a30:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003a34:	f2a3 23a1 	subw	r3, r3, #673	@ 0x2a1
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <DrawZoomChart_Int+0x260>)
 8003a46:	4413      	add	r3, r2
 8003a48:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
    char status_text[50];
    uint32_t elapsed_ms = HAL_GetTick() - buffer->start_time;
 8003a4c:	f001 ff08 	bl	8005860 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8003a56:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
    uint32_t elapsed_sec = elapsed_ms / 1000;
 8003a60:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8003a64:	4a18      	ldr	r2, [pc, #96]	@ (8003ac8 <DrawZoomChart_Int+0x264>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c

    if(buffer->is_scrolling) {
 8003a70:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8003a74:	f893 3298 	ldrb.w	r3, [r3, #664]	@ 0x298
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d029      	beq.n	8003ad0 <DrawZoomChart_Int+0x26c>
        sprintf(status_text, "Scrolling Mode - Runtime: %lds", elapsed_sec);
 8003a7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a80:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8003a84:	4911      	ldr	r1, [pc, #68]	@ (8003acc <DrawZoomChart_Int+0x268>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f005 fe0e 	bl	80096a8 <siprintf>
 8003a8c:	e028      	b.n	8003ae0 <DrawZoomChart_Int+0x27c>
 8003a8e:	bf00      	nop
 8003a90:	02fafafa 	.word	0x02fafafa
 8003a94:	26000007 	.word	0x26000007
 8003a98:	0800bc64 	.word	0x0800bc64
 8003a9c:	0800bc78 	.word	0x0800bc78
 8003aa0:	0800bc10 	.word	0x0800bc10
 8003aa4:	20000290 	.word	0x20000290
 8003aa8:	0800bc88 	.word	0x0800bc88
 8003aac:	0800bc18 	.word	0x0800bc18
 8003ab0:	0800bca4 	.word	0x0800bca4
 8003ab4:	0800bc20 	.word	0x0800bc20
 8003ab8:	0800bd0c 	.word	0x0800bd0c
 8003abc:	04646464 	.word	0x04646464
 8003ac0:	1f000001 	.word	0x1f000001
 8003ac4:	20000508 	.word	0x20000508
 8003ac8:	10624dd3 	.word	0x10624dd3
 8003acc:	0800bcb8 	.word	0x0800bcb8
    } else {
        sprintf(status_text, "Filling Mode - Runtime: %lds", elapsed_sec);
 8003ad0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ad4:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8003ad8:	49e2      	ldr	r1, [pc, #904]	@ (8003e64 <DrawZoomChart_Int+0x600>)
 8003ada:	4618      	mov	r0, r3
 8003adc:	f005 fde4 	bl	80096a8 <siprintf>
    }

    DrawString_Proportional(&dl_addr, 25, 50, 20, status_text, 0);
 8003ae0:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2314      	movs	r3, #20
 8003af0:	2232      	movs	r2, #50	@ 0x32
 8003af2:	2119      	movs	r1, #25
 8003af4:	f7fe f87c 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 8003af8:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003afc:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fe4b 	bl	800179c <FT812_WriteReg32>
 8003b06:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    // 绘制控制按钮
    FT812_WriteReg32(dl_addr, COLOR_RGB(150,150,200)); dl_addr += 4;
 8003b10:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003b14:	49d4      	ldr	r1, [pc, #848]	@ (8003e68 <DrawZoomChart_Int+0x604>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fe40 	bl	800179c <FT812_WriteReg32>
 8003b1c:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003b20:	3304      	adds	r3, #4
 8003b22:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, BEGIN(RECTS)); dl_addr += 4;
 8003b26:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003b2a:	49d0      	ldr	r1, [pc, #832]	@ (8003e6c <DrawZoomChart_Int+0x608>)
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd fe35 	bl	800179c <FT812_WriteReg32>
 8003b32:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003b36:	3304      	adds	r3, #4
 8003b38:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, VERTEX2II(BTN_SETTING.x1,BTN_SETTING.y1,0,0)); dl_addr += 4;
 8003b3c:	f8d7 4298 	ldr.w	r4, [r7, #664]	@ 0x298
 8003b40:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003b44:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003b48:	4ac9      	ldr	r2, [pc, #804]	@ (8003e70 <DrawZoomChart_Int+0x60c>)
 8003b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b52:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003b56:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	055b      	lsls	r3, r3, #21
 8003b5e:	4ac5      	ldr	r2, [pc, #788]	@ (8003e74 <DrawZoomChart_Int+0x610>)
 8003b60:	401a      	ands	r2, r3
 8003b62:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003b66:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003b6a:	49c1      	ldr	r1, [pc, #772]	@ (8003e70 <DrawZoomChart_Int+0x60c>)
 8003b6c:	c903      	ldmia	r1, {r0, r1}
 8003b6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b72:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003b76:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003b7a:	885b      	ldrh	r3, [r3, #2]
 8003b7c:	0319      	lsls	r1, r3, #12
 8003b7e:	4bbe      	ldr	r3, [pc, #760]	@ (8003e78 <DrawZoomChart_Int+0x614>)
 8003b80:	400b      	ands	r3, r1
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7fd fe06 	bl	800179c <FT812_WriteReg32>
 8003b90:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003b94:	3304      	adds	r3, #4
 8003b96:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, VERTEX2II(BTN_SETTING.x2,BTN_SETTING.y2,0,0)); dl_addr += 4;
 8003b9a:	f8d7 4298 	ldr.w	r4, [r7, #664]	@ 0x298
 8003b9e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003ba2:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003ba6:	4ab2      	ldr	r2, [pc, #712]	@ (8003e70 <DrawZoomChart_Int+0x60c>)
 8003ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bac:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bb0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003bb4:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	055b      	lsls	r3, r3, #21
 8003bbc:	4aad      	ldr	r2, [pc, #692]	@ (8003e74 <DrawZoomChart_Int+0x610>)
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003bc4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003bc8:	49a9      	ldr	r1, [pc, #676]	@ (8003e70 <DrawZoomChart_Int+0x60c>)
 8003bca:	c903      	ldmia	r1, {r0, r1}
 8003bcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bd0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003bd4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003bd8:	88db      	ldrh	r3, [r3, #6]
 8003bda:	0319      	lsls	r1, r3, #12
 8003bdc:	4ba6      	ldr	r3, [pc, #664]	@ (8003e78 <DrawZoomChart_Int+0x614>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003be6:	4619      	mov	r1, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd fdd7 	bl	800179c <FT812_WriteReg32>
 8003bee:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 8003bf8:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003bfc:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd fdcb 	bl	800179c <FT812_WriteReg32>
 8003c06:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    FT812_WriteReg32(dl_addr, COLOR_RGB(0,0,0)); dl_addr += 4;
 8003c10:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003c14:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fdbf 	bl	800179c <FT812_WriteReg32>
 8003c1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003c22:	3304      	adds	r3, #4
 8003c24:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 8003c28:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003c2c:	4993      	ldr	r1, [pc, #588]	@ (8003e7c <DrawZoomChart_Int+0x618>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fdb4 	bl	800179c <FT812_WriteReg32>
 8003c34:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003c38:	3304      	adds	r3, #4
 8003c3a:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    DrawString_Proportional(&dl_addr, BTN_SETTING.x1+10, BTN_SETTING.y1+12, 26, "Settings", 0);
 8003c3e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003c42:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003c46:	4a8a      	ldr	r2, [pc, #552]	@ (8003e70 <DrawZoomChart_Int+0x60c>)
 8003c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c50:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003c54:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	f103 040a 	add.w	r4, r3, #10
 8003c5e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003c62:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8003c66:	4a82      	ldr	r2, [pc, #520]	@ (8003e70 <DrawZoomChart_Int+0x60c>)
 8003c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c70:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003c74:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8003c78:	885b      	ldrh	r3, [r3, #2]
 8003c7a:	f103 020c 	add.w	r2, r3, #12
 8003c7e:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 8003c82:	2300      	movs	r3, #0
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	4b7e      	ldr	r3, [pc, #504]	@ (8003e80 <DrawZoomChart_Int+0x61c>)
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	231a      	movs	r3, #26
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	f7fd ffaf 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 8003c92:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003c96:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fd7e 	bl	800179c <FT812_WriteReg32>
 8003ca0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    FT812_WriteReg32(dl_addr, COLOR_RGB(200,220,180)); dl_addr += 4;
 8003caa:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003cae:	4975      	ldr	r1, [pc, #468]	@ (8003e84 <DrawZoomChart_Int+0x620>)
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fd fd73 	bl	800179c <FT812_WriteReg32>
 8003cb6:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003cba:	3304      	adds	r3, #4
 8003cbc:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, BEGIN(RECTS)); dl_addr += 4;
 8003cc0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003cc4:	4969      	ldr	r1, [pc, #420]	@ (8003e6c <DrawZoomChart_Int+0x608>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fd68 	bl	800179c <FT812_WriteReg32>
 8003ccc:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, VERTEX2II(BTN_CONFIRM.x1,BTN_CONFIRM.y1,0,0)); dl_addr += 4;
 8003cd6:	f8d7 4298 	ldr.w	r4, [r7, #664]	@ 0x298
 8003cda:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003cde:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8003ce2:	4a69      	ldr	r2, [pc, #420]	@ (8003e88 <DrawZoomChart_Int+0x624>)
 8003ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce8:	e883 0003 	stmia.w	r3, {r0, r1}
 8003cec:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003cf0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	055b      	lsls	r3, r3, #21
 8003cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e74 <DrawZoomChart_Int+0x610>)
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d00:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003d04:	4960      	ldr	r1, [pc, #384]	@ (8003e88 <DrawZoomChart_Int+0x624>)
 8003d06:	c903      	ldmia	r1, {r0, r1}
 8003d08:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d0c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d10:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003d14:	885b      	ldrh	r3, [r3, #2]
 8003d16:	0319      	lsls	r1, r3, #12
 8003d18:	4b57      	ldr	r3, [pc, #348]	@ (8003e78 <DrawZoomChart_Int+0x614>)
 8003d1a:	400b      	ands	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d22:	4619      	mov	r1, r3
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7fd fd39 	bl	800179c <FT812_WriteReg32>
 8003d2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003d2e:	3304      	adds	r3, #4
 8003d30:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, VERTEX2II(BTN_CONFIRM.x2,BTN_CONFIRM.y2,0,0)); dl_addr += 4;
 8003d34:	f8d7 4298 	ldr.w	r4, [r7, #664]	@ 0x298
 8003d38:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d3c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8003d40:	4a51      	ldr	r2, [pc, #324]	@ (8003e88 <DrawZoomChart_Int+0x624>)
 8003d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d46:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d4a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d4e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8003d52:	889b      	ldrh	r3, [r3, #4]
 8003d54:	055b      	lsls	r3, r3, #21
 8003d56:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <DrawZoomChart_Int+0x610>)
 8003d58:	401a      	ands	r2, r3
 8003d5a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d5e:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8003d62:	4949      	ldr	r1, [pc, #292]	@ (8003e88 <DrawZoomChart_Int+0x624>)
 8003d64:	c903      	ldmia	r1, {r0, r1}
 8003d66:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d6a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003d6e:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8003d72:	88db      	ldrh	r3, [r3, #6]
 8003d74:	0319      	lsls	r1, r3, #12
 8003d76:	4b40      	ldr	r3, [pc, #256]	@ (8003e78 <DrawZoomChart_Int+0x614>)
 8003d78:	400b      	ands	r3, r1
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d80:	4619      	mov	r1, r3
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7fd fd0a 	bl	800179c <FT812_WriteReg32>
 8003d88:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 8003d92:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003d96:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fcfe 	bl	800179c <FT812_WriteReg32>
 8003da0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003da4:	3304      	adds	r3, #4
 8003da6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    FT812_WriteReg32(dl_addr, COLOR_RGB(0,0,0)); dl_addr += 4;
 8003daa:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003dae:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fcf2 	bl	800179c <FT812_WriteReg32>
 8003db8:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 8003dc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003dc6:	492d      	ldr	r1, [pc, #180]	@ (8003e7c <DrawZoomChart_Int+0x618>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd fce7 	bl	800179c <FT812_WriteReg32>
 8003dce:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    DrawString_Proportional(&dl_addr, BTN_CONFIRM.x1+10, BTN_CONFIRM.y1+12, 26, "Back", 0);
 8003dd8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003ddc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003de0:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <DrawZoomChart_Int+0x624>)
 8003de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003de6:	e883 0003 	stmia.w	r3, {r0, r1}
 8003dea:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003dee:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	f103 040a 	add.w	r4, r3, #10
 8003df8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003dfc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8003e00:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <DrawZoomChart_Int+0x624>)
 8003e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e06:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e0a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8003e0e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8003e12:	885b      	ldrh	r3, [r3, #2]
 8003e14:	f103 020c 	add.w	r2, r3, #12
 8003e18:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4b1a      	ldr	r3, [pc, #104]	@ (8003e8c <DrawZoomChart_Int+0x628>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	231a      	movs	r3, #26
 8003e26:	4621      	mov	r1, r4
 8003e28:	f7fd fee2 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 8003e2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003e30:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd fcb1 	bl	800179c <FT812_WriteReg32>
 8003e3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003e3e:	3304      	adds	r3, #4
 8003e40:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

    FT812_WriteReg32(dl_addr, DISPLAY());
 8003e44:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd fca6 	bl	800179c <FT812_WriteReg32>
    FT812_WriteByte(REG_DLSWAP, DLSWAP_FRAME);
 8003e50:	2102      	movs	r1, #2
 8003e52:	480f      	ldr	r0, [pc, #60]	@ (8003e90 <DrawZoomChart_Int+0x62c>)
 8003e54:	f7fd fc5c 	bl	8001710 <FT812_WriteByte>
}
 8003e58:	bf00      	nop
 8003e5a:	f507 772b 	add.w	r7, r7, #684	@ 0x2ac
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	bf00      	nop
 8003e64:	0800bcd8 	.word	0x0800bcd8
 8003e68:	049696c8 	.word	0x049696c8
 8003e6c:	1f000009 	.word	0x1f000009
 8003e70:	0800bd14 	.word	0x0800bd14
 8003e74:	3fe00000 	.word	0x3fe00000
 8003e78:	001ff000 	.word	0x001ff000
 8003e7c:	1f000001 	.word	0x1f000001
 8003e80:	0800bcf8 	.word	0x0800bcf8
 8003e84:	04c8dcb4 	.word	0x04c8dcb4
 8003e88:	0800bd1c 	.word	0x0800bd1c
 8003e8c:	0800bd04 	.word	0x0800bd04
 8003e90:	00302054 	.word	0x00302054

08003e94 <DrawKeypad>:

// Settings界面相关函数
void DrawKeypad(uint32_t* dl_addr) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 12; i++) {
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e1a4      	b.n	80041ec <DrawKeypad+0x358>
        int row = i / 3;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	4ab3      	ldr	r2, [pc, #716]	@ (8004174 <DrawKeypad+0x2e0>)
 8003ea6:	fb82 1203 	smull	r1, r2, r2, r3
 8003eaa:	17db      	asrs	r3, r3, #31
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	613b      	str	r3, [r7, #16]
        int col = i % 3;
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4bb0      	ldr	r3, [pc, #704]	@ (8004174 <DrawKeypad+0x2e0>)
 8003eb4:	fb83 3102 	smull	r3, r1, r3, r2
 8003eb8:	17d3      	asrs	r3, r2, #31
 8003eba:	1ac9      	subs	r1, r1, r3
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	440b      	add	r3, r1
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]

        int16_t x = KEYPAD_X_START + col * (KEY_WIDTH + KEY_SPACING);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	00d2      	lsls	r2, r2, #3
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	0092      	lsls	r2, r2, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	817b      	strh	r3, [r7, #10]
        int16_t y = KEYPAD_Y_START + row * (KEY_HEIGHT + KEY_SPACING);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	0052      	lsls	r2, r2, #1
 8003ee8:	441a      	add	r2, r3
 8003eea:	4611      	mov	r1, r2
 8003eec:	00c9      	lsls	r1, r1, #3
 8003eee:	1a8a      	subs	r2, r1, r2
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3350      	adds	r3, #80	@ 0x50
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	813b      	strh	r3, [r7, #8]

        FT812_WriteReg32(*dl_addr, COLOR_RGB(200, 200, 200)); *dl_addr += 4;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	499d      	ldr	r1, [pc, #628]	@ (8004178 <DrawKeypad+0x2e4>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fc4a 	bl	800179c <FT812_WriteReg32>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	1d1a      	adds	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(RECTS)); *dl_addr += 4;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4999      	ldr	r1, [pc, #612]	@ (800417c <DrawKeypad+0x2e8>)
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd fc3f 	bl	800179c <FT812_WriteReg32>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, y, 0, 0)); *dl_addr += 4;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	897b      	ldrh	r3, [r7, #10]
 8003f2e:	055b      	lsls	r3, r3, #21
 8003f30:	4a93      	ldr	r2, [pc, #588]	@ (8004180 <DrawKeypad+0x2ec>)
 8003f32:	401a      	ands	r2, r3
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	0319      	lsls	r1, r3, #12
 8003f38:	4b92      	ldr	r3, [pc, #584]	@ (8004184 <DrawKeypad+0x2f0>)
 8003f3a:	400b      	ands	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f42:	4619      	mov	r1, r3
 8003f44:	f7fd fc2a 	bl	800179c <FT812_WriteReg32>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x + KEY_WIDTH, y + KEY_HEIGHT, 0, 0)); *dl_addr += 4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f5a:	3332      	adds	r3, #50	@ 0x32
 8003f5c:	055b      	lsls	r3, r3, #21
 8003f5e:	4a88      	ldr	r2, [pc, #544]	@ (8004180 <DrawKeypad+0x2ec>)
 8003f60:	401a      	ands	r2, r3
 8003f62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003f66:	3323      	adds	r3, #35	@ 0x23
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4b85      	ldr	r3, [pc, #532]	@ (8004184 <DrawKeypad+0x2f0>)
 8003f6e:	400b      	ands	r3, r1
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f76:	4619      	mov	r1, r3
 8003f78:	f7fd fc10 	bl	800179c <FT812_WriteReg32>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	1d1a      	adds	r2, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fc04 	bl	800179c <FT812_WriteReg32>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]

        FT812_WriteReg32(*dl_addr, COLOR_RGB(100, 100, 100)); *dl_addr += 4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4979      	ldr	r1, [pc, #484]	@ (8004188 <DrawKeypad+0x2f4>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fbf9 	bl	800179c <FT812_WriteReg32>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(LINES)); *dl_addr += 4;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4974      	ldr	r1, [pc, #464]	@ (800418c <DrawKeypad+0x2f8>)
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fd fbee 	bl	800179c <FT812_WriteReg32>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1d1a      	adds	r2, r3, #4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, y, 0, 0)); *dl_addr += 4;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	897b      	ldrh	r3, [r7, #10]
 8003fd0:	055b      	lsls	r3, r3, #21
 8003fd2:	4a6b      	ldr	r2, [pc, #428]	@ (8004180 <DrawKeypad+0x2ec>)
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	893b      	ldrh	r3, [r7, #8]
 8003fd8:	0319      	lsls	r1, r3, #12
 8003fda:	4b6a      	ldr	r3, [pc, #424]	@ (8004184 <DrawKeypad+0x2f0>)
 8003fdc:	400b      	ands	r3, r1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fd fbd9 	bl	800179c <FT812_WriteReg32>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1d1a      	adds	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x + KEY_WIDTH, y, 0, 0)); *dl_addr += 4;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ffc:	3332      	adds	r3, #50	@ 0x32
 8003ffe:	055b      	lsls	r3, r3, #21
 8004000:	4a5f      	ldr	r2, [pc, #380]	@ (8004180 <DrawKeypad+0x2ec>)
 8004002:	401a      	ands	r2, r3
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	0319      	lsls	r1, r3, #12
 8004008:	4b5e      	ldr	r3, [pc, #376]	@ (8004184 <DrawKeypad+0x2f0>)
 800400a:	400b      	ands	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004012:	4619      	mov	r1, r3
 8004014:	f7fd fbc2 	bl	800179c <FT812_WriteReg32>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x + KEY_WIDTH, y, 0, 0)); *dl_addr += 4;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800402a:	3332      	adds	r3, #50	@ 0x32
 800402c:	055b      	lsls	r3, r3, #21
 800402e:	4a54      	ldr	r2, [pc, #336]	@ (8004180 <DrawKeypad+0x2ec>)
 8004030:	401a      	ands	r2, r3
 8004032:	893b      	ldrh	r3, [r7, #8]
 8004034:	0319      	lsls	r1, r3, #12
 8004036:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <DrawKeypad+0x2f0>)
 8004038:	400b      	ands	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004040:	4619      	mov	r1, r3
 8004042:	f7fd fbab 	bl	800179c <FT812_WriteReg32>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x + KEY_WIDTH, y + KEY_HEIGHT, 0, 0)); *dl_addr += 4;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004058:	3332      	adds	r3, #50	@ 0x32
 800405a:	055b      	lsls	r3, r3, #21
 800405c:	4a48      	ldr	r2, [pc, #288]	@ (8004180 <DrawKeypad+0x2ec>)
 800405e:	401a      	ands	r2, r3
 8004060:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004064:	3323      	adds	r3, #35	@ 0x23
 8004066:	031b      	lsls	r3, r3, #12
 8004068:	4619      	mov	r1, r3
 800406a:	4b46      	ldr	r3, [pc, #280]	@ (8004184 <DrawKeypad+0x2f0>)
 800406c:	400b      	ands	r3, r1
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004074:	4619      	mov	r1, r3
 8004076:	f7fd fb91 	bl	800179c <FT812_WriteReg32>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x + KEY_WIDTH, y + KEY_HEIGHT, 0, 0)); *dl_addr += 4;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800408c:	3332      	adds	r3, #50	@ 0x32
 800408e:	055b      	lsls	r3, r3, #21
 8004090:	4a3b      	ldr	r2, [pc, #236]	@ (8004180 <DrawKeypad+0x2ec>)
 8004092:	401a      	ands	r2, r3
 8004094:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004098:	3323      	adds	r3, #35	@ 0x23
 800409a:	031b      	lsls	r3, r3, #12
 800409c:	4619      	mov	r1, r3
 800409e:	4b39      	ldr	r3, [pc, #228]	@ (8004184 <DrawKeypad+0x2f0>)
 80040a0:	400b      	ands	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fd fb77 	bl	800179c <FT812_WriteReg32>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, y + KEY_HEIGHT, 0, 0)); *dl_addr += 4;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	055b      	lsls	r3, r3, #21
 80040c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004180 <DrawKeypad+0x2ec>)
 80040c2:	401a      	ands	r2, r3
 80040c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80040c8:	3323      	adds	r3, #35	@ 0x23
 80040ca:	031b      	lsls	r3, r3, #12
 80040cc:	4619      	mov	r1, r3
 80040ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004184 <DrawKeypad+0x2f0>)
 80040d0:	400b      	ands	r3, r1
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fd fb5f 	bl	800179c <FT812_WriteReg32>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, y + KEY_HEIGHT, 0, 0)); *dl_addr += 4;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	055b      	lsls	r3, r3, #21
 80040f0:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <DrawKeypad+0x2ec>)
 80040f2:	401a      	ands	r2, r3
 80040f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80040f8:	3323      	adds	r3, #35	@ 0x23
 80040fa:	031b      	lsls	r3, r3, #12
 80040fc:	4619      	mov	r1, r3
 80040fe:	4b21      	ldr	r3, [pc, #132]	@ (8004184 <DrawKeypad+0x2f0>)
 8004100:	400b      	ands	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004108:	4619      	mov	r1, r3
 800410a:	f7fd fb47 	bl	800179c <FT812_WriteReg32>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, VERTEX2II(x, y, 0, 0)); *dl_addr += 4;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	897b      	ldrh	r3, [r7, #10]
 800411e:	055b      	lsls	r3, r3, #21
 8004120:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <DrawKeypad+0x2ec>)
 8004122:	401a      	ands	r2, r3
 8004124:	893b      	ldrh	r3, [r7, #8]
 8004126:	0319      	lsls	r1, r3, #12
 8004128:	4b16      	ldr	r3, [pc, #88]	@ (8004184 <DrawKeypad+0x2f0>)
 800412a:	400b      	ands	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004132:	4619      	mov	r1, r3
 8004134:	f7fd fb32 	bl	800179c <FT812_WriteReg32>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fb26 	bl	800179c <FT812_WriteReg32>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]

        FT812_WriteReg32(*dl_addr, COLOR_RGB(0, 0, 0)); *dl_addr += 4;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8004162:	4618      	mov	r0, r3
 8004164:	f7fd fb1a 	bl	800179c <FT812_WriteReg32>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	1d1a      	adds	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	e00e      	b.n	8004190 <DrawKeypad+0x2fc>
 8004172:	bf00      	nop
 8004174:	55555556 	.word	0x55555556
 8004178:	04c8c8c8 	.word	0x04c8c8c8
 800417c:	1f000009 	.word	0x1f000009
 8004180:	3fe00000 	.word	0x3fe00000
 8004184:	001ff000 	.word	0x001ff000
 8004188:	04646464 	.word	0x04646464
 800418c:	1f000003 	.word	0x1f000003
 8004190:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	491a      	ldr	r1, [pc, #104]	@ (8004200 <DrawKeypad+0x36c>)
 8004198:	4618      	mov	r0, r3
 800419a:	f7fd faff 	bl	800179c <FT812_WriteReg32>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	601a      	str	r2, [r3, #0]
        DrawString_Proportional(dl_addr, x + KEY_WIDTH/2, y + KEY_HEIGHT/2 - 8, 28, keypad_labels[i], 1);
 80041a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041ac:	f103 0119 	add.w	r1, r3, #25
 80041b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80041b4:	f103 0209 	add.w	r2, r3, #9
 80041b8:	4812      	ldr	r0, [pc, #72]	@ (8004204 <DrawKeypad+0x370>)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041c0:	2001      	movs	r0, #1
 80041c2:	9001      	str	r0, [sp, #4]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	231c      	movs	r3, #28
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fd fd11 	bl	8001bf0 <DrawString_Proportional>
        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd fae0 	bl	800179c <FT812_WriteReg32>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	3301      	adds	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b0b      	cmp	r3, #11
 80041f0:	f77f ae57 	ble.w	8003ea2 <DrawKeypad+0xe>
    }
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	1f000001 	.word	0x1f000001
 8004204:	2000000c 	.word	0x2000000c

08004208 <DrawParameterSettings>:

void DrawParameterSettings(uint32_t* dl_addr) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	@ 0x30
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
    FT812_WriteReg32(*dl_addr, COLOR_RGB(0, 0, 100)); *dl_addr += 4;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	49a2      	ldr	r1, [pc, #648]	@ (80044a0 <DrawParameterSettings+0x298>)
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fac0 	bl	800179c <FT812_WriteReg32>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1d1a      	adds	r2, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
    FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	499e      	ldr	r1, [pc, #632]	@ (80044a4 <DrawParameterSettings+0x29c>)
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd fab5 	bl	800179c <FT812_WriteReg32>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
    DrawString_Proportional(dl_addr, PARAM_X_START, 20, 26, chart_names[current_chart_setting], 0);
 800423c:	4b9a      	ldr	r3, [pc, #616]	@ (80044a8 <DrawParameterSettings+0x2a0>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b9a      	ldr	r3, [pc, #616]	@ (80044ac <DrawParameterSettings+0x2a4>)
 8004244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004248:	2200      	movs	r2, #0
 800424a:	9201      	str	r2, [sp, #4]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	231a      	movs	r3, #26
 8004250:	2214      	movs	r2, #20
 8004252:	2114      	movs	r1, #20
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fd fccb 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fa9a 	bl	800179c <FT812_WriteReg32>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1d1a      	adds	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 5; i++) {
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
 8004276:	e109      	b.n	800448c <DrawParameterSettings+0x284>
        int16_t y = PARAM_Y_START + i * PARAM_SPACING;
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	b29b      	uxth	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4413      	add	r3, r2
 8004282:	461a      	mov	r2, r3
 8004284:	00d2      	lsls	r2, r2, #3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	b29b      	uxth	r3, r3
 800428a:	3350      	adds	r3, #80	@ 0x50
 800428c:	b29b      	uxth	r3, r3
 800428e:	83fb      	strh	r3, [r7, #30]

        if (i == current_param) {
 8004290:	4b87      	ldr	r3, [pc, #540]	@ (80044b0 <DrawParameterSettings+0x2a8>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	4293      	cmp	r3, r2
 800429a:	d14d      	bne.n	8004338 <DrawParameterSettings+0x130>
            FT812_WriteReg32(*dl_addr, COLOR_RGB(255, 255, 200)); *dl_addr += 4;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4984      	ldr	r1, [pc, #528]	@ (80044b4 <DrawParameterSettings+0x2ac>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fa7a 	bl	800179c <FT812_WriteReg32>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1d1a      	adds	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, BEGIN(RECTS)); *dl_addr += 4;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4980      	ldr	r1, [pc, #512]	@ (80044b8 <DrawParameterSettings+0x2b0>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd fa6f 	bl	800179c <FT812_WriteReg32>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(PARAM_X_START - 5, y - 2, 0, 0)); *dl_addr += 4;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042d0:	3b02      	subs	r3, #2
 80042d2:	031b      	lsls	r3, r3, #12
 80042d4:	4619      	mov	r1, r3
 80042d6:	4b79      	ldr	r3, [pc, #484]	@ (80044bc <DrawParameterSettings+0x2b4>)
 80042d8:	400b      	ands	r3, r1
 80042da:	f043 4301 	orr.w	r3, r3, #2164260864	@ 0x81000000
 80042de:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7fd fa59 	bl	800179c <FT812_WriteReg32>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, VERTEX2II(PARAM_X_START + PARAM_WIDTH + 5, y + PARAM_HEIGHT + 2, 0, 0)); *dl_addr += 4;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042fc:	331b      	adds	r3, #27
 80042fe:	031b      	lsls	r3, r3, #12
 8004300:	4619      	mov	r1, r3
 8004302:	4b6e      	ldr	r3, [pc, #440]	@ (80044bc <DrawParameterSettings+0x2b4>)
 8004304:	400b      	ands	r3, r1
 8004306:	f043 4321 	orr.w	r3, r3, #2701131776	@ 0xa1000000
 800430a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7fd fa43 	bl	800179c <FT812_WriteReg32>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
            FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fa37 	bl	800179c <FT812_WriteReg32>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	601a      	str	r2, [r3, #0]
        }

        FT812_WriteReg32(*dl_addr, COLOR_RGB(0, 0, 0)); *dl_addr += 4;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8004340:	4618      	mov	r0, r3
 8004342:	f7fd fa2b 	bl	800179c <FT812_WriteReg32>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
        FT812_WriteReg32(*dl_addr, BEGIN(BITMAPS)); *dl_addr += 4;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4953      	ldr	r1, [pc, #332]	@ (80044a4 <DrawParameterSettings+0x29c>)
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fa20 	bl	800179c <FT812_WriteReg32>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1d1a      	adds	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
        DrawString_Proportional(dl_addr, PARAM_X_START, y, 20, param_names[i], 0);
 8004366:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800436a:	4955      	ldr	r1, [pc, #340]	@ (80044c0 <DrawParameterSettings+0x2b8>)
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004372:	2100      	movs	r1, #0
 8004374:	9101      	str	r1, [sp, #4]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2314      	movs	r3, #20
 800437a:	2114      	movs	r1, #20
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fd fc37 	bl	8001bf0 <DrawString_Proportional>

        char value_str[20];
        int32_t value;
        switch (i) {
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	2b04      	cmp	r3, #4
 8004386:	d84d      	bhi.n	8004424 <DrawParameterSettings+0x21c>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <DrawParameterSettings+0x188>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043a5 	.word	0x080043a5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	0800440b 	.word	0x0800440b
            case 0: value = chart_settings[current_chart_setting].target_value; break;
 80043a4:	4b40      	ldr	r3, [pc, #256]	@ (80044a8 <DrawParameterSettings+0x2a0>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	4a46      	ldr	r2, [pc, #280]	@ (80044c4 <DrawParameterSettings+0x2bc>)
 80043ac:	460b      	mov	r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	e033      	b.n	8004424 <DrawParameterSettings+0x21c>
            case 1: value = chart_settings[current_chart_setting].x_min; break;
 80043bc:	4b3a      	ldr	r3, [pc, #232]	@ (80044a8 <DrawParameterSettings+0x2a0>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	4a40      	ldr	r2, [pc, #256]	@ (80044c4 <DrawParameterSettings+0x2bc>)
 80043c4:	460b      	mov	r3, r1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	3304      	adds	r3, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	e026      	b.n	8004424 <DrawParameterSettings+0x21c>
            case 2: value = chart_settings[current_chart_setting].x_max; break;
 80043d6:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <DrawParameterSettings+0x2a0>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4a39      	ldr	r2, [pc, #228]	@ (80044c4 <DrawParameterSettings+0x2bc>)
 80043de:	460b      	mov	r3, r1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	3308      	adds	r3, #8
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	e019      	b.n	8004424 <DrawParameterSettings+0x21c>
            case 3: value = chart_settings[current_chart_setting].y_min; break;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <DrawParameterSettings+0x2a0>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4a33      	ldr	r2, [pc, #204]	@ (80044c4 <DrawParameterSettings+0x2bc>)
 80043f8:	460b      	mov	r3, r1
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	330c      	adds	r3, #12
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	e00c      	b.n	8004424 <DrawParameterSettings+0x21c>
            case 4: value = chart_settings[current_chart_setting].y_max; break;
 800440a:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <DrawParameterSettings+0x2a0>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <DrawParameterSettings+0x2bc>)
 8004412:	460b      	mov	r3, r1
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	3310      	adds	r3, #16
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	bf00      	nop
        }

        if (i == current_param && input_pos > 0) {
 8004424:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <DrawParameterSettings+0x2a8>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	4293      	cmp	r3, r2
 800442e:	d10b      	bne.n	8004448 <DrawParameterSettings+0x240>
 8004430:	4b25      	ldr	r3, [pc, #148]	@ (80044c8 <DrawParameterSettings+0x2c0>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <DrawParameterSettings+0x240>
            sprintf(value_str, "%s_", input_buffer);
 8004438:	f107 0308 	add.w	r3, r7, #8
 800443c:	4a23      	ldr	r2, [pc, #140]	@ (80044cc <DrawParameterSettings+0x2c4>)
 800443e:	4924      	ldr	r1, [pc, #144]	@ (80044d0 <DrawParameterSettings+0x2c8>)
 8004440:	4618      	mov	r0, r3
 8004442:	f005 f931 	bl	80096a8 <siprintf>
 8004446:	e006      	b.n	8004456 <DrawParameterSettings+0x24e>
        } else {
            IntToString(value_str, value, 2);
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	2202      	movs	r2, #2
 800444e:	6a39      	ldr	r1, [r7, #32]
 8004450:	4618      	mov	r0, r3
 8004452:	f7fd ff51 	bl	80022f8 <IntToString>
        }

        DrawString_Proportional(dl_addr, PARAM_X_START + 120, y, 20, value_str, 0);
 8004456:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800445a:	2300      	movs	r3, #0
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	f107 0308 	add.w	r3, r7, #8
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2314      	movs	r3, #20
 8004466:	218c      	movs	r1, #140	@ 0x8c
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fd fbc1 	bl	8001bf0 <DrawString_Proportional>
        FT812_WriteReg32(*dl_addr, END()); *dl_addr += 4;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd f990 	bl	800179c <FT812_WriteReg32>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	1d1a      	adds	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	3301      	adds	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	2b04      	cmp	r3, #4
 8004490:	f77f aef2 	ble.w	8004278 <DrawParameterSettings+0x70>
    }
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3728      	adds	r7, #40	@ 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	04000064 	.word	0x04000064
 80044a4:	1f000001 	.word	0x1f000001
 80044a8:	200002cc 	.word	0x200002cc
 80044ac:	20000050 	.word	0x20000050
 80044b0:	200002cd 	.word	0x200002cd
 80044b4:	04ffffc8 	.word	0x04ffffc8
 80044b8:	1f000009 	.word	0x1f000009
 80044bc:	001ff000 	.word	0x001ff000
 80044c0:	2000003c 	.word	0x2000003c
 80044c4:	20000290 	.word	0x20000290
 80044c8:	200002da 	.word	0x200002da
 80044cc:	200002d0 	.word	0x200002d0
 80044d0:	0800bd24 	.word	0x0800bd24

080044d4 <DrawSettingsUI>:

void DrawSettingsUI(void) {
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b095      	sub	sp, #84	@ 0x54
 80044d8:	af02      	add	r7, sp, #8
    uint32_t dl_addr = RAM_DL;
 80044da:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80044de:	647b      	str	r3, [r7, #68]	@ 0x44

    FT812_WriteReg32(dl_addr, CLEAR_COLOR_RGB(240, 240, 240)); dl_addr += 4;
 80044e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e2:	498a      	ldr	r1, [pc, #552]	@ (800470c <DrawSettingsUI+0x238>)
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd f959 	bl	800179c <FT812_WriteReg32>
 80044ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ec:	3304      	adds	r3, #4
 80044ee:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, CLEAR(1,1,1)); dl_addr += 4;
 80044f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f2:	4987      	ldr	r1, [pc, #540]	@ (8004710 <DrawSettingsUI+0x23c>)
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd f951 	bl	800179c <FT812_WriteReg32>
 80044fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fc:	3304      	adds	r3, #4
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44

    FT812_WriteReg32(dl_addr, COLOR_RGB(0, 0, 150)); dl_addr += 4;
 8004500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004502:	4984      	ldr	r1, [pc, #528]	@ (8004714 <DrawSettingsUI+0x240>)
 8004504:	4618      	mov	r0, r3
 8004506:	f7fd f949 	bl	800179c <FT812_WriteReg32>
 800450a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450c:	3304      	adds	r3, #4
 800450e:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 8004510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004512:	4981      	ldr	r1, [pc, #516]	@ (8004718 <DrawSettingsUI+0x244>)
 8004514:	4618      	mov	r0, r3
 8004516:	f7fd f941 	bl	800179c <FT812_WriteReg32>
 800451a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451c:	3304      	adds	r3, #4
 800451e:	647b      	str	r3, [r7, #68]	@ 0x44
    DrawString_Proportional(&dl_addr, BTN_SETTINGS_TITLE.x1, BTN_SETTINGS_TITLE.y1 + 10, 26, "Settings", 0);
 8004520:	4a7e      	ldr	r2, [pc, #504]	@ (800471c <DrawSettingsUI+0x248>)
 8004522:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800452a:	e883 0003 	stmia.w	r3, {r0, r1}
 800452e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004530:	461c      	mov	r4, r3
 8004532:	4a7a      	ldr	r2, [pc, #488]	@ (800471c <DrawSettingsUI+0x248>)
 8004534:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800453c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004540:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004542:	f103 020a 	add.w	r2, r3, #10
 8004546:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800454a:	2300      	movs	r3, #0
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	4b74      	ldr	r3, [pc, #464]	@ (8004720 <DrawSettingsUI+0x24c>)
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	231a      	movs	r3, #26
 8004554:	4621      	mov	r1, r4
 8004556:	f7fd fb4b 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 800455a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455c:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd f91b 	bl	800179c <FT812_WriteReg32>
 8004566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004568:	3304      	adds	r3, #4
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44

    FT812_WriteReg32(dl_addr, COLOR_RGB(200, 150, 150)); dl_addr += 4;
 800456c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800456e:	496d      	ldr	r1, [pc, #436]	@ (8004724 <DrawSettingsUI+0x250>)
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd f913 	bl	800179c <FT812_WriteReg32>
 8004576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004578:	3304      	adds	r3, #4
 800457a:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, BEGIN(RECTS)); dl_addr += 4;
 800457c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457e:	496a      	ldr	r1, [pc, #424]	@ (8004728 <DrawSettingsUI+0x254>)
 8004580:	4618      	mov	r0, r3
 8004582:	f7fd f90b 	bl	800179c <FT812_WriteReg32>
 8004586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004588:	3304      	adds	r3, #4
 800458a:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, VERTEX2II(BTN_BACK.x1, BTN_BACK.y1, 0, 0)); dl_addr += 4;
 800458c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800458e:	4a67      	ldr	r2, [pc, #412]	@ (800472c <DrawSettingsUI+0x258>)
 8004590:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004598:	e883 0003 	stmia.w	r3, {r0, r1}
 800459c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800459e:	055b      	lsls	r3, r3, #21
 80045a0:	4a63      	ldr	r2, [pc, #396]	@ (8004730 <DrawSettingsUI+0x25c>)
 80045a2:	401a      	ands	r2, r3
 80045a4:	4961      	ldr	r1, [pc, #388]	@ (800472c <DrawSettingsUI+0x258>)
 80045a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045aa:	c903      	ldmia	r1, {r0, r1}
 80045ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80045b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80045b2:	0319      	lsls	r1, r3, #12
 80045b4:	4b5f      	ldr	r3, [pc, #380]	@ (8004734 <DrawSettingsUI+0x260>)
 80045b6:	400b      	ands	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045be:	4619      	mov	r1, r3
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7fd f8eb 	bl	800179c <FT812_WriteReg32>
 80045c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c8:	3304      	adds	r3, #4
 80045ca:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, VERTEX2II(BTN_BACK.x2, BTN_BACK.y2, 0, 0)); dl_addr += 4;
 80045cc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80045ce:	4a57      	ldr	r2, [pc, #348]	@ (800472c <DrawSettingsUI+0x258>)
 80045d0:	f107 031c 	add.w	r3, r7, #28
 80045d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80045dc:	8c3b      	ldrh	r3, [r7, #32]
 80045de:	055b      	lsls	r3, r3, #21
 80045e0:	4a53      	ldr	r2, [pc, #332]	@ (8004730 <DrawSettingsUI+0x25c>)
 80045e2:	401a      	ands	r2, r3
 80045e4:	4951      	ldr	r1, [pc, #324]	@ (800472c <DrawSettingsUI+0x258>)
 80045e6:	f107 0314 	add.w	r3, r7, #20
 80045ea:	c903      	ldmia	r1, {r0, r1}
 80045ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80045f0:	8b7b      	ldrh	r3, [r7, #26]
 80045f2:	0319      	lsls	r1, r3, #12
 80045f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <DrawSettingsUI+0x260>)
 80045f6:	400b      	ands	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045fe:	4619      	mov	r1, r3
 8004600:	4620      	mov	r0, r4
 8004602:	f7fd f8cb 	bl	800179c <FT812_WriteReg32>
 8004606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004608:	3304      	adds	r3, #4
 800460a:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 800460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460e:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd f8c2 	bl	800179c <FT812_WriteReg32>
 8004618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800461a:	3304      	adds	r3, #4
 800461c:	647b      	str	r3, [r7, #68]	@ 0x44

    FT812_WriteReg32(dl_addr, COLOR_RGB(0, 0, 0)); dl_addr += 4;
 800461e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004620:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd f8b9 	bl	800179c <FT812_WriteReg32>
 800462a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462c:	3304      	adds	r3, #4
 800462e:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, BEGIN(BITMAPS)); dl_addr += 4;
 8004630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004632:	4939      	ldr	r1, [pc, #228]	@ (8004718 <DrawSettingsUI+0x244>)
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd f8b1 	bl	800179c <FT812_WriteReg32>
 800463a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800463c:	3304      	adds	r3, #4
 800463e:	647b      	str	r3, [r7, #68]	@ 0x44
    DrawString_Proportional(&dl_addr, BTN_BACK.x1 + 15, BTN_BACK.y1 + 10, 22, "Back", 0);
 8004640:	4a3a      	ldr	r2, [pc, #232]	@ (800472c <DrawSettingsUI+0x258>)
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	e892 0003 	ldmia.w	r2, {r0, r1}
 800464a:	e883 0003 	stmia.w	r3, {r0, r1}
 800464e:	89bb      	ldrh	r3, [r7, #12]
 8004650:	f103 040f 	add.w	r4, r3, #15
 8004654:	4a35      	ldr	r2, [pc, #212]	@ (800472c <DrawSettingsUI+0x258>)
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800465c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	f103 020a 	add.w	r2, r3, #10
 8004666:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800466a:	2300      	movs	r3, #0
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	4b32      	ldr	r3, [pc, #200]	@ (8004738 <DrawSettingsUI+0x264>)
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	2316      	movs	r3, #22
 8004674:	4621      	mov	r1, r4
 8004676:	f7fd fabb 	bl	8001bf0 <DrawString_Proportional>
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 800467a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467c:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 8004680:	4618      	mov	r0, r3
 8004682:	f7fd f88b 	bl	800179c <FT812_WriteReg32>
 8004686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004688:	3304      	adds	r3, #4
 800468a:	647b      	str	r3, [r7, #68]	@ 0x44

    FT812_WriteReg32(dl_addr, COLOR_RGB(150, 150, 150)); dl_addr += 4;
 800468c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800468e:	492b      	ldr	r1, [pc, #172]	@ (800473c <DrawSettingsUI+0x268>)
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd f883 	bl	800179c <FT812_WriteReg32>
 8004696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004698:	3304      	adds	r3, #4
 800469a:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, BEGIN(LINES)); dl_addr += 4;
 800469c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469e:	4928      	ldr	r1, [pc, #160]	@ (8004740 <DrawSettingsUI+0x26c>)
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd f87b 	bl	800179c <FT812_WriteReg32>
 80046a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a8:	3304      	adds	r3, #4
 80046aa:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, VERTEX2II(250, 40, 0, 0)); dl_addr += 4;
 80046ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ae:	4925      	ldr	r1, [pc, #148]	@ (8004744 <DrawSettingsUI+0x270>)
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fd f873 	bl	800179c <FT812_WriteReg32>
 80046b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b8:	3304      	adds	r3, #4
 80046ba:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, VERTEX2II(250, 240, 0, 0)); dl_addr += 4;
 80046bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046be:	4922      	ldr	r1, [pc, #136]	@ (8004748 <DrawSettingsUI+0x274>)
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fd f86b 	bl	800179c <FT812_WriteReg32>
 80046c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c8:	3304      	adds	r3, #4
 80046ca:	647b      	str	r3, [r7, #68]	@ 0x44
    FT812_WriteReg32(dl_addr, END()); dl_addr += 4;
 80046cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ce:	f04f 5104 	mov.w	r1, #553648128	@ 0x21000000
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd f862 	bl	800179c <FT812_WriteReg32>
 80046d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046da:	3304      	adds	r3, #4
 80046dc:	647b      	str	r3, [r7, #68]	@ 0x44

    DrawKeypad(&dl_addr);
 80046de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fbd6 	bl	8003e94 <DrawKeypad>
    DrawParameterSettings(&dl_addr);
 80046e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fd8b 	bl	8004208 <DrawParameterSettings>

    FT812_WriteReg32(dl_addr, DISPLAY());
 80046f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd f850 	bl	800179c <FT812_WriteReg32>
    FT812_WriteByte(REG_DLSWAP, DLSWAP_FRAME);
 80046fc:	2102      	movs	r1, #2
 80046fe:	4813      	ldr	r0, [pc, #76]	@ (800474c <DrawSettingsUI+0x278>)
 8004700:	f7fd f806 	bl	8001710 <FT812_WriteByte>
}
 8004704:	bf00      	nop
 8004706:	374c      	adds	r7, #76	@ 0x4c
 8004708:	46bd      	mov	sp, r7
 800470a:	bd90      	pop	{r4, r7, pc}
 800470c:	02f0f0f0 	.word	0x02f0f0f0
 8004710:	26000007 	.word	0x26000007
 8004714:	04000096 	.word	0x04000096
 8004718:	1f000001 	.word	0x1f000001
 800471c:	0800bd28 	.word	0x0800bd28
 8004720:	0800bcf8 	.word	0x0800bcf8
 8004724:	04c89696 	.word	0x04c89696
 8004728:	1f000009 	.word	0x1f000009
 800472c:	0800bd30 	.word	0x0800bd30
 8004730:	3fe00000 	.word	0x3fe00000
 8004734:	001ff000 	.word	0x001ff000
 8004738:	0800bd04 	.word	0x0800bd04
 800473c:	04969696 	.word	0x04969696
 8004740:	1f000003 	.word	0x1f000003
 8004744:	9f428000 	.word	0x9f428000
 8004748:	9f4f0000 	.word	0x9f4f0000
 800474c:	00302054 	.word	0x00302054

08004750 <in_rect>:

// 触摸处理函数
static inline uint8_t in_rect(uint16_t x, uint16_t y, Rect r) {
 8004750:	b490      	push	{r4, r7}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4604      	mov	r4, r0
 8004758:	4608      	mov	r0, r1
 800475a:	1d39      	adds	r1, r7, #4
 800475c:	e881 000c 	stmia.w	r1, {r2, r3}
 8004760:	4623      	mov	r3, r4
 8004762:	81fb      	strh	r3, [r7, #14]
 8004764:	4603      	mov	r3, r0
 8004766:	81bb      	strh	r3, [r7, #12]
    return (x >= r.x1 && x <= r.x2 && y >= r.y1 && y <= r.y2);
 8004768:	88bb      	ldrh	r3, [r7, #4]
 800476a:	89fa      	ldrh	r2, [r7, #14]
 800476c:	429a      	cmp	r2, r3
 800476e:	d30d      	bcc.n	800478c <in_rect+0x3c>
 8004770:	893b      	ldrh	r3, [r7, #8]
 8004772:	89fa      	ldrh	r2, [r7, #14]
 8004774:	429a      	cmp	r2, r3
 8004776:	d809      	bhi.n	800478c <in_rect+0x3c>
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	89ba      	ldrh	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d305      	bcc.n	800478c <in_rect+0x3c>
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	89ba      	ldrh	r2, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d801      	bhi.n	800478c <in_rect+0x3c>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <in_rect+0x3e>
 800478c:	2300      	movs	r3, #0
 800478e:	b2db      	uxtb	r3, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bc90      	pop	{r4, r7}
 8004798:	4770      	bx	lr
	...

0800479c <ProcessTouchAndUI>:

void ProcessTouchAndUI(uint16_t x, uint16_t y)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08c      	sub	sp, #48	@ 0x30
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	460a      	mov	r2, r1
 80047a6:	80fb      	strh	r3, [r7, #6]
 80047a8:	4613      	mov	r3, r2
 80047aa:	80bb      	strh	r3, [r7, #4]
    if(ui_state == 0) {
 80047ac:	4b44      	ldr	r3, [pc, #272]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d13e      	bne.n	8004832 <ProcessTouchAndUI+0x96>
        if(in_rect(x,y,CHART1_RECT)) { ui_state = 1; return; }
 80047b4:	4a43      	ldr	r2, [pc, #268]	@ (80048c4 <ProcessTouchAndUI+0x128>)
 80047b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047be:	e883 0003 	stmia.w	r3, {r0, r1}
 80047c2:	88b9      	ldrh	r1, [r7, #4]
 80047c4:	88f8      	ldrh	r0, [r7, #6]
 80047c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047ca:	cb0c      	ldmia	r3, {r2, r3}
 80047cc:	f7ff ffc0 	bl	8004750 <in_rect>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <ProcessTouchAndUI+0x42>
 80047d6:	4b3a      	ldr	r3, [pc, #232]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e06d      	b.n	80048ba <ProcessTouchAndUI+0x11e>
        if(in_rect(x,y,CHART2_RECT)) { ui_state = 2; return; }
 80047de:	4a3a      	ldr	r2, [pc, #232]	@ (80048c8 <ProcessTouchAndUI+0x12c>)
 80047e0:	f107 0320 	add.w	r3, r7, #32
 80047e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80047ec:	88b9      	ldrh	r1, [r7, #4]
 80047ee:	88f8      	ldrh	r0, [r7, #6]
 80047f0:	f107 0320 	add.w	r3, r7, #32
 80047f4:	cb0c      	ldmia	r3, {r2, r3}
 80047f6:	f7ff ffab 	bl	8004750 <in_rect>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <ProcessTouchAndUI+0x6c>
 8004800:	4b2f      	ldr	r3, [pc, #188]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 8004802:	2202      	movs	r2, #2
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e058      	b.n	80048ba <ProcessTouchAndUI+0x11e>
        if(in_rect(x,y,CHART3_RECT)) { ui_state = 3; return; }
 8004808:	4a30      	ldr	r2, [pc, #192]	@ (80048cc <ProcessTouchAndUI+0x130>)
 800480a:	f107 0318 	add.w	r3, r7, #24
 800480e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004812:	e883 0003 	stmia.w	r3, {r0, r1}
 8004816:	88b9      	ldrh	r1, [r7, #4]
 8004818:	88f8      	ldrh	r0, [r7, #6]
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	cb0c      	ldmia	r3, {r2, r3}
 8004820:	f7ff ff96 	bl	8004750 <in_rect>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d047      	beq.n	80048ba <ProcessTouchAndUI+0x11e>
 800482a:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 800482c:	2203      	movs	r2, #3
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e043      	b.n	80048ba <ProcessTouchAndUI+0x11e>
    } else if (ui_state >= 1 && ui_state <= 3) {
 8004832:	4b23      	ldr	r3, [pc, #140]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d033      	beq.n	80048a2 <ProcessTouchAndUI+0x106>
 800483a:	4b21      	ldr	r3, [pc, #132]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d82f      	bhi.n	80048a2 <ProcessTouchAndUI+0x106>
        if(in_rect(x,y,BTN_SETTING)) {
 8004842:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <ProcessTouchAndUI+0x134>)
 8004844:	f107 0310 	add.w	r3, r7, #16
 8004848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800484c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004850:	88b9      	ldrh	r1, [r7, #4]
 8004852:	88f8      	ldrh	r0, [r7, #6]
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	cb0c      	ldmia	r3, {r2, r3}
 800485a:	f7ff ff79 	bl	8004750 <in_rect>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <ProcessTouchAndUI+0xdc>
            current_chart_setting = ui_state - 1;
 8004864:	4b16      	ldr	r3, [pc, #88]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	3b01      	subs	r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <ProcessTouchAndUI+0x138>)
 800486e:	701a      	strb	r2, [r3, #0]
            ui_state = UI_SETTINGS;
 8004870:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 8004872:	2204      	movs	r2, #4
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	e020      	b.n	80048ba <ProcessTouchAndUI+0x11e>
            return;
        }
        if(in_rect(x,y,BTN_CONFIRM)) { ui_state = 0; return; }
 8004878:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <ProcessTouchAndUI+0x13c>)
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004882:	e883 0003 	stmia.w	r3, {r0, r1}
 8004886:	88b9      	ldrh	r1, [r7, #4]
 8004888:	88f8      	ldrh	r0, [r7, #6]
 800488a:	f107 0308 	add.w	r3, r7, #8
 800488e:	cb0c      	ldmia	r3, {r2, r3}
 8004890:	f7ff ff5e 	bl	8004750 <in_rect>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00e      	beq.n	80048b8 <ProcessTouchAndUI+0x11c>
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e00b      	b.n	80048ba <ProcessTouchAndUI+0x11e>
    }
    else if (ui_state == UI_SETTINGS) {
 80048a2:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <ProcessTouchAndUI+0x124>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d107      	bne.n	80048ba <ProcessTouchAndUI+0x11e>
        ProcessSettingsTouch(x, y);
 80048aa:	88ba      	ldrh	r2, [r7, #4]
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f813 	bl	80048dc <ProcessSettingsTouch>
 80048b6:	e000      	b.n	80048ba <ProcessTouchAndUI+0x11e>
        if(in_rect(x,y,BTN_CONFIRM)) { ui_state = 0; return; }
 80048b8:	bf00      	nop
    }
}
 80048ba:	3730      	adds	r7, #48	@ 0x30
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	2000028c 	.word	0x2000028c
 80048c4:	0800bd38 	.word	0x0800bd38
 80048c8:	0800bd40 	.word	0x0800bd40
 80048cc:	0800bd48 	.word	0x0800bd48
 80048d0:	0800bd14 	.word	0x0800bd14
 80048d4:	200002cc 	.word	0x200002cc
 80048d8:	0800bd1c 	.word	0x0800bd1c

080048dc <ProcessSettingsTouch>:

void ProcessSettingsTouch(uint16_t x, uint16_t y) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b090      	sub	sp, #64	@ 0x40
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	460a      	mov	r2, r1
 80048e6:	80fb      	strh	r3, [r7, #6]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80bb      	strh	r3, [r7, #4]
    if (x >= BTN_BACK.x1 && x <= BTN_BACK.x2 &&
 80048ec:	4a68      	ldr	r2, [pc, #416]	@ (8004a90 <ProcessSettingsTouch+0x1b4>)
 80048ee:	f107 0320 	add.w	r3, r7, #32
 80048f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80048fa:	8c3b      	ldrh	r3, [r7, #32]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d327      	bcc.n	8004952 <ProcessSettingsTouch+0x76>
 8004902:	4a63      	ldr	r2, [pc, #396]	@ (8004a90 <ProcessSettingsTouch+0x1b4>)
 8004904:	f107 0318 	add.w	r3, r7, #24
 8004908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800490c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004910:	8bbb      	ldrh	r3, [r7, #28]
 8004912:	88fa      	ldrh	r2, [r7, #6]
 8004914:	429a      	cmp	r2, r3
 8004916:	d81c      	bhi.n	8004952 <ProcessSettingsTouch+0x76>
        y >= BTN_BACK.y1 && y <= BTN_BACK.y2) {
 8004918:	4a5d      	ldr	r2, [pc, #372]	@ (8004a90 <ProcessSettingsTouch+0x1b4>)
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004922:	e883 0003 	stmia.w	r3, {r0, r1}
 8004926:	8a7b      	ldrh	r3, [r7, #18]
    if (x >= BTN_BACK.x1 && x <= BTN_BACK.x2 &&
 8004928:	88ba      	ldrh	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d311      	bcc.n	8004952 <ProcessSettingsTouch+0x76>
        y >= BTN_BACK.y1 && y <= BTN_BACK.y2) {
 800492e:	4a58      	ldr	r2, [pc, #352]	@ (8004a90 <ProcessSettingsTouch+0x1b4>)
 8004930:	f107 0308 	add.w	r3, r7, #8
 8004934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004938:	e883 0003 	stmia.w	r3, {r0, r1}
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	88ba      	ldrh	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d806      	bhi.n	8004952 <ProcessSettingsTouch+0x76>
        ui_state = current_chart_setting + 1;
 8004944:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <ProcessSettingsTouch+0x1b8>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	4b52      	ldr	r3, [pc, #328]	@ (8004a98 <ProcessSettingsTouch+0x1bc>)
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e09a      	b.n	8004a88 <ProcessSettingsTouch+0x1ac>
        return;
    }

    for (int i = 0; i < 12; i++) {
 8004952:	2300      	movs	r3, #0
 8004954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004956:	e060      	b.n	8004a1a <ProcessSettingsTouch+0x13e>
        int row = i / 3;
 8004958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495a:	4a50      	ldr	r2, [pc, #320]	@ (8004a9c <ProcessSettingsTouch+0x1c0>)
 800495c:	fb82 1203 	smull	r1, r2, r2, r3
 8004960:	17db      	asrs	r3, r3, #31
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
        int col = i % 3;
 8004966:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004968:	4b4c      	ldr	r3, [pc, #304]	@ (8004a9c <ProcessSettingsTouch+0x1c0>)
 800496a:	fb83 3102 	smull	r3, r1, r3, r2
 800496e:	17d3      	asrs	r3, r2, #31
 8004970:	1ac9      	subs	r1, r1, r3
 8004972:	460b      	mov	r3, r1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	440b      	add	r3, r1
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        int16_t key_x = KEYPAD_X_START + col * (KEY_WIDTH + KEY_SPACING);
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	b29b      	uxth	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	00d2      	lsls	r2, r2, #3
 8004984:	1ad2      	subs	r2, r2, r3
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	4413      	add	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	b29b      	uxth	r3, r3
 800498e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004992:	b29b      	uxth	r3, r3
 8004994:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t key_y = KEYPAD_Y_START + row * (KEY_HEIGHT + KEY_SPACING);
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	0052      	lsls	r2, r2, #1
 800499e:	441a      	add	r2, r3
 80049a0:	4611      	mov	r1, r2
 80049a2:	00c9      	lsls	r1, r1, #3
 80049a4:	1a8a      	subs	r2, r1, r2
 80049a6:	0052      	lsls	r2, r2, #1
 80049a8:	4413      	add	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3350      	adds	r3, #80	@ 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	853b      	strh	r3, [r7, #40]	@ 0x28

        if (x >= key_x && x <= key_x + KEY_WIDTH &&
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80049b8:	429a      	cmp	r2, r3
 80049ba:	db2b      	blt.n	8004a14 <ProcessSettingsTouch+0x138>
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80049c2:	3332      	adds	r3, #50	@ 0x32
 80049c4:	429a      	cmp	r2, r3
 80049c6:	dc25      	bgt.n	8004a14 <ProcessSettingsTouch+0x138>
            y >= key_y && y <= key_y + KEY_HEIGHT) {
 80049c8:	88ba      	ldrh	r2, [r7, #4]
 80049ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
        if (x >= key_x && x <= key_x + KEY_WIDTH &&
 80049ce:	429a      	cmp	r2, r3
 80049d0:	db20      	blt.n	8004a14 <ProcessSettingsTouch+0x138>
            y >= key_y && y <= key_y + KEY_HEIGHT) {
 80049d2:	88ba      	ldrh	r2, [r7, #4]
 80049d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80049d8:	3323      	adds	r3, #35	@ 0x23
 80049da:	429a      	cmp	r2, r3
 80049dc:	dc1a      	bgt.n	8004a14 <ProcessSettingsTouch+0x138>

            if (i == 9) {
 80049de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d102      	bne.n	80049ea <ProcessSettingsTouch+0x10e>
                ProcessBackspace();
 80049e4:	f000 f88a 	bl	8004afc <ProcessBackspace>
            } else if (i == 10) {
                ProcessNumberInput('0');
            } else {
                ProcessNumberInput('1' + i);
            }
            return;
 80049e8:	e04e      	b.n	8004a88 <ProcessSettingsTouch+0x1ac>
            } else if (i == 11) {
 80049ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ec:	2b0b      	cmp	r3, #11
 80049ee:	d102      	bne.n	80049f6 <ProcessSettingsTouch+0x11a>
                ProcessConfirm();
 80049f0:	f000 f89e 	bl	8004b30 <ProcessConfirm>
            return;
 80049f4:	e048      	b.n	8004a88 <ProcessSettingsTouch+0x1ac>
            } else if (i == 10) {
 80049f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f8:	2b0a      	cmp	r3, #10
 80049fa:	d103      	bne.n	8004a04 <ProcessSettingsTouch+0x128>
                ProcessNumberInput('0');
 80049fc:	2030      	movs	r0, #48	@ 0x30
 80049fe:	f000 f855 	bl	8004aac <ProcessNumberInput>
            return;
 8004a02:	e041      	b.n	8004a88 <ProcessSettingsTouch+0x1ac>
                ProcessNumberInput('1' + i);
 8004a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3331      	adds	r3, #49	@ 0x31
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f84d 	bl	8004aac <ProcessNumberInput>
            return;
 8004a12:	e039      	b.n	8004a88 <ProcessSettingsTouch+0x1ac>
    for (int i = 0; i < 12; i++) {
 8004a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a16:	3301      	adds	r3, #1
 8004a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1c:	2b0b      	cmp	r3, #11
 8004a1e:	dd9b      	ble.n	8004958 <ProcessSettingsTouch+0x7c>
        }
    }

    for (int i = 0; i < 5; i++) {
 8004a20:	2300      	movs	r3, #0
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a24:	e02d      	b.n	8004a82 <ProcessSettingsTouch+0x1a6>
        int16_t param_y = PARAM_Y_START + i * PARAM_SPACING;
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	00d2      	lsls	r2, r2, #3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3350      	adds	r3, #80	@ 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if (x >= PARAM_X_START && x <= PARAM_X_START + PARAM_WIDTH &&
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b13      	cmp	r3, #19
 8004a42:	d91b      	bls.n	8004a7c <ProcessSettingsTouch+0x1a0>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4a:	d817      	bhi.n	8004a7c <ProcessSettingsTouch+0x1a0>
            y >= param_y && y <= param_y + PARAM_HEIGHT) {
 8004a4c:	88ba      	ldrh	r2, [r7, #4]
 8004a4e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
        if (x >= PARAM_X_START && x <= PARAM_X_START + PARAM_WIDTH &&
 8004a52:	429a      	cmp	r2, r3
 8004a54:	db12      	blt.n	8004a7c <ProcessSettingsTouch+0x1a0>
            y >= param_y && y <= param_y + PARAM_HEIGHT) {
 8004a56:	88ba      	ldrh	r2, [r7, #4]
 8004a58:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004a5c:	3319      	adds	r3, #25
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	dc0c      	bgt.n	8004a7c <ProcessSettingsTouch+0x1a0>
            current_param = i;
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <ProcessSettingsTouch+0x1c4>)
 8004a68:	701a      	strb	r2, [r3, #0]
            memset(input_buffer, 0, sizeof(input_buffer));
 8004a6a:	220a      	movs	r2, #10
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	480d      	ldr	r0, [pc, #52]	@ (8004aa4 <ProcessSettingsTouch+0x1c8>)
 8004a70:	f004 feb6 	bl	80097e0 <memset>
            input_pos = 0;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <ProcessSettingsTouch+0x1cc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
            return;
 8004a7a:	e005      	b.n	8004a88 <ProcessSettingsTouch+0x1ac>
    for (int i = 0; i < 5; i++) {
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	3301      	adds	r3, #1
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	ddce      	ble.n	8004a26 <ProcessSettingsTouch+0x14a>
        }
    }
}
 8004a88:	3740      	adds	r7, #64	@ 0x40
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	0800bd30 	.word	0x0800bd30
 8004a94:	200002cc 	.word	0x200002cc
 8004a98:	2000028c 	.word	0x2000028c
 8004a9c:	55555556 	.word	0x55555556
 8004aa0:	200002cd 	.word	0x200002cd
 8004aa4:	200002d0 	.word	0x200002d0
 8004aa8:	200002da 	.word	0x200002da

08004aac <ProcessNumberInput>:

void ProcessNumberInput(char key) {
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
    if (key >= '0' && key <= '9' && input_pos < 8) {
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b2f      	cmp	r3, #47	@ 0x2f
 8004aba:	d916      	bls.n	8004aea <ProcessNumberInput+0x3e>
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	2b39      	cmp	r3, #57	@ 0x39
 8004ac0:	d813      	bhi.n	8004aea <ProcessNumberInput+0x3e>
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <ProcessNumberInput+0x48>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b07      	cmp	r3, #7
 8004ac8:	d80f      	bhi.n	8004aea <ProcessNumberInput+0x3e>
        input_buffer[input_pos++] = key;
 8004aca:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <ProcessNumberInput+0x48>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	b2d1      	uxtb	r1, r2
 8004ad2:	4a08      	ldr	r2, [pc, #32]	@ (8004af4 <ProcessNumberInput+0x48>)
 8004ad4:	7011      	strb	r1, [r2, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4a07      	ldr	r2, [pc, #28]	@ (8004af8 <ProcessNumberInput+0x4c>)
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	5453      	strb	r3, [r2, r1]
        input_buffer[input_pos] = '\0';
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <ProcessNumberInput+0x48>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b04      	ldr	r3, [pc, #16]	@ (8004af8 <ProcessNumberInput+0x4c>)
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]
    }
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	200002da 	.word	0x200002da
 8004af8:	200002d0 	.word	0x200002d0

08004afc <ProcessBackspace>:

void ProcessBackspace(void) {
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
    if (input_pos > 0) {
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <ProcessBackspace+0x2c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <ProcessBackspace+0x24>
        input_buffer[--input_pos] = '\0';
 8004b08:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <ProcessBackspace+0x2c>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <ProcessBackspace+0x2c>)
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <ProcessBackspace+0x2c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <ProcessBackspace+0x30>)
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]
    }
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	200002da 	.word	0x200002da
 8004b2c:	200002d0 	.word	0x200002d0

08004b30 <ProcessConfirm>:

void ProcessConfirm(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
    if (input_pos > 0) {
 8004b36:	4b5e      	ldr	r3, [pc, #376]	@ (8004cb0 <ProcessConfirm+0x180>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80b4 	beq.w	8004ca8 <ProcessConfirm+0x178>
        int32_t value = atoi(input_buffer) * 100;
 8004b40:	485c      	ldr	r0, [pc, #368]	@ (8004cb4 <ProcessConfirm+0x184>)
 8004b42:	f004 f80b 	bl	8008b5c <atoi>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2264      	movs	r2, #100	@ 0x64
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	617b      	str	r3, [r7, #20]

        int32_t old_x_min = chart_settings[current_chart_setting].x_min;
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	4a59      	ldr	r2, [pc, #356]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004b58:	460b      	mov	r3, r1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	613b      	str	r3, [r7, #16]
        int32_t old_x_max = chart_settings[current_chart_setting].x_max;
 8004b68:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4a53      	ldr	r2, [pc, #332]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

        switch (current_param) {
 8004b80:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc0 <ProcessConfirm+0x190>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d84d      	bhi.n	8004c24 <ProcessConfirm+0xf4>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <ProcessConfirm+0x60>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba5 	.word	0x08004ba5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bd7 	.word	0x08004bd7
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004c0b 	.word	0x08004c0b
            case 0: chart_settings[current_chart_setting].target_value = value; break;
 8004ba4:	4b44      	ldr	r3, [pc, #272]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4a44      	ldr	r2, [pc, #272]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004bac:	460b      	mov	r3, r1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e033      	b.n	8004c24 <ProcessConfirm+0xf4>
            case 1: chart_settings[current_chart_setting].x_min = value; break;
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	3304      	adds	r3, #4
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e026      	b.n	8004c24 <ProcessConfirm+0xf4>
            case 2: chart_settings[current_chart_setting].x_max = value; break;
 8004bd6:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4a37      	ldr	r2, [pc, #220]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004bde:	460b      	mov	r3, r1
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	3308      	adds	r3, #8
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e019      	b.n	8004c24 <ProcessConfirm+0xf4>
            case 3: chart_settings[current_chart_setting].y_min = value; break;
 8004bf0:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4a31      	ldr	r2, [pc, #196]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	330c      	adds	r3, #12
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e00c      	b.n	8004c24 <ProcessConfirm+0xf4>
            case 4: chart_settings[current_chart_setting].y_max = value; break;
 8004c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4a2a      	ldr	r2, [pc, #168]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004c12:	460b      	mov	r3, r1
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	bf00      	nop
        }

        if(current_param == 1 || current_param == 2) {
 8004c24:	4b26      	ldr	r3, [pc, #152]	@ (8004cc0 <ProcessConfirm+0x190>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d003      	beq.n	8004c34 <ProcessConfirm+0x104>
 8004c2c:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <ProcessConfirm+0x190>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d124      	bne.n	8004c7e <ProcessConfirm+0x14e>
            int32_t new_x_min = chart_settings[current_chart_setting].x_min;
 8004c34:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	3304      	adds	r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60bb      	str	r3, [r7, #8]
            int32_t new_x_max = chart_settings[current_chart_setting].x_max;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <ProcessConfirm+0x18c>)
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3308      	adds	r3, #8
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	607b      	str	r3, [r7, #4]

            if(old_x_min != new_x_min || old_x_max != new_x_max) {
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d103      	bne.n	8004c74 <ProcessConfirm+0x144>
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d004      	beq.n	8004c7e <ProcessConfirm+0x14e>
                OnSettingsChanged(current_chart_setting);
 8004c74:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd fef3 	bl	8002a64 <OnSettingsChanged>
            }
        }

        // **关键修改：目标值修改时同步到控制系统**
        if(current_param == 0) {
 8004c7e:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <ProcessConfirm+0x190>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <ProcessConfirm+0x168>
            SyncTargetValuesToControl();
 8004c86:	f7fc fca9 	bl	80015dc <SyncTargetValuesToControl>
            Debug_Printf("Target value updated for chart %d: %ld\r\n", current_chart_setting, value);
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <ProcessConfirm+0x188>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4619      	mov	r1, r3
 8004c92:	480c      	ldr	r0, [pc, #48]	@ (8004cc4 <ProcessConfirm+0x194>)
 8004c94:	f7fc f986 	bl	8000fa4 <Debug_Printf>
        }

        memset(input_buffer, 0, sizeof(input_buffer));
 8004c98:	220a      	movs	r2, #10
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4805      	ldr	r0, [pc, #20]	@ (8004cb4 <ProcessConfirm+0x184>)
 8004c9e:	f004 fd9f 	bl	80097e0 <memset>
        input_pos = 0;
 8004ca2:	4b03      	ldr	r3, [pc, #12]	@ (8004cb0 <ProcessConfirm+0x180>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
    }
}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200002da 	.word	0x200002da
 8004cb4:	200002d0 	.word	0x200002d0
 8004cb8:	200002cc 	.word	0x200002cc
 8004cbc:	20000290 	.word	0x20000290
 8004cc0:	200002cd 	.word	0x200002cd
 8004cc4:	0800bd50 	.word	0x0800bd50

08004cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cc8:	b5b0      	push	{r4, r5, r7, lr}
 8004cca:	b08a      	sub	sp, #40	@ 0x28
 8004ccc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cce:	f000 fd6f 	bl	80057b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cd2:	f000 f9b9 	bl	8005048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cd6:	f7fc f8b3 	bl	8000e40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8004cda:	f000 fbf7 	bl	80054cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8004cde:	f000 fc45 	bl	800556c <MX_TIM2_Init>
  MX_SPI1_Init();
 8004ce2:	f000 fa3b 	bl	800515c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8004ce6:	f000 fcc7 	bl	8005678 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8004cea:	f7fb fecd 	bl	8000a88 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8004cee:	487a      	ldr	r0, [pc, #488]	@ (8004ed8 <main+0x210>)
 8004cf0:	f003 f924 	bl	8007f3c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8004cf4:	4879      	ldr	r0, [pc, #484]	@ (8004edc <main+0x214>)
 8004cf6:	f003 f96b 	bl	8007fd0 <HAL_TIM_Base_Start_IT>

  // 初始化加热器、水泵和真空泵为关闭状态 (现在关闭是低电平)
  HAL_GPIO_WritePin(HEATER_PORT, HEATER_PIN, GPIO_PIN_RESET);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4878      	ldr	r0, [pc, #480]	@ (8004ee0 <main+0x218>)
 8004d00:	f001 fd8b 	bl	800681a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PUMP_PORT, PUMP_PIN, GPIO_PIN_RESET);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2180      	movs	r1, #128	@ 0x80
 8004d08:	4875      	ldr	r0, [pc, #468]	@ (8004ee0 <main+0x218>)
 8004d0a:	f001 fd86 	bl	800681a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VACUUM_PUMP_PORT, VACUUM_PUMP_PIN, GPIO_PIN_RESET);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2140      	movs	r1, #64	@ 0x40
 8004d12:	4873      	ldr	r0, [pc, #460]	@ (8004ee0 <main+0x218>)
 8004d14:	f001 fd81 	bl	800681a <HAL_GPIO_WritePin>

  // 初始化LED为关闭状态
  HAL_GPIO_WritePin(TEMP_LED_PORT, TEMP_LED_PIN, GPIO_PIN_SET);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d1e:	4871      	ldr	r0, [pc, #452]	@ (8004ee4 <main+0x21c>)
 8004d20:	f001 fd7b 	bl	800681a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLOW_LED_PORT, FLOW_LED_PIN, GPIO_PIN_SET);
 8004d24:	2201      	movs	r2, #1
 8004d26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d2a:	486e      	ldr	r0, [pc, #440]	@ (8004ee4 <main+0x21c>)
 8004d2c:	f001 fd75 	bl	800681a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DO_LED_PORT, DO_LED_PIN, GPIO_PIN_SET);
 8004d30:	2201      	movs	r2, #1
 8004d32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d36:	486b      	ldr	r0, [pc, #428]	@ (8004ee4 <main+0x21c>)
 8004d38:	f001 fd6f 	bl	800681a <HAL_GPIO_WritePin>

  // 等待系统稳定
  HAL_Delay(3000);
 8004d3c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004d40:	f000 fd98 	bl	8005874 <HAL_Delay>

  // 初始化FT812显示屏
  FT812_Initialize();
 8004d44:	f7fc fe8a 	bl	8001a5c <FT812_Initialize>

  // 加载字体
  LoadAllRequiredFonts();
 8004d48:	f7fc fdfa 	bl	8001940 <LoadAllRequiredFonts>

  // 初始化默认设置（使用控制系统的目标值）
  InitDefaultSettings();
 8004d4c:	f7fd fbb4 	bl	80024b8 <InitDefaultSettings>

  // 初始化实时数据缓冲区
  InitRealTimeBuffers();
 8004d50:	f7fd fbf6 	bl	8002540 <InitRealTimeBuffers>

  // 启动ADC校准
  HAL_ADCEx_Calibration_Start(&hadc1);
 8004d54:	4864      	ldr	r0, [pc, #400]	@ (8004ee8 <main+0x220>)
 8004d56:	f001 fa09 	bl	800616c <HAL_ADCEx_Calibration_Start>


  Debug_Printf("Temperature Control: ON<%d.%02d°C, OFF>%d.%02d°C\r\n",
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2326      	movs	r3, #38	@ 0x26
 8004d60:	2200      	movs	r2, #0
 8004d62:	2124      	movs	r1, #36	@ 0x24
 8004d64:	4861      	ldr	r0, [pc, #388]	@ (8004eec <main+0x224>)
 8004d66:	f7fc f91d 	bl	8000fa4 <Debug_Printf>
               TEMP_TURN_ON/100, TEMP_TURN_ON%100,
               TEMP_TURN_OFF/100, TEMP_TURN_OFF%100);
  Debug_Printf("Flow Control: ON<%d.%02d L/min, OFF>%d.%02d L/min\r\n",
 8004d6a:	234b      	movs	r3, #75	@ 0x4b
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2219      	movs	r2, #25
 8004d72:	2100      	movs	r1, #0
 8004d74:	485e      	ldr	r0, [pc, #376]	@ (8004ef0 <main+0x228>)
 8004d76:	f7fc f915 	bl	8000fa4 <Debug_Printf>
               FLOW_TURN_ON/100, FLOW_TURN_ON%100,
               FLOW_TURN_OFF/100, FLOW_TURN_OFF%100);
  Debug_Printf("DO Control: ON>%d.%03d mg/L, OFF<%d.%03d mg/L\r\n",
 8004d7a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2302      	movs	r3, #2
 8004d82:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004d86:	2103      	movs	r1, #3
 8004d88:	485a      	ldr	r0, [pc, #360]	@ (8004ef4 <main+0x22c>)
 8004d8a:	f7fc f90b 	bl	8000fa4 <Debug_Printf>
  {


	  // 1. 读取传感器数据
	  // 温度读取 (返回整数，精度0.01°C)
      int16_t temp2_x100 = DS18B20_GetTemp_Int(DS18B20_2_PORT, DS18B20_2_PIN);
 8004d8e:	2104      	movs	r1, #4
 8004d90:	4854      	ldr	r0, [pc, #336]	@ (8004ee4 <main+0x21c>)
 8004d92:	f7fb fff9 	bl	8000d88 <DS18B20_GetTemp_Int>
 8004d96:	4603      	mov	r3, r0
 8004d98:	827b      	strh	r3, [r7, #18]

      // 流量计算 (整数运算)
      flow_pulses_per_min = golbal_flow.pluse_1s * 60;  // 每秒脉冲数 * 60 = 每分钟脉冲数     *****************************？？？？？？？？？？？？？？？？？
 8004d9a:	4b57      	ldr	r3, [pc, #348]	@ (8004ef8 <main+0x230>)
 8004d9c:	885b      	ldrh	r3, [r3, #2]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b54      	ldr	r3, [pc, #336]	@ (8004efc <main+0x234>)
 8004dac:	601a      	str	r2, [r3, #0]
      instant_flow_x100 = (golbal_flow.pluse_1s * 10000) / 80;  // (脉冲数 * 10000) / 80 = 流量*100   ****可能需要修改 75？ 80？***
 8004dae:	4b52      	ldr	r3, [pc, #328]	@ (8004ef8 <main+0x230>)
 8004db0:	885b      	ldrh	r3, [r3, #2]
 8004db2:	461a      	mov	r2, r3
 8004db4:	4613      	mov	r3, r2
 8004db6:	015b      	lsls	r3, r3, #5
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004f00 <main+0x238>)
 8004dc2:	601a      	str	r2, [r3, #0]

      // 读取DO传感器数据
      ReadDOSensor();
 8004dc4:	f7fc f9b4 	bl	8001130 <ReadDOSensor>


      // 2. 调试输出基本数据
      if (temp2_x100 != -100000) {
          Debug_Printf("Temperature: %d.%02d°C\r\n", temp2_x100/100, temp2_x100%100);
 8004dc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8004f04 <main+0x23c>)
 8004dce:	fb82 1203 	smull	r1, r2, r2, r3
 8004dd2:	1152      	asrs	r2, r2, #5
 8004dd4:	17db      	asrs	r3, r3, #31
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b21b      	sxth	r3, r3
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004de0:	4a48      	ldr	r2, [pc, #288]	@ (8004f04 <main+0x23c>)
 8004de2:	fb82 1203 	smull	r1, r2, r2, r3
 8004de6:	1151      	asrs	r1, r2, #5
 8004de8:	17da      	asrs	r2, r3, #31
 8004dea:	1a8a      	subs	r2, r1, r2
 8004dec:	2164      	movs	r1, #100	@ 0x64
 8004dee:	fb01 f202 	mul.w	r2, r1, r2
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	b21b      	sxth	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4843      	ldr	r0, [pc, #268]	@ (8004f08 <main+0x240>)
 8004dfc:	f7fc f8d2 	bl	8000fa4 <Debug_Printf>
      } else {
          Debug_Print("Temperature: Sensor Error\r\n");
      }

      Debug_Printf("Flow Rate: %d.%02d L/min\r\n", instant_flow_x100/100, instant_flow_x100%100);
 8004e00:	4b3f      	ldr	r3, [pc, #252]	@ (8004f00 <main+0x238>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3f      	ldr	r2, [pc, #252]	@ (8004f04 <main+0x23c>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0959      	lsrs	r1, r3, #5
 8004e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f00 <main+0x238>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b3c      	ldr	r3, [pc, #240]	@ (8004f04 <main+0x23c>)
 8004e12:	fba3 0302 	umull	r0, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2064      	movs	r0, #100	@ 0x64
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	483a      	ldr	r0, [pc, #232]	@ (8004f0c <main+0x244>)
 8004e24:	f7fc f8be 	bl	8000fa4 <Debug_Printf>
      Debug_Printf("DO Value: %d.%03d mg/L\r\n", do_value/1000, do_value%1000);
 8004e28:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <main+0x248>)
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	4a39      	ldr	r2, [pc, #228]	@ (8004f14 <main+0x24c>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	4b35      	ldr	r3, [pc, #212]	@ (8004f10 <main+0x248>)
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	4a35      	ldr	r2, [pc, #212]	@ (8004f14 <main+0x24c>)
 8004e3e:	fba2 1203 	umull	r1, r2, r2, r3
 8004e42:	0992      	lsrs	r2, r2, #6
 8004e44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004e48:	fb01 f202 	mul.w	r2, r1, r2
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	4601      	mov	r1, r0
 8004e54:	4830      	ldr	r0, [pc, #192]	@ (8004f18 <main+0x250>)
 8004e56:	f7fc f8a5 	bl	8000fa4 <Debug_Printf>

      // 3. 执行控制逻辑 使用滞后控制逻辑
      UpdateTemperatureControlWithHysteresis(temp2_x100);
 8004e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc f9a4 	bl	80011ac <UpdateTemperatureControlWithHysteresis>
      UpdateFlowControlWithHysteresis(instant_flow_x100);
 8004e64:	4b26      	ldr	r3, [pc, #152]	@ (8004f00 <main+0x238>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fc fa29 	bl	80012c0 <UpdateFlowControlWithHysteresis>
      UpdateDOControlWithHysteresis(do_value);
 8004e6e:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <main+0x248>)
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fc fa9c 	bl	80013b0 <UpdateDOControlWithHysteresis>

      // 4. 更新执行器状态
      UpdateHeaterControl();
 8004e78:	f7fc fb20 	bl	80014bc <UpdateHeaterControl>
      UpdatePumpControl();
 8004e7c:	f7fc fb4e 	bl	800151c <UpdatePumpControl>
      UpdateVacuumPumpControl();
 8004e80:	f7fc fb7c 	bl	800157c <UpdateVacuumPumpControl>

      // 5. 输出系统状态
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
          system_state.temp_control_active ? "ON" : "OFF",
 8004e84:	4b25      	ldr	r3, [pc, #148]	@ (8004f1c <main+0x254>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <main+0x1c8>
 8004e8c:	4824      	ldr	r0, [pc, #144]	@ (8004f20 <main+0x258>)
 8004e8e:	e000      	b.n	8004e92 <main+0x1ca>
 8004e90:	4824      	ldr	r0, [pc, #144]	@ (8004f24 <main+0x25c>)
          system_state.flow_control_active ? "ON" : "OFF",
 8004e92:	4b22      	ldr	r3, [pc, #136]	@ (8004f1c <main+0x254>)
 8004e94:	785b      	ldrb	r3, [r3, #1]
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <main+0x1d6>
 8004e9a:	4c21      	ldr	r4, [pc, #132]	@ (8004f20 <main+0x258>)
 8004e9c:	e000      	b.n	8004ea0 <main+0x1d8>
 8004e9e:	4c21      	ldr	r4, [pc, #132]	@ (8004f24 <main+0x25c>)
          system_state.do_control_active ? "ON" : "OFF",
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f1c <main+0x254>)
 8004ea2:	789b      	ldrb	r3, [r3, #2]
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <main+0x1e4>
 8004ea8:	4d1d      	ldr	r5, [pc, #116]	@ (8004f20 <main+0x258>)
 8004eaa:	e000      	b.n	8004eae <main+0x1e6>
 8004eac:	4d1d      	ldr	r5, [pc, #116]	@ (8004f24 <main+0x25c>)
          system_state.heater_on ? "ON" : "OFF",
 8004eae:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <main+0x254>)
 8004eb0:	78db      	ldrb	r3, [r3, #3]
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <main+0x1f2>
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f20 <main+0x258>)
 8004eb8:	e000      	b.n	8004ebc <main+0x1f4>
 8004eba:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <main+0x25c>)
          system_state.pump_on ? "ON" : "OFF",
 8004ebc:	4a17      	ldr	r2, [pc, #92]	@ (8004f1c <main+0x254>)
 8004ebe:	7912      	ldrb	r2, [r2, #4]
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d001      	beq.n	8004ec8 <main+0x200>
 8004ec4:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <main+0x258>)
 8004ec6:	e000      	b.n	8004eca <main+0x202>
 8004ec8:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <main+0x25c>)
          system_state.vacuum_pump_on ? "ON" : "OFF");
 8004eca:	4914      	ldr	r1, [pc, #80]	@ (8004f1c <main+0x254>)
 8004ecc:	7949      	ldrb	r1, [r1, #5]
      Debug_Printf("Status -> Temp LED: %s | Flow LED: %s | DO LED: %s | Heater: %s | Pump: %s | Vacuum: %s\r\n",
 8004ece:	2900      	cmp	r1, #0
 8004ed0:	d02a      	beq.n	8004f28 <main+0x260>
 8004ed2:	4913      	ldr	r1, [pc, #76]	@ (8004f20 <main+0x258>)
 8004ed4:	e029      	b.n	8004f2a <main+0x262>
 8004ed6:	bf00      	nop
 8004ed8:	20000d40 	.word	0x20000d40
 8004edc:	20000d88 	.word	0x20000d88
 8004ee0:	40010c00 	.word	0x40010c00
 8004ee4:	40010800 	.word	0x40010800
 8004ee8:	2000025c 	.word	0x2000025c
 8004eec:	0800bd7c 	.word	0x0800bd7c
 8004ef0:	0800bdb4 	.word	0x0800bdb4
 8004ef4:	0800bde8 	.word	0x0800bde8
 8004ef8:	20000250 	.word	0x20000250
 8004efc:	200004e8 	.word	0x200004e8
 8004f00:	200004ec 	.word	0x200004ec
 8004f04:	51eb851f 	.word	0x51eb851f
 8004f08:	0800be18 	.word	0x0800be18
 8004f0c:	0800be34 	.word	0x0800be34
 8004f10:	200004f6 	.word	0x200004f6
 8004f14:	10624dd3 	.word	0x10624dd3
 8004f18:	0800be50 	.word	0x0800be50
 8004f1c:	200004dc 	.word	0x200004dc
 8004f20:	0800ba2c 	.word	0x0800ba2c
 8004f24:	0800ba30 	.word	0x0800ba30
 8004f28:	493f      	ldr	r1, [pc, #252]	@ (8005028 <main+0x360>)
 8004f2a:	9102      	str	r1, [sp, #8]
 8004f2c:	9201      	str	r2, [sp, #4]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	462b      	mov	r3, r5
 8004f32:	4622      	mov	r2, r4
 8004f34:	4601      	mov	r1, r0
 8004f36:	483d      	ldr	r0, [pc, #244]	@ (800502c <main+0x364>)
 8004f38:	f7fc f834 	bl	8000fa4 <Debug_Printf>
      // 6. **处理FT812触摸和显示更新**
    uint32_t current_time = HAL_GetTick();
 8004f3c:	f000 fc90 	bl	8005860 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

    // 检查触摸事件
    uint32_t touch_xy = FT812_ReadReg32(REG_TOUCH_SCREEN_XY);
 8004f42:	483b      	ldr	r0, [pc, #236]	@ (8005030 <main+0x368>)
 8004f44:	f7fc fc54 	bl	80017f0 <FT812_ReadReg32>
 8004f48:	60b8      	str	r0, [r7, #8]
    uint16_t touch_rz = FT812_ReadReg16(REG_TOUCH_RZ);
 8004f4a:	483a      	ldr	r0, [pc, #232]	@ (8005034 <main+0x36c>)
 8004f4c:	f7fc fc7c 	bl	8001848 <FT812_ReadReg16>
 8004f50:	4603      	mov	r3, r0
 8004f52:	80fb      	strh	r3, [r7, #6]
    uint16_t tx = (touch_xy >> 16) & 0xFFFF, ty = touch_xy & 0xFFFF;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	82fb      	strh	r3, [r7, #22]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	82bb      	strh	r3, [r7, #20]

    // 处理有效触摸（防抖动）
    if (tx != 0x8000 && ty != 0x8000 && touch_rz < 1200) {
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f64:	d03d      	beq.n	8004fe2 <main+0x31a>
 8004f66:	8abb      	ldrh	r3, [r7, #20]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f6c:	d039      	beq.n	8004fe2 <main+0x31a>
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8004f74:	d235      	bcs.n	8004fe2 <main+0x31a>
        static uint32_t last_touch_time = 0;
        static uint16_t last_tx = 0, last_ty = 0;

        if (current_time - last_touch_time > 400 ||
 8004f76:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <main+0x370>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004f82:	d811      	bhi.n	8004fa8 <main+0x2e0>
            abs(tx - last_tx) > 15 || abs(ty - last_ty) > 15) {
 8004f84:	8afb      	ldrh	r3, [r7, #22]
 8004f86:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <main+0x374>)
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfb8      	it	lt
 8004f90:	425b      	neglt	r3, r3
        if (current_time - last_touch_time > 400 ||
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	dc08      	bgt.n	8004fa8 <main+0x2e0>
            abs(tx - last_tx) > 15 || abs(ty - last_ty) > 15) {
 8004f96:	8abb      	ldrh	r3, [r7, #20]
 8004f98:	4a29      	ldr	r2, [pc, #164]	@ (8005040 <main+0x378>)
 8004f9a:	8812      	ldrh	r2, [r2, #0]
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfb8      	it	lt
 8004fa2:	425b      	neglt	r3, r3
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	dd1c      	ble.n	8004fe2 <main+0x31a>

            // 限制坐标范围
            if (tx >= 480) tx = 479;
 8004fa8:	8afb      	ldrh	r3, [r7, #22]
 8004faa:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8004fae:	d302      	bcc.n	8004fb6 <main+0x2ee>
 8004fb0:	f240 13df 	movw	r3, #479	@ 0x1df
 8004fb4:	82fb      	strh	r3, [r7, #22]
            if (ty >= 272) ty = 271;
 8004fb6:	8abb      	ldrh	r3, [r7, #20]
 8004fb8:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8004fbc:	d302      	bcc.n	8004fc4 <main+0x2fc>
 8004fbe:	f240 130f 	movw	r3, #271	@ 0x10f
 8004fc2:	82bb      	strh	r3, [r7, #20]

            // 处理触摸事件
            ProcessTouchAndUI(tx, ty);
 8004fc4:	8aba      	ldrh	r2, [r7, #20]
 8004fc6:	8afb      	ldrh	r3, [r7, #22]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fbe6 	bl	800479c <ProcessTouchAndUI>

            last_touch_time = current_time;
 8004fd0:	4a19      	ldr	r2, [pc, #100]	@ (8005038 <main+0x370>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6013      	str	r3, [r2, #0]
            last_tx = tx;
 8004fd6:	4a19      	ldr	r2, [pc, #100]	@ (800503c <main+0x374>)
 8004fd8:	8afb      	ldrh	r3, [r7, #22]
 8004fda:	8013      	strh	r3, [r2, #0]
            last_ty = ty;
 8004fdc:	4a18      	ldr	r2, [pc, #96]	@ (8005040 <main+0x378>)
 8004fde:	8abb      	ldrh	r3, [r7, #20]
 8004fe0:	8013      	strh	r3, [r2, #0]
        }
    }

    // 7. 更新显示界面
    switch(ui_state) {
 8004fe2:	4b18      	ldr	r3, [pc, #96]	@ (8005044 <main+0x37c>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d012      	beq.n	8005010 <main+0x348>
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	dc13      	bgt.n	8005016 <main+0x34e>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <main+0x336>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	db0f      	blt.n	8005016 <main+0x34e>
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d80c      	bhi.n	8005016 <main+0x34e>
 8004ffc:	e002      	b.n	8005004 <main+0x33c>
        case UI_MAIN:
            DrawMainUI_Int();
 8004ffe:	f7fe f9b3 	bl	8003368 <DrawMainUI_Int>
            break;
 8005002:	e00c      	b.n	800501e <main+0x356>
        case UI_ZOOM_1:
        case UI_ZOOM_2:
        case UI_ZOOM_3:
            DrawZoomChart_Int(ui_state);
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <main+0x37c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe fc2b 	bl	8003864 <DrawZoomChart_Int>
            break;
 800500e:	e006      	b.n	800501e <main+0x356>
        case UI_SETTINGS:
            DrawSettingsUI();
 8005010:	f7ff fa60 	bl	80044d4 <DrawSettingsUI>
            break;
 8005014:	e003      	b.n	800501e <main+0x356>
        default:
            ui_state = UI_MAIN;
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <main+0x37c>)
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
            break;
 800501c:	bf00      	nop
    }

    // 8. 控制循环延时（1秒，与原控制系统保持一致）
    HAL_Delay(500);
 800501e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005022:	f000 fc27 	bl	8005874 <HAL_Delay>
  {
 8005026:	e6b2      	b.n	8004d8e <main+0xc6>
 8005028:	0800ba30 	.word	0x0800ba30
 800502c:	0800be6c 	.word	0x0800be6c
 8005030:	00302124 	.word	0x00302124
 8005034:	00302120 	.word	0x00302120
 8005038:	20000cdc 	.word	0x20000cdc
 800503c:	20000ce0 	.word	0x20000ce0
 8005040:	20000ce2 	.word	0x20000ce2
 8005044:	2000028c 	.word	0x2000028c

08005048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b094      	sub	sp, #80	@ 0x50
 800504c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800504e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005052:	2228      	movs	r2, #40	@ 0x28
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f004 fbc2 	bl	80097e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	609a      	str	r2, [r3, #8]
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800506c:	1d3b      	adds	r3, r7, #4
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	609a      	str	r2, [r3, #8]
 8005076:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005078:	2301      	movs	r3, #1
 800507a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800507c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005082:	2300      	movs	r3, #0
 8005084:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005086:	2301      	movs	r3, #1
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800508a:	2302      	movs	r3, #2
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800508e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005092:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005094:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800509a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 fbec 	bl	800687c <HAL_RCC_OscConfig>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80050aa:	f000 f851 	bl	8005150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050ae:	230f      	movs	r3, #15
 80050b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050b2:	2302      	movs	r3, #2
 80050b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050c0:	2300      	movs	r3, #0
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 fe58 	bl	8006d80 <HAL_RCC_ClockConfig>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80050d6:	f000 f83b 	bl	8005150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80050da:	2302      	movs	r3, #2
 80050dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 ffd8 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80050f2:	f000 f82d 	bl	8005150 <Error_Handler>
  }
}
 80050f6:	bf00      	nop
 80050f8:	3750      	adds	r7, #80	@ 0x50
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005110:	d112      	bne.n	8005138 <HAL_TIM_PeriodElapsedCallback+0x38>
        instant_flow_x100 = (golbal_flow.pluse_1s * 10000) / 75;  // 流量*100
 8005112:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005114:	885b      	ldrh	r3, [r3, #2]
 8005116:	461a      	mov	r2, r3
 8005118:	f242 7310 	movw	r3, #10000	@ 0x2710
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005122:	fb82 1203 	smull	r1, r2, r2, r3
 8005126:	10d2      	asrs	r2, r2, #3
 8005128:	17db      	asrs	r3, r3, #31
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	461a      	mov	r2, r3
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005130:	601a      	str	r2, [r3, #0]
        golbal_flow.pluse_1s = 0;
 8005132:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005134:	2200      	movs	r2, #0
 8005136:	805a      	strh	r2, [r3, #2]
    }
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000250 	.word	0x20000250
 8005148:	1b4e81b5 	.word	0x1b4e81b5
 800514c:	200004ec 	.word	0x200004ec

08005150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005154:	b672      	cpsid	i
}
 8005156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005158:	bf00      	nop
 800515a:	e7fd      	b.n	8005158 <Error_Handler+0x8>

0800515c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005160:	4b17      	ldr	r3, [pc, #92]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005162:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <MX_SPI1_Init+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005166:	4b16      	ldr	r3, [pc, #88]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800516c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800516e:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005170:	2200      	movs	r2, #0
 8005172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005174:	4b12      	ldr	r3, [pc, #72]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005176:	2200      	movs	r2, #0
 8005178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800517a:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <MX_SPI1_Init+0x64>)
 800517c:	2200      	movs	r2, #0
 800517e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005180:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005182:	2200      	movs	r2, #0
 8005184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005186:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800518c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800518e:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005190:	2210      	movs	r2, #16
 8005192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005194:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <MX_SPI1_Init+0x64>)
 8005196:	2200      	movs	r2, #0
 8005198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800519a:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <MX_SPI1_Init+0x64>)
 800519c:	2200      	movs	r2, #0
 800519e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a0:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <MX_SPI1_Init+0x64>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80051a6:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <MX_SPI1_Init+0x64>)
 80051a8:	220a      	movs	r2, #10
 80051aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80051ac:	4804      	ldr	r0, [pc, #16]	@ (80051c0 <MX_SPI1_Init+0x64>)
 80051ae:	f002 f8e1 	bl	8007374 <HAL_SPI_Init>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80051b8:	f7ff ffca 	bl	8005150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80051bc:	bf00      	nop
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000ce4 	.word	0x20000ce4
 80051c4:	40013000 	.word	0x40013000

080051c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d0:	f107 0310 	add.w	r3, r7, #16
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <HAL_SPI_MspInit+0x88>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d12f      	bne.n	8005248 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005254 <HAL_SPI_MspInit+0x8c>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <HAL_SPI_MspInit+0x8c>)
 80051ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051f2:	6193      	str	r3, [r2, #24]
 80051f4:	4b17      	ldr	r3, [pc, #92]	@ (8005254 <HAL_SPI_MspInit+0x8c>)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005200:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <HAL_SPI_MspInit+0x8c>)
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <HAL_SPI_MspInit+0x8c>)
 8005206:	f043 0304 	orr.w	r3, r3, #4
 800520a:	6193      	str	r3, [r2, #24]
 800520c:	4b11      	ldr	r3, [pc, #68]	@ (8005254 <HAL_SPI_MspInit+0x8c>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005218:	23a0      	movs	r3, #160	@ 0xa0
 800521a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005220:	2303      	movs	r3, #3
 8005222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005224:	f107 0310 	add.w	r3, r7, #16
 8005228:	4619      	mov	r1, r3
 800522a:	480b      	ldr	r0, [pc, #44]	@ (8005258 <HAL_SPI_MspInit+0x90>)
 800522c:	f001 f95a 	bl	80064e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005230:	2340      	movs	r3, #64	@ 0x40
 8005232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	4619      	mov	r1, r3
 8005242:	4805      	ldr	r0, [pc, #20]	@ (8005258 <HAL_SPI_MspInit+0x90>)
 8005244:	f001 f94e 	bl	80064e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005248:	bf00      	nop
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40013000 	.word	0x40013000
 8005254:	40021000 	.word	0x40021000
 8005258:	40010800 	.word	0x40010800

0800525c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005262:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <HAL_MspInit+0x5c>)
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	4a14      	ldr	r2, [pc, #80]	@ (80052b8 <HAL_MspInit+0x5c>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6193      	str	r3, [r2, #24]
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_MspInit+0x5c>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	4b0f      	ldr	r3, [pc, #60]	@ (80052b8 <HAL_MspInit+0x5c>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	4a0e      	ldr	r2, [pc, #56]	@ (80052b8 <HAL_MspInit+0x5c>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005284:	61d3      	str	r3, [r2, #28]
 8005286:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <HAL_MspInit+0x5c>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005292:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <HAL_MspInit+0x60>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	4a04      	ldr	r2, [pc, #16]	@ (80052bc <HAL_MspInit+0x60>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40010000 	.word	0x40010000

080052c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <NMI_Handler+0x4>

080052c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <HardFault_Handler+0x4>

080052d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <MemManage_Handler+0x4>

080052d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <BusFault_Handler+0x4>

080052e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <UsageFault_Handler+0x4>

080052e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005310:	f000 fa94 	bl	800583c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005314:	bf00      	nop
 8005316:	bd80      	pop	{r7, pc}

08005318 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(YF_S401_Pin);
 800531c:	2008      	movs	r0, #8
 800531e:	f001 fa95 	bl	800684c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800532c:	4802      	ldr	r0, [pc, #8]	@ (8005338 <TIM2_IRQHandler+0x10>)
 800532e:	f002 fea1 	bl	8008074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000d88 	.word	0x20000d88

0800533c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return 1;
 8005340:	2301      	movs	r3, #1
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <_kill>:

int _kill(int pid, int sig)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005354:	f004 fa96 	bl	8009884 <__errno>
 8005358:	4603      	mov	r3, r0
 800535a:	2216      	movs	r2, #22
 800535c:	601a      	str	r2, [r3, #0]
  return -1;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <_exit>:

void _exit (int status)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005372:	f04f 31ff 	mov.w	r1, #4294967295
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffe7 	bl	800534a <_kill>
  while (1) {}    /* Make sure we hang here */
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <_exit+0x12>

08005380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e00a      	b.n	80053a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005392:	f3af 8000 	nop.w
 8005396:	4601      	mov	r1, r0
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	60ba      	str	r2, [r7, #8]
 800539e:	b2ca      	uxtb	r2, r1
 80053a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3301      	adds	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	dbf0      	blt.n	8005392 <_read+0x12>
  }

  return len;
 80053b0:	687b      	ldr	r3, [r7, #4]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e009      	b.n	80053e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	60ba      	str	r2, [r7, #8]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3301      	adds	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	dbf1      	blt.n	80053cc <_write+0x12>
  }
  return len;
 80053e8:	687b      	ldr	r3, [r7, #4]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_close>:

int _close(int file)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005418:	605a      	str	r2, [r3, #4]
  return 0;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <_isatty>:

int _isatty(int file)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800542e:	2301      	movs	r3, #1
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
	...

08005454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800545c:	4a14      	ldr	r2, [pc, #80]	@ (80054b0 <_sbrk+0x5c>)
 800545e:	4b15      	ldr	r3, [pc, #84]	@ (80054b4 <_sbrk+0x60>)
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005468:	4b13      	ldr	r3, [pc, #76]	@ (80054b8 <_sbrk+0x64>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005470:	4b11      	ldr	r3, [pc, #68]	@ (80054b8 <_sbrk+0x64>)
 8005472:	4a12      	ldr	r2, [pc, #72]	@ (80054bc <_sbrk+0x68>)
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <_sbrk+0x64>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	429a      	cmp	r2, r3
 8005482:	d207      	bcs.n	8005494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005484:	f004 f9fe 	bl	8009884 <__errno>
 8005488:	4603      	mov	r3, r0
 800548a:	220c      	movs	r2, #12
 800548c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	e009      	b.n	80054a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <_sbrk+0x64>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800549a:	4b07      	ldr	r3, [pc, #28]	@ (80054b8 <_sbrk+0x64>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	4a05      	ldr	r2, [pc, #20]	@ (80054b8 <_sbrk+0x64>)
 80054a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20005000 	.word	0x20005000
 80054b4:	00000400 	.word	0x00000400
 80054b8:	20000d3c 	.word	0x20000d3c
 80054bc:	20000f68 	.word	0x20000f68

080054c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e0:	463b      	mov	r3, r7
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <MX_TIM1_Init+0x98>)
 80054ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005568 <MX_TIM1_Init+0x9c>)
 80054ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80054ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005564 <MX_TIM1_Init+0x98>)
 80054f0:	2247      	movs	r2, #71	@ 0x47
 80054f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <MX_TIM1_Init+0x98>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <MX_TIM1_Init+0x98>)
 80054fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005500:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005502:	4b18      	ldr	r3, [pc, #96]	@ (8005564 <MX_TIM1_Init+0x98>)
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005508:	4b16      	ldr	r3, [pc, #88]	@ (8005564 <MX_TIM1_Init+0x98>)
 800550a:	2200      	movs	r2, #0
 800550c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800550e:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <MX_TIM1_Init+0x98>)
 8005510:	2200      	movs	r2, #0
 8005512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005514:	4813      	ldr	r0, [pc, #76]	@ (8005564 <MX_TIM1_Init+0x98>)
 8005516:	f002 fcc2 	bl	8007e9e <HAL_TIM_Base_Init>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005520:	f7ff fe16 	bl	8005150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800552a:	f107 0308 	add.w	r3, r7, #8
 800552e:	4619      	mov	r1, r3
 8005530:	480c      	ldr	r0, [pc, #48]	@ (8005564 <MX_TIM1_Init+0x98>)
 8005532:	f002 fe8f 	bl	8008254 <HAL_TIM_ConfigClockSource>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800553c:	f7ff fe08 	bl	8005150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005540:	2300      	movs	r3, #0
 8005542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8005544:	2380      	movs	r3, #128	@ 0x80
 8005546:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005548:	463b      	mov	r3, r7
 800554a:	4619      	mov	r1, r3
 800554c:	4805      	ldr	r0, [pc, #20]	@ (8005564 <MX_TIM1_Init+0x98>)
 800554e:	f003 f871 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005558:	f7ff fdfa 	bl	8005150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000d40 	.word	0x20000d40
 8005568:	40012c00 	.word	0x40012c00

0800556c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	609a      	str	r2, [r3, #8]
 800557e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005580:	463b      	mov	r3, r7
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005588:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <MX_TIM2_Init+0x98>)
 800558a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800558e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8005590:	4b1c      	ldr	r3, [pc, #112]	@ (8005604 <MX_TIM2_Init+0x98>)
 8005592:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8005596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005598:	4b1a      	ldr	r3, [pc, #104]	@ (8005604 <MX_TIM2_Init+0x98>)
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800559e:	4b19      	ldr	r3, [pc, #100]	@ (8005604 <MX_TIM2_Init+0x98>)
 80055a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80055a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a6:	4b17      	ldr	r3, [pc, #92]	@ (8005604 <MX_TIM2_Init+0x98>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ac:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <MX_TIM2_Init+0x98>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055b2:	4814      	ldr	r0, [pc, #80]	@ (8005604 <MX_TIM2_Init+0x98>)
 80055b4:	f002 fc73 	bl	8007e9e <HAL_TIM_Base_Init>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80055be:	f7ff fdc7 	bl	8005150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80055c8:	f107 0308 	add.w	r3, r7, #8
 80055cc:	4619      	mov	r1, r3
 80055ce:	480d      	ldr	r0, [pc, #52]	@ (8005604 <MX_TIM2_Init+0x98>)
 80055d0:	f002 fe40 	bl	8008254 <HAL_TIM_ConfigClockSource>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80055da:	f7ff fdb9 	bl	8005150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055e6:	463b      	mov	r3, r7
 80055e8:	4619      	mov	r1, r3
 80055ea:	4806      	ldr	r0, [pc, #24]	@ (8005604 <MX_TIM2_Init+0x98>)
 80055ec:	f003 f822 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80055f6:	f7ff fdab 	bl	8005150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000d88 	.word	0x20000d88

08005608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	@ (8005670 <HAL_TIM_Base_MspInit+0x68>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10c      	bne.n	8005634 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800561a:	4b16      	ldr	r3, [pc, #88]	@ (8005674 <HAL_TIM_Base_MspInit+0x6c>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	4a15      	ldr	r2, [pc, #84]	@ (8005674 <HAL_TIM_Base_MspInit+0x6c>)
 8005620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005624:	6193      	str	r3, [r2, #24]
 8005626:	4b13      	ldr	r3, [pc, #76]	@ (8005674 <HAL_TIM_Base_MspInit+0x6c>)
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005632:	e018      	b.n	8005666 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563c:	d113      	bne.n	8005666 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <HAL_TIM_Base_MspInit+0x6c>)
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	4a0c      	ldr	r2, [pc, #48]	@ (8005674 <HAL_TIM_Base_MspInit+0x6c>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	61d3      	str	r3, [r2, #28]
 800564a:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <HAL_TIM_Base_MspInit+0x6c>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	201c      	movs	r0, #28
 800565c:	f000 ff0b 	bl	8006476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005660:	201c      	movs	r0, #28
 8005662:	f000 ff24 	bl	80064ae <HAL_NVIC_EnableIRQ>
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40021000 	.word	0x40021000

08005678 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800567c:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 800567e:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <MX_USART3_UART_Init+0x50>)
 8005680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005682:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 8005684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800568a:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 8005698:	2200      	movs	r2, #0
 800569a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800569c:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 800569e:	220c      	movs	r2, #12
 80056a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80056ae:	4805      	ldr	r0, [pc, #20]	@ (80056c4 <MX_USART3_UART_Init+0x4c>)
 80056b0:	f003 f830 	bl	8008714 <HAL_UART_Init>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80056ba:	f7ff fd49 	bl	8005150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000dd0 	.word	0x20000dd0
 80056c8:	40004800 	.word	0x40004800

080056cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005758 <HAL_UART_MspInit+0x8c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d131      	bne.n	8005750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <HAL_UART_MspInit+0x90>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	4a1a      	ldr	r2, [pc, #104]	@ (800575c <HAL_UART_MspInit+0x90>)
 80056f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056f6:	61d3      	str	r3, [r2, #28]
 80056f8:	4b18      	ldr	r3, [pc, #96]	@ (800575c <HAL_UART_MspInit+0x90>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005704:	4b15      	ldr	r3, [pc, #84]	@ (800575c <HAL_UART_MspInit+0x90>)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <HAL_UART_MspInit+0x90>)
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	6193      	str	r3, [r2, #24]
 8005710:	4b12      	ldr	r3, [pc, #72]	@ (800575c <HAL_UART_MspInit+0x90>)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800571c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005722:	2302      	movs	r3, #2
 8005724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005726:	2303      	movs	r3, #3
 8005728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572a:	f107 0310 	add.w	r3, r7, #16
 800572e:	4619      	mov	r1, r3
 8005730:	480b      	ldr	r0, [pc, #44]	@ (8005760 <HAL_UART_MspInit+0x94>)
 8005732:	f000 fed7 	bl	80064e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005736:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800573a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005744:	f107 0310 	add.w	r3, r7, #16
 8005748:	4619      	mov	r1, r3
 800574a:	4805      	ldr	r0, [pc, #20]	@ (8005760 <HAL_UART_MspInit+0x94>)
 800574c:	f000 feca 	bl	80064e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005750:	bf00      	nop
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40004800 	.word	0x40004800
 800575c:	40021000 	.word	0x40021000
 8005760:	40010c00 	.word	0x40010c00

08005764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005764:	f7ff feac 	bl	80054c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005768:	480b      	ldr	r0, [pc, #44]	@ (8005798 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800576a:	490c      	ldr	r1, [pc, #48]	@ (800579c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800576c:	4a0c      	ldr	r2, [pc, #48]	@ (80057a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800576e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005770:	e002      	b.n	8005778 <LoopCopyDataInit>

08005772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005776:	3304      	adds	r3, #4

08005778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800577a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800577c:	d3f9      	bcc.n	8005772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800577e:	4a09      	ldr	r2, [pc, #36]	@ (80057a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005780:	4c09      	ldr	r4, [pc, #36]	@ (80057a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005784:	e001      	b.n	800578a <LoopFillZerobss>

08005786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005788:	3204      	adds	r2, #4

0800578a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800578a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800578c:	d3fb      	bcc.n	8005786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800578e:	f004 f87f 	bl	8009890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005792:	f7ff fa99 	bl	8004cc8 <main>
  bx lr
 8005796:	4770      	bx	lr
  ldr r0, =_sdata
 8005798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800579c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80057a0:	0800c2e0 	.word	0x0800c2e0
  ldr r2, =_sbss
 80057a4:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80057a8:	20000f68 	.word	0x20000f68

080057ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80057ac:	e7fe      	b.n	80057ac <ADC1_2_IRQHandler>
	...

080057b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057b4:	4b08      	ldr	r3, [pc, #32]	@ (80057d8 <HAL_Init+0x28>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a07      	ldr	r2, [pc, #28]	@ (80057d8 <HAL_Init+0x28>)
 80057ba:	f043 0310 	orr.w	r3, r3, #16
 80057be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057c0:	2003      	movs	r0, #3
 80057c2:	f000 fe4d 	bl	8006460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057c6:	200f      	movs	r0, #15
 80057c8:	f000 f808 	bl	80057dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057cc:	f7ff fd46 	bl	800525c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40022000 	.word	0x40022000

080057dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057e4:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <HAL_InitTick+0x54>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b12      	ldr	r3, [pc, #72]	@ (8005834 <HAL_InitTick+0x58>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fe65 	bl	80064ca <HAL_SYSTICK_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e00e      	b.n	8005828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b0f      	cmp	r3, #15
 800580e:	d80a      	bhi.n	8005826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005810:	2200      	movs	r2, #0
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	f04f 30ff 	mov.w	r0, #4294967295
 8005818:	f000 fe2d 	bl	8006476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800581c:	4a06      	ldr	r2, [pc, #24]	@ (8005838 <HAL_InitTick+0x5c>)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000060 	.word	0x20000060
 8005834:	20000068 	.word	0x20000068
 8005838:	20000064 	.word	0x20000064

0800583c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_IncTick+0x1c>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	4b05      	ldr	r3, [pc, #20]	@ (800585c <HAL_IncTick+0x20>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4413      	add	r3, r2
 800584c:	4a03      	ldr	r2, [pc, #12]	@ (800585c <HAL_IncTick+0x20>)
 800584e:	6013      	str	r3, [r2, #0]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	20000068 	.word	0x20000068
 800585c:	20000e18 	.word	0x20000e18

08005860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return uwTick;
 8005864:	4b02      	ldr	r3, [pc, #8]	@ (8005870 <HAL_GetTick+0x10>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	20000e18 	.word	0x20000e18

08005874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800587c:	f7ff fff0 	bl	8005860 <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d005      	beq.n	800589a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800588e:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <HAL_Delay+0x44>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800589a:	bf00      	nop
 800589c:	f7ff ffe0 	bl	8005860 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d8f7      	bhi.n	800589c <HAL_Delay+0x28>
  {
  }
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000068 	.word	0x20000068

080058bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0be      	b.n	8005a5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb f902 	bl	8000b04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fbf1 	bl	80060e8 <ADC_ConversionStop_Disable>
 8005906:	4603      	mov	r3, r0
 8005908:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 8099 	bne.w	8005a4a <HAL_ADC_Init+0x18e>
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 8095 	bne.w	8005a4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005928:	f023 0302 	bic.w	r3, r3, #2
 800592c:	f043 0202 	orr.w	r2, r3, #2
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800593c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005944:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005954:	d003      	beq.n	800595e <HAL_ADC_Init+0xa2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d102      	bne.n	8005964 <HAL_ADC_Init+0xa8>
 800595e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005962:	e000      	b.n	8005966 <HAL_ADC_Init+0xaa>
 8005964:	2300      	movs	r3, #0
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	7d1b      	ldrb	r3, [r3, #20]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d119      	bne.n	80059a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7b1b      	ldrb	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	3b01      	subs	r3, #1
 8005982:	035a      	lsls	r2, r3, #13
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	e00b      	b.n	80059a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	f043 0201 	orr.w	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	4b28      	ldr	r3, [pc, #160]	@ (8005a64 <HAL_ADC_Init+0x1a8>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d8:	d003      	beq.n	80059e2 <HAL_ADC_Init+0x126>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d104      	bne.n	80059ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	051b      	lsls	r3, r3, #20
 80059ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_ADC_Init+0x1ac>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d10b      	bne.n	8005a28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005a26:	e018      	b.n	8005a5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	f023 0312 	bic.w	r3, r3, #18
 8005a30:	f043 0210 	orr.w	r2, r3, #16
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005a48:	e007      	b.n	8005a5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	f043 0210 	orr.w	r2, r3, #16
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	ffe1f7fd 	.word	0xffe1f7fd
 8005a68:	ff1f0efe 	.word	0xff1f0efe

08005a6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_ADC_Start+0x1a>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e098      	b.n	8005bb8 <HAL_ADC_Start+0x14c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fad0 	bl	8006034 <ADC_Enable>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 8087 	bne.w	8005bae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a41      	ldr	r2, [pc, #260]	@ (8005bc0 <HAL_ADC_Start+0x154>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d105      	bne.n	8005aca <HAL_ADC_Start+0x5e>
 8005abe:	4b41      	ldr	r3, [pc, #260]	@ (8005bc4 <HAL_ADC_Start+0x158>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d115      	bne.n	8005af6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d026      	beq.n	8005b32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005aec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005af4:	e01d      	b.n	8005b32 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc4 <HAL_ADC_Start+0x158>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_ADC_Start+0xaa>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2b      	ldr	r2, [pc, #172]	@ (8005bc0 <HAL_ADC_Start+0x154>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d10d      	bne.n	8005b32 <HAL_ADC_Start+0xc6>
 8005b16:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc4 <HAL_ADC_Start+0x158>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d006      	beq.n	8005b4c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	f023 0206 	bic.w	r2, r3, #6
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b4a:	e002      	b.n	8005b52 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f06f 0202 	mvn.w	r2, #2
 8005b62:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005b6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005b72:	d113      	bne.n	8005b9c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005b78:	4a11      	ldr	r2, [pc, #68]	@ (8005bc0 <HAL_ADC_Start+0x154>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d105      	bne.n	8005b8a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005b7e:	4b11      	ldr	r3, [pc, #68]	@ (8005bc4 <HAL_ADC_Start+0x158>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d108      	bne.n	8005b9c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005b98:	609a      	str	r2, [r3, #8]
 8005b9a:	e00c      	b.n	8005bb6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	e003      	b.n	8005bb6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40012800 	.word	0x40012800
 8005bc4:	40012400 	.word	0x40012400

08005bc8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_ADC_Stop+0x1a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e01a      	b.n	8005c18 <HAL_ADC_Stop+0x50>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa7c 	bl	80060e8 <ADC_ConversionStop_Disable>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005c36:	f7ff fe13 	bl	8005860 <HAL_GetTick>
 8005c3a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	f043 0220 	orr.w	r2, r3, #32
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0d3      	b.n	8005e0a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d131      	bne.n	8005cd4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d12a      	bne.n	8005cd4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005c7e:	e021      	b.n	8005cc4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d01d      	beq.n	8005cc4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_ADC_PollForConversion+0x7e>
 8005c8e:	f7ff fde7 	bl	8005860 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d212      	bcs.n	8005cc4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	f043 0204 	orr.w	r2, r3, #4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0a2      	b.n	8005e0a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0d6      	beq.n	8005c80 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005cd2:	e070      	b.n	8005db6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8005e14 <HAL_ADC_PollForConversion+0x1f4>)
 8005cd6:	681c      	ldr	r4, [r3, #0]
 8005cd8:	2002      	movs	r0, #2
 8005cda:	f001 fa95 	bl	8007208 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6919      	ldr	r1, [r3, #16]
 8005cea:	4b4b      	ldr	r3, [pc, #300]	@ (8005e18 <HAL_ADC_PollForConversion+0x1f8>)
 8005cec:	400b      	ands	r3, r1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d118      	bne.n	8005d24 <HAL_ADC_PollForConversion+0x104>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68d9      	ldr	r1, [r3, #12]
 8005cf8:	4b48      	ldr	r3, [pc, #288]	@ (8005e1c <HAL_ADC_PollForConversion+0x1fc>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d111      	bne.n	8005d24 <HAL_ADC_PollForConversion+0x104>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6919      	ldr	r1, [r3, #16]
 8005d06:	4b46      	ldr	r3, [pc, #280]	@ (8005e20 <HAL_ADC_PollForConversion+0x200>)
 8005d08:	400b      	ands	r3, r1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d108      	bne.n	8005d20 <HAL_ADC_PollForConversion+0x100>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68d9      	ldr	r1, [r3, #12]
 8005d14:	4b43      	ldr	r3, [pc, #268]	@ (8005e24 <HAL_ADC_PollForConversion+0x204>)
 8005d16:	400b      	ands	r3, r1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_ADC_PollForConversion+0x100>
 8005d1c:	2314      	movs	r3, #20
 8005d1e:	e020      	b.n	8005d62 <HAL_ADC_PollForConversion+0x142>
 8005d20:	2329      	movs	r3, #41	@ 0x29
 8005d22:	e01e      	b.n	8005d62 <HAL_ADC_PollForConversion+0x142>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6919      	ldr	r1, [r3, #16]
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e20 <HAL_ADC_PollForConversion+0x200>)
 8005d2c:	400b      	ands	r3, r1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_ADC_PollForConversion+0x120>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	4b3a      	ldr	r3, [pc, #232]	@ (8005e24 <HAL_ADC_PollForConversion+0x204>)
 8005d3a:	400b      	ands	r3, r1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_ADC_PollForConversion+0x13c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6919      	ldr	r1, [r3, #16]
 8005d46:	4b38      	ldr	r3, [pc, #224]	@ (8005e28 <HAL_ADC_PollForConversion+0x208>)
 8005d48:	400b      	ands	r3, r1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <HAL_ADC_PollForConversion+0x140>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68d9      	ldr	r1, [r3, #12]
 8005d54:	4b34      	ldr	r3, [pc, #208]	@ (8005e28 <HAL_ADC_PollForConversion+0x208>)
 8005d56:	400b      	ands	r3, r1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_ADC_PollForConversion+0x140>
 8005d5c:	2354      	movs	r3, #84	@ 0x54
 8005d5e:	e000      	b.n	8005d62 <HAL_ADC_PollForConversion+0x142>
 8005d60:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
 8005d66:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005d68:	e021      	b.n	8005dae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d01a      	beq.n	8005da8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_ADC_PollForConversion+0x168>
 8005d78:	f7ff fd72 	bl	8005860 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d20f      	bcs.n	8005da8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d90b      	bls.n	8005da8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	f043 0204 	orr.w	r2, r3, #4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e030      	b.n	8005e0a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d8d9      	bhi.n	8005d6a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f06f 0212 	mvn.w	r2, #18
 8005dbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005dd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005dda:	d115      	bne.n	8005e08 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d111      	bne.n	8005e08 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e00:	f043 0201 	orr.w	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd90      	pop	{r4, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000060 	.word	0x20000060
 8005e18:	24924924 	.word	0x24924924
 8005e1c:	00924924 	.word	0x00924924
 8005e20:	12492492 	.word	0x12492492
 8005e24:	00492492 	.word	0x00492492
 8005e28:	00249249 	.word	0x00249249

08005e2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_ADC_ConfigChannel+0x20>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e0dc      	b.n	800601e <HAL_ADC_ConfigChannel+0x1da>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b06      	cmp	r3, #6
 8005e72:	d81c      	bhi.n	8005eae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	3b05      	subs	r3, #5
 8005e86:	221f      	movs	r2, #31
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	4019      	ands	r1, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3b05      	subs	r3, #5
 8005ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	635a      	str	r2, [r3, #52]	@ 0x34
 8005eac:	e03c      	b.n	8005f28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	d81c      	bhi.n	8005ef0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	3b23      	subs	r3, #35	@ 0x23
 8005ec8:	221f      	movs	r2, #31
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	4019      	ands	r1, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	3b23      	subs	r3, #35	@ 0x23
 8005ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8005eee:	e01b      	b.n	8005f28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	3b41      	subs	r3, #65	@ 0x41
 8005f02:	221f      	movs	r2, #31
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	4019      	ands	r1, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	3b41      	subs	r3, #65	@ 0x41
 8005f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b09      	cmp	r3, #9
 8005f2e:	d91c      	bls.n	8005f6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68d9      	ldr	r1, [r3, #12]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b1e      	subs	r3, #30
 8005f42:	2207      	movs	r2, #7
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	4019      	ands	r1, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6898      	ldr	r0, [r3, #8]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	3b1e      	subs	r3, #30
 8005f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	e019      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6919      	ldr	r1, [r3, #16]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	2207      	movs	r2, #7
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	4019      	ands	r1, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6898      	ldr	r0, [r3, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	fa00 f203 	lsl.w	r2, r0, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b10      	cmp	r3, #16
 8005fa4:	d003      	beq.n	8005fae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005faa:	2b11      	cmp	r3, #17
 8005fac:	d132      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006028 <HAL_ADC_ConfigChannel+0x1e4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d125      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d126      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005fd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d11a      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005fde:	4b13      	ldr	r3, [pc, #76]	@ (800602c <HAL_ADC_ConfigChannel+0x1e8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a13      	ldr	r2, [pc, #76]	@ (8006030 <HAL_ADC_ConfigChannel+0x1ec>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	0c9a      	lsrs	r2, r3, #18
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005ff4:	e002      	b.n	8005ffc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f9      	bne.n	8005ff6 <HAL_ADC_ConfigChannel+0x1b2>
 8006002:	e007      	b.n	8006014 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f043 0220 	orr.w	r2, r3, #32
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr
 8006028:	40012400 	.word	0x40012400
 800602c:	20000060 	.word	0x20000060
 8006030:	431bde83 	.word	0x431bde83

08006034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	d040      	beq.n	80060d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006062:	4b1f      	ldr	r3, [pc, #124]	@ (80060e0 <ADC_Enable+0xac>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1f      	ldr	r2, [pc, #124]	@ (80060e4 <ADC_Enable+0xb0>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	0c9b      	lsrs	r3, r3, #18
 800606e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006070:	e002      	b.n	8006078 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3b01      	subs	r3, #1
 8006076:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f9      	bne.n	8006072 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800607e:	f7ff fbef 	bl	8005860 <HAL_GetTick>
 8006082:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006084:	e01f      	b.n	80060c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006086:	f7ff fbeb 	bl	8005860 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d918      	bls.n	80060c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d011      	beq.n	80060c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f043 0210 	orr.w	r2, r3, #16
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	f043 0201 	orr.w	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e007      	b.n	80060d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d1d8      	bne.n	8006086 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000060 	.word	0x20000060
 80060e4:	431bde83 	.word	0x431bde83

080060e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d12e      	bne.n	8006160 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006112:	f7ff fba5 	bl	8005860 <HAL_GetTick>
 8006116:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006118:	e01b      	b.n	8006152 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800611a:	f7ff fba1 	bl	8005860 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d914      	bls.n	8006152 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10d      	bne.n	8006152 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	f043 0210 	orr.w	r2, r3, #16
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	f043 0201 	orr.w	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e007      	b.n	8006162 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	d0dc      	beq.n	800611a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_ADCEx_Calibration_Start+0x1e>
 8006186:	2302      	movs	r3, #2
 8006188:	e097      	b.n	80062ba <HAL_ADCEx_Calibration_Start+0x14e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ffa8 	bl	80060e8 <ADC_ConversionStop_Disable>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff49 	bl	8006034 <ADC_Enable>
 80061a2:	4603      	mov	r3, r0
 80061a4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8081 	bne.w	80062b0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80061b6:	f023 0302 	bic.w	r3, r3, #2
 80061ba:	f043 0202 	orr.w	r2, r3, #2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80061c2:	4b40      	ldr	r3, [pc, #256]	@ (80062c4 <HAL_ADCEx_Calibration_Start+0x158>)
 80061c4:	681c      	ldr	r4, [r3, #0]
 80061c6:	2002      	movs	r0, #2
 80061c8:	f001 f81e 	bl	8007208 <HAL_RCCEx_GetPeriphCLKFreq>
 80061cc:	4603      	mov	r3, r0
 80061ce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80061d2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80061d4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80061d6:	e002      	b.n	80061de <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f9      	bne.n	80061d8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0208 	orr.w	r2, r2, #8
 80061f2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80061f4:	f7ff fb34 	bl	8005860 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80061fa:	e01b      	b.n	8006234 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80061fc:	f7ff fb30 	bl	8005860 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b0a      	cmp	r3, #10
 8006208:	d914      	bls.n	8006234 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	f023 0312 	bic.w	r3, r3, #18
 8006220:	f043 0210 	orr.w	r2, r3, #16
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e042      	b.n	80062ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1dc      	bne.n	80061fc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0204 	orr.w	r2, r2, #4
 8006250:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006252:	f7ff fb05 	bl	8005860 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006258:	e01b      	b.n	8006292 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800625a:	f7ff fb01 	bl	8005860 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b0a      	cmp	r3, #10
 8006266:	d914      	bls.n	8006292 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	f023 0312 	bic.w	r3, r3, #18
 800627e:	f043 0210 	orr.w	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e013      	b.n	80062ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1dc      	bne.n	800625a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	f023 0303 	bic.w	r3, r3, #3
 80062a8:	f043 0201 	orr.w	r2, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000060 	.word	0x20000060

080062c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062d8:	4b0c      	ldr	r3, [pc, #48]	@ (800630c <__NVIC_SetPriorityGrouping+0x44>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062fa:	4a04      	ldr	r2, [pc, #16]	@ (800630c <__NVIC_SetPriorityGrouping+0x44>)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	60d3      	str	r3, [r2, #12]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006314:	4b04      	ldr	r3, [pc, #16]	@ (8006328 <__NVIC_GetPriorityGrouping+0x18>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 0307 	and.w	r3, r3, #7
}
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633a:	2b00      	cmp	r3, #0
 800633c:	db0b      	blt.n	8006356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 021f 	and.w	r2, r3, #31
 8006344:	4906      	ldr	r1, [pc, #24]	@ (8006360 <__NVIC_EnableIRQ+0x34>)
 8006346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2001      	movs	r0, #1
 800634e:	fa00 f202 	lsl.w	r2, r0, r2
 8006352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr
 8006360:	e000e100 	.word	0xe000e100

08006364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	6039      	str	r1, [r7, #0]
 800636e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006374:	2b00      	cmp	r3, #0
 8006376:	db0a      	blt.n	800638e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	490c      	ldr	r1, [pc, #48]	@ (80063b0 <__NVIC_SetPriority+0x4c>)
 800637e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006382:	0112      	lsls	r2, r2, #4
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	440b      	add	r3, r1
 8006388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800638c:	e00a      	b.n	80063a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4908      	ldr	r1, [pc, #32]	@ (80063b4 <__NVIC_SetPriority+0x50>)
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	3b04      	subs	r3, #4
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	440b      	add	r3, r1
 80063a2:	761a      	strb	r2, [r3, #24]
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e100 	.word	0xe000e100
 80063b4:	e000ed00 	.word	0xe000ed00

080063b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	@ 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f1c3 0307 	rsb	r3, r3, #7
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf28      	it	cs
 80063d6:	2304      	movcs	r3, #4
 80063d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3304      	adds	r3, #4
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d902      	bls.n	80063e8 <NVIC_EncodePriority+0x30>
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3b03      	subs	r3, #3
 80063e6:	e000      	b.n	80063ea <NVIC_EncodePriority+0x32>
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43da      	mvns	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	401a      	ands	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006400:	f04f 31ff 	mov.w	r1, #4294967295
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	43d9      	mvns	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006410:	4313      	orrs	r3, r2
         );
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	@ 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3b01      	subs	r3, #1
 8006428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800642c:	d301      	bcc.n	8006432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800642e:	2301      	movs	r3, #1
 8006430:	e00f      	b.n	8006452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006432:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <SysTick_Config+0x40>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3b01      	subs	r3, #1
 8006438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800643a:	210f      	movs	r1, #15
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	f7ff ff90 	bl	8006364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <SysTick_Config+0x40>)
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800644a:	4b04      	ldr	r3, [pc, #16]	@ (800645c <SysTick_Config+0x40>)
 800644c:	2207      	movs	r2, #7
 800644e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	e000e010 	.word	0xe000e010

08006460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff ff2d 	bl	80062c8 <__NVIC_SetPriorityGrouping>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	4603      	mov	r3, r0
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006488:	f7ff ff42 	bl	8006310 <__NVIC_GetPriorityGrouping>
 800648c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	6978      	ldr	r0, [r7, #20]
 8006494:	f7ff ff90 	bl	80063b8 <NVIC_EncodePriority>
 8006498:	4602      	mov	r2, r0
 800649a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800649e:	4611      	mov	r1, r2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff5f 	bl	8006364 <__NVIC_SetPriority>
}
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	4603      	mov	r3, r0
 80064b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ff35 	bl	800632c <__NVIC_EnableIRQ>
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff ffa2 	bl	800641c <SysTick_Config>
 80064d8:	4603      	mov	r3, r0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b08b      	sub	sp, #44	@ 0x2c
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064ee:	2300      	movs	r3, #0
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80064f2:	2300      	movs	r3, #0
 80064f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064f6:	e169      	b.n	80067cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80064f8:	2201      	movs	r2, #1
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	4013      	ands	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	429a      	cmp	r2, r3
 8006512:	f040 8158 	bne.w	80067c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4a9a      	ldr	r2, [pc, #616]	@ (8006784 <HAL_GPIO_Init+0x2a0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d05e      	beq.n	80065de <HAL_GPIO_Init+0xfa>
 8006520:	4a98      	ldr	r2, [pc, #608]	@ (8006784 <HAL_GPIO_Init+0x2a0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d875      	bhi.n	8006612 <HAL_GPIO_Init+0x12e>
 8006526:	4a98      	ldr	r2, [pc, #608]	@ (8006788 <HAL_GPIO_Init+0x2a4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d058      	beq.n	80065de <HAL_GPIO_Init+0xfa>
 800652c:	4a96      	ldr	r2, [pc, #600]	@ (8006788 <HAL_GPIO_Init+0x2a4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d86f      	bhi.n	8006612 <HAL_GPIO_Init+0x12e>
 8006532:	4a96      	ldr	r2, [pc, #600]	@ (800678c <HAL_GPIO_Init+0x2a8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d052      	beq.n	80065de <HAL_GPIO_Init+0xfa>
 8006538:	4a94      	ldr	r2, [pc, #592]	@ (800678c <HAL_GPIO_Init+0x2a8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d869      	bhi.n	8006612 <HAL_GPIO_Init+0x12e>
 800653e:	4a94      	ldr	r2, [pc, #592]	@ (8006790 <HAL_GPIO_Init+0x2ac>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d04c      	beq.n	80065de <HAL_GPIO_Init+0xfa>
 8006544:	4a92      	ldr	r2, [pc, #584]	@ (8006790 <HAL_GPIO_Init+0x2ac>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d863      	bhi.n	8006612 <HAL_GPIO_Init+0x12e>
 800654a:	4a92      	ldr	r2, [pc, #584]	@ (8006794 <HAL_GPIO_Init+0x2b0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d046      	beq.n	80065de <HAL_GPIO_Init+0xfa>
 8006550:	4a90      	ldr	r2, [pc, #576]	@ (8006794 <HAL_GPIO_Init+0x2b0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d85d      	bhi.n	8006612 <HAL_GPIO_Init+0x12e>
 8006556:	2b12      	cmp	r3, #18
 8006558:	d82a      	bhi.n	80065b0 <HAL_GPIO_Init+0xcc>
 800655a:	2b12      	cmp	r3, #18
 800655c:	d859      	bhi.n	8006612 <HAL_GPIO_Init+0x12e>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <HAL_GPIO_Init+0x80>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065df 	.word	0x080065df
 8006568:	080065b9 	.word	0x080065b9
 800656c:	080065cb 	.word	0x080065cb
 8006570:	0800660d 	.word	0x0800660d
 8006574:	08006613 	.word	0x08006613
 8006578:	08006613 	.word	0x08006613
 800657c:	08006613 	.word	0x08006613
 8006580:	08006613 	.word	0x08006613
 8006584:	08006613 	.word	0x08006613
 8006588:	08006613 	.word	0x08006613
 800658c:	08006613 	.word	0x08006613
 8006590:	08006613 	.word	0x08006613
 8006594:	08006613 	.word	0x08006613
 8006598:	08006613 	.word	0x08006613
 800659c:	08006613 	.word	0x08006613
 80065a0:	08006613 	.word	0x08006613
 80065a4:	08006613 	.word	0x08006613
 80065a8:	080065c1 	.word	0x080065c1
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	4a79      	ldr	r2, [pc, #484]	@ (8006798 <HAL_GPIO_Init+0x2b4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d013      	beq.n	80065de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80065b6:	e02c      	b.n	8006612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	623b      	str	r3, [r7, #32]
          break;
 80065be:	e029      	b.n	8006614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	623b      	str	r3, [r7, #32]
          break;
 80065c8:	e024      	b.n	8006614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	3308      	adds	r3, #8
 80065d0:	623b      	str	r3, [r7, #32]
          break;
 80065d2:	e01f      	b.n	8006614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	330c      	adds	r3, #12
 80065da:	623b      	str	r3, [r7, #32]
          break;
 80065dc:	e01a      	b.n	8006614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065e6:	2304      	movs	r3, #4
 80065e8:	623b      	str	r3, [r7, #32]
          break;
 80065ea:	e013      	b.n	8006614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d105      	bne.n	8006600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065f4:	2308      	movs	r3, #8
 80065f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	611a      	str	r2, [r3, #16]
          break;
 80065fe:	e009      	b.n	8006614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006600:	2308      	movs	r3, #8
 8006602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	615a      	str	r2, [r3, #20]
          break;
 800660a:	e003      	b.n	8006614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800660c:	2300      	movs	r3, #0
 800660e:	623b      	str	r3, [r7, #32]
          break;
 8006610:	e000      	b.n	8006614 <HAL_GPIO_Init+0x130>
          break;
 8006612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2bff      	cmp	r3, #255	@ 0xff
 8006618:	d801      	bhi.n	800661e <HAL_GPIO_Init+0x13a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	e001      	b.n	8006622 <HAL_GPIO_Init+0x13e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3304      	adds	r3, #4
 8006622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2bff      	cmp	r3, #255	@ 0xff
 8006628:	d802      	bhi.n	8006630 <HAL_GPIO_Init+0x14c>
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	e002      	b.n	8006636 <HAL_GPIO_Init+0x152>
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	3b08      	subs	r3, #8
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	210f      	movs	r1, #15
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	6a39      	ldr	r1, [r7, #32]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	fa01 f303 	lsl.w	r3, r1, r3
 8006650:	431a      	orrs	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80b1 	beq.w	80067c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006664:	4b4d      	ldr	r3, [pc, #308]	@ (800679c <HAL_GPIO_Init+0x2b8>)
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	4a4c      	ldr	r2, [pc, #304]	@ (800679c <HAL_GPIO_Init+0x2b8>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6193      	str	r3, [r2, #24]
 8006670:	4b4a      	ldr	r3, [pc, #296]	@ (800679c <HAL_GPIO_Init+0x2b8>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800667c:	4a48      	ldr	r2, [pc, #288]	@ (80067a0 <HAL_GPIO_Init+0x2bc>)
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	089b      	lsrs	r3, r3, #2
 8006682:	3302      	adds	r3, #2
 8006684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	220f      	movs	r2, #15
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a40      	ldr	r2, [pc, #256]	@ (80067a4 <HAL_GPIO_Init+0x2c0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <HAL_GPIO_Init+0x1ec>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a3f      	ldr	r2, [pc, #252]	@ (80067a8 <HAL_GPIO_Init+0x2c4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00d      	beq.n	80066cc <HAL_GPIO_Init+0x1e8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a3e      	ldr	r2, [pc, #248]	@ (80067ac <HAL_GPIO_Init+0x2c8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d007      	beq.n	80066c8 <HAL_GPIO_Init+0x1e4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a3d      	ldr	r2, [pc, #244]	@ (80067b0 <HAL_GPIO_Init+0x2cc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d101      	bne.n	80066c4 <HAL_GPIO_Init+0x1e0>
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <HAL_GPIO_Init+0x1ee>
 80066c4:	2304      	movs	r3, #4
 80066c6:	e004      	b.n	80066d2 <HAL_GPIO_Init+0x1ee>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e002      	b.n	80066d2 <HAL_GPIO_Init+0x1ee>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_GPIO_Init+0x1ee>
 80066d0:	2300      	movs	r3, #0
 80066d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d4:	f002 0203 	and.w	r2, r2, #3
 80066d8:	0092      	lsls	r2, r2, #2
 80066da:	4093      	lsls	r3, r2
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066e2:	492f      	ldr	r1, [pc, #188]	@ (80067a0 <HAL_GPIO_Init+0x2bc>)
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	089b      	lsrs	r3, r3, #2
 80066e8:	3302      	adds	r3, #2
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80066fc:	4b2d      	ldr	r3, [pc, #180]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	492c      	ldr	r1, [pc, #176]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	4313      	orrs	r3, r2
 8006706:	608b      	str	r3, [r1, #8]
 8006708:	e006      	b.n	8006718 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800670a:	4b2a      	ldr	r3, [pc, #168]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	43db      	mvns	r3, r3
 8006712:	4928      	ldr	r1, [pc, #160]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006714:	4013      	ands	r3, r2
 8006716:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d006      	beq.n	8006732 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006724:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	4922      	ldr	r1, [pc, #136]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	4313      	orrs	r3, r2
 800672e:	60cb      	str	r3, [r1, #12]
 8006730:	e006      	b.n	8006740 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006732:	4b20      	ldr	r3, [pc, #128]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	43db      	mvns	r3, r3
 800673a:	491e      	ldr	r1, [pc, #120]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 800673c:	4013      	ands	r3, r2
 800673e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d006      	beq.n	800675a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800674c:	4b19      	ldr	r3, [pc, #100]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4918      	ldr	r1, [pc, #96]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	e006      	b.n	8006768 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800675a:	4b16      	ldr	r3, [pc, #88]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	43db      	mvns	r3, r3
 8006762:	4914      	ldr	r1, [pc, #80]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006764:	4013      	ands	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d021      	beq.n	80067b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006774:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	490e      	ldr	r1, [pc, #56]	@ (80067b4 <HAL_GPIO_Init+0x2d0>)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	4313      	orrs	r3, r2
 800677e:	600b      	str	r3, [r1, #0]
 8006780:	e021      	b.n	80067c6 <HAL_GPIO_Init+0x2e2>
 8006782:	bf00      	nop
 8006784:	10320000 	.word	0x10320000
 8006788:	10310000 	.word	0x10310000
 800678c:	10220000 	.word	0x10220000
 8006790:	10210000 	.word	0x10210000
 8006794:	10120000 	.word	0x10120000
 8006798:	10110000 	.word	0x10110000
 800679c:	40021000 	.word	0x40021000
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40010800 	.word	0x40010800
 80067a8:	40010c00 	.word	0x40010c00
 80067ac:	40011000 	.word	0x40011000
 80067b0:	40011400 	.word	0x40011400
 80067b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80067b8:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <HAL_GPIO_Init+0x304>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	43db      	mvns	r3, r3
 80067c0:	4909      	ldr	r1, [pc, #36]	@ (80067e8 <HAL_GPIO_Init+0x304>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	3301      	adds	r3, #1
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	fa22 f303 	lsr.w	r3, r2, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f47f ae8e 	bne.w	80064f8 <HAL_GPIO_Init+0x14>
  }
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	372c      	adds	r7, #44	@ 0x2c
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	40010400 	.word	0x40010400

080067ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	887b      	ldrh	r3, [r7, #2]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
 8006808:	e001      	b.n	800680e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	807b      	strh	r3, [r7, #2]
 8006826:	4613      	mov	r3, r2
 8006828:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800682a:	787b      	ldrb	r3, [r7, #1]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006830:	887a      	ldrh	r2, [r7, #2]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006836:	e003      	b.n	8006840 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006838:	887b      	ldrh	r3, [r7, #2]
 800683a:	041a      	lsls	r2, r3, #16
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	611a      	str	r2, [r3, #16]
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
	...

0800684c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006856:	4b08      	ldr	r3, [pc, #32]	@ (8006878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	4013      	ands	r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d006      	beq.n	8006870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006862:	4a05      	ldr	r2, [pc, #20]	@ (8006878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fa fb70 	bl	8000f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40010400 	.word	0x40010400

0800687c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e272      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8087 	beq.w	80069aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800689c:	4b92      	ldr	r3, [pc, #584]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d00c      	beq.n	80068c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068a8:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d112      	bne.n	80068da <HAL_RCC_OscConfig+0x5e>
 80068b4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c0:	d10b      	bne.n	80068da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c2:	4b89      	ldr	r3, [pc, #548]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d06c      	beq.n	80069a8 <HAL_RCC_OscConfig+0x12c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d168      	bne.n	80069a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e24c      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e2:	d106      	bne.n	80068f2 <HAL_RCC_OscConfig+0x76>
 80068e4:	4b80      	ldr	r3, [pc, #512]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80068ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e02e      	b.n	8006950 <HAL_RCC_OscConfig+0xd4>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10c      	bne.n	8006914 <HAL_RCC_OscConfig+0x98>
 80068fa:	4b7b      	ldr	r3, [pc, #492]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a7a      	ldr	r2, [pc, #488]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	4b78      	ldr	r3, [pc, #480]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a77      	ldr	r2, [pc, #476]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800690c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e01d      	b.n	8006950 <HAL_RCC_OscConfig+0xd4>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800691c:	d10c      	bne.n	8006938 <HAL_RCC_OscConfig+0xbc>
 800691e:	4b72      	ldr	r3, [pc, #456]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a71      	ldr	r2, [pc, #452]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a6e      	ldr	r2, [pc, #440]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	e00b      	b.n	8006950 <HAL_RCC_OscConfig+0xd4>
 8006938:	4b6b      	ldr	r3, [pc, #428]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a6a      	ldr	r2, [pc, #424]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800693e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	4b68      	ldr	r3, [pc, #416]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a67      	ldr	r2, [pc, #412]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800694a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d013      	beq.n	8006980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006958:	f7fe ff82 	bl	8005860 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006960:	f7fe ff7e 	bl	8005860 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b64      	cmp	r3, #100	@ 0x64
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e200      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006972:	4b5d      	ldr	r3, [pc, #372]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0xe4>
 800697e:	e014      	b.n	80069aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006980:	f7fe ff6e 	bl	8005860 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006988:	f7fe ff6a 	bl	8005860 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b64      	cmp	r3, #100	@ 0x64
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e1ec      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800699a:	4b53      	ldr	r3, [pc, #332]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x10c>
 80069a6:	e000      	b.n	80069aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d063      	beq.n	8006a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069b6:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 030c 	and.w	r3, r3, #12
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069c2:	4b49      	ldr	r3, [pc, #292]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d11c      	bne.n	8006a08 <HAL_RCC_OscConfig+0x18c>
 80069ce:	4b46      	ldr	r3, [pc, #280]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d116      	bne.n	8006a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069da:	4b43      	ldr	r3, [pc, #268]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_RCC_OscConfig+0x176>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d001      	beq.n	80069f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e1c0      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	4939      	ldr	r1, [pc, #228]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a06:	e03a      	b.n	8006a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d020      	beq.n	8006a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a10:	4b36      	ldr	r3, [pc, #216]	@ (8006aec <HAL_RCC_OscConfig+0x270>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a16:	f7fe ff23 	bl	8005860 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a1e:	f7fe ff1f 	bl	8005860 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e1a1      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0f0      	beq.n	8006a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	4927      	ldr	r1, [pc, #156]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	600b      	str	r3, [r1, #0]
 8006a50:	e015      	b.n	8006a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a52:	4b26      	ldr	r3, [pc, #152]	@ (8006aec <HAL_RCC_OscConfig+0x270>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a58:	f7fe ff02 	bl	8005860 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a60:	f7fe fefe 	bl	8005860 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e180      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a72:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d03a      	beq.n	8006b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d019      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a92:	4b17      	ldr	r3, [pc, #92]	@ (8006af0 <HAL_RCC_OscConfig+0x274>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a98:	f7fe fee2 	bl	8005860 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa0:	f7fe fede 	bl	8005860 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e160      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <HAL_RCC_OscConfig+0x26c>)
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006abe:	2001      	movs	r0, #1
 8006ac0:	f000 face 	bl	8007060 <RCC_Delay>
 8006ac4:	e01c      	b.n	8006b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <HAL_RCC_OscConfig+0x274>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006acc:	f7fe fec8 	bl	8005860 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad2:	e00f      	b.n	8006af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ad4:	f7fe fec4 	bl	8005860 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d908      	bls.n	8006af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e146      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	42420000 	.word	0x42420000
 8006af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af4:	4b92      	ldr	r3, [pc, #584]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e9      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80a6 	beq.w	8006c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b12:	4b8b      	ldr	r3, [pc, #556]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	4b88      	ldr	r3, [pc, #544]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	4a87      	ldr	r2, [pc, #540]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b28:	61d3      	str	r3, [r2, #28]
 8006b2a:	4b85      	ldr	r3, [pc, #532]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3a:	4b82      	ldr	r3, [pc, #520]	@ (8006d44 <HAL_RCC_OscConfig+0x4c8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d118      	bne.n	8006b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b46:	4b7f      	ldr	r3, [pc, #508]	@ (8006d44 <HAL_RCC_OscConfig+0x4c8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d44 <HAL_RCC_OscConfig+0x4c8>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b52:	f7fe fe85 	bl	8005860 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b5a:	f7fe fe81 	bl	8005860 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b64      	cmp	r3, #100	@ 0x64
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e103      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6c:	4b75      	ldr	r3, [pc, #468]	@ (8006d44 <HAL_RCC_OscConfig+0x4c8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0f0      	beq.n	8006b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCC_OscConfig+0x312>
 8006b80:	4b6f      	ldr	r3, [pc, #444]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	4a6e      	ldr	r2, [pc, #440]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	6213      	str	r3, [r2, #32]
 8006b8c:	e02d      	b.n	8006bea <HAL_RCC_OscConfig+0x36e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x334>
 8006b96:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	4a69      	ldr	r2, [pc, #420]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	6213      	str	r3, [r2, #32]
 8006ba2:	4b67      	ldr	r3, [pc, #412]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	4a66      	ldr	r2, [pc, #408]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006ba8:	f023 0304 	bic.w	r3, r3, #4
 8006bac:	6213      	str	r3, [r2, #32]
 8006bae:	e01c      	b.n	8006bea <HAL_RCC_OscConfig+0x36e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b05      	cmp	r3, #5
 8006bb6:	d10c      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x356>
 8006bb8:	4b61      	ldr	r3, [pc, #388]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	4a60      	ldr	r2, [pc, #384]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006bbe:	f043 0304 	orr.w	r3, r3, #4
 8006bc2:	6213      	str	r3, [r2, #32]
 8006bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	6213      	str	r3, [r2, #32]
 8006bd0:	e00b      	b.n	8006bea <HAL_RCC_OscConfig+0x36e>
 8006bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6213      	str	r3, [r2, #32]
 8006bde:	4b58      	ldr	r3, [pc, #352]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	4a57      	ldr	r2, [pc, #348]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d015      	beq.n	8006c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf2:	f7fe fe35 	bl	8005860 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bfa:	f7fe fe31 	bl	8005860 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0b1      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c10:	4b4b      	ldr	r3, [pc, #300]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0ee      	beq.n	8006bfa <HAL_RCC_OscConfig+0x37e>
 8006c1c:	e014      	b.n	8006c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1e:	f7fe fe1f 	bl	8005860 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c24:	e00a      	b.n	8006c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c26:	f7fe fe1b 	bl	8005860 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e09b      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3c:	4b40      	ldr	r3, [pc, #256]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ee      	bne.n	8006c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	4a3b      	ldr	r2, [pc, #236]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8087 	beq.w	8006d72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c64:	4b36      	ldr	r3, [pc, #216]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f003 030c 	and.w	r3, r3, #12
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d061      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d146      	bne.n	8006d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c78:	4b33      	ldr	r3, [pc, #204]	@ (8006d48 <HAL_RCC_OscConfig+0x4cc>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7e:	f7fe fdef 	bl	8005860 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c86:	f7fe fdeb 	bl	8005860 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e06d      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c98:	4b29      	ldr	r3, [pc, #164]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f0      	bne.n	8006c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cac:	d108      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006cae:	4b24      	ldr	r3, [pc, #144]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	4921      	ldr	r1, [pc, #132]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a19      	ldr	r1, [r3, #32]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	491b      	ldr	r1, [pc, #108]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d48 <HAL_RCC_OscConfig+0x4cc>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cde:	f7fe fdbf 	bl	8005860 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce6:	f7fe fdbb 	bl	8005860 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e03d      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cf8:	4b11      	ldr	r3, [pc, #68]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f0      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x46a>
 8006d04:	e035      	b.n	8006d72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d06:	4b10      	ldr	r3, [pc, #64]	@ (8006d48 <HAL_RCC_OscConfig+0x4cc>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0c:	f7fe fda8 	bl	8005860 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d14:	f7fe fda4 	bl	8005860 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e026      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d26:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0x498>
 8006d32:	e01e      	b.n	8006d72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d107      	bne.n	8006d4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e019      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
 8006d40:	40021000 	.word	0x40021000
 8006d44:	40007000 	.word	0x40007000
 8006d48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <HAL_RCC_OscConfig+0x500>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d001      	beq.n	8006d72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40021000 	.word	0x40021000

08006d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0d0      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d94:	4b6a      	ldr	r3, [pc, #424]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d910      	bls.n	8006dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b67      	ldr	r3, [pc, #412]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f023 0207 	bic.w	r2, r3, #7
 8006daa:	4965      	ldr	r1, [pc, #404]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db2:	4b63      	ldr	r3, [pc, #396]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d001      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0b8      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d020      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ddc:	4b59      	ldr	r3, [pc, #356]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a58      	ldr	r2, [pc, #352]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006df4:	4b53      	ldr	r3, [pc, #332]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4a52      	ldr	r2, [pc, #328]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e00:	4b50      	ldr	r3, [pc, #320]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	494d      	ldr	r1, [pc, #308]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d040      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e26:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d115      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e07f      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e3e:	4b41      	ldr	r3, [pc, #260]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e073      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e06b      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e5e:	4b39      	ldr	r3, [pc, #228]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f023 0203 	bic.w	r2, r3, #3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4936      	ldr	r1, [pc, #216]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e70:	f7fe fcf6 	bl	8005860 <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e78:	f7fe fcf2 	bl	8005860 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e053      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f003 020c 	and.w	r2, r3, #12
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d1eb      	bne.n	8006e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ea0:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d210      	bcs.n	8006ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eae:	4b24      	ldr	r3, [pc, #144]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 0207 	bic.w	r2, r3, #7
 8006eb6:	4922      	ldr	r1, [pc, #136]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ebe:	4b20      	ldr	r3, [pc, #128]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e032      	b.n	8006f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d008      	beq.n	8006eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006edc:	4b19      	ldr	r3, [pc, #100]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4916      	ldr	r1, [pc, #88]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006efa:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	490e      	ldr	r1, [pc, #56]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f0e:	f000 f821 	bl	8006f54 <HAL_RCC_GetSysClockFreq>
 8006f12:	4602      	mov	r2, r0
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	490a      	ldr	r1, [pc, #40]	@ (8006f48 <HAL_RCC_ClockConfig+0x1c8>)
 8006f20:	5ccb      	ldrb	r3, [r1, r3]
 8006f22:	fa22 f303 	lsr.w	r3, r2, r3
 8006f26:	4a09      	ldr	r2, [pc, #36]	@ (8006f4c <HAL_RCC_ClockConfig+0x1cc>)
 8006f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f2a:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <HAL_RCC_ClockConfig+0x1d0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fc54 	bl	80057dc <HAL_InitTick>

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40022000 	.word	0x40022000
 8006f44:	40021000 	.word	0x40021000
 8006f48:	0800bf20 	.word	0x0800bf20
 8006f4c:	20000060 	.word	0x20000060
 8006f50:	20000064 	.word	0x20000064

08006f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	2300      	movs	r3, #0
 8006f68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 030c 	and.w	r3, r3, #12
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d002      	beq.n	8006f84 <HAL_RCC_GetSysClockFreq+0x30>
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d003      	beq.n	8006f8a <HAL_RCC_GetSysClockFreq+0x36>
 8006f82:	e027      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f84:	4b19      	ldr	r3, [pc, #100]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x98>)
 8006f86:	613b      	str	r3, [r7, #16]
      break;
 8006f88:	e027      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	0c9b      	lsrs	r3, r3, #18
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	4a17      	ldr	r2, [pc, #92]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f94:	5cd3      	ldrb	r3, [r2, r3]
 8006f96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fa2:	4b11      	ldr	r3, [pc, #68]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	0c5b      	lsrs	r3, r3, #17
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	4a11      	ldr	r2, [pc, #68]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006fae:	5cd3      	ldrb	r3, [r2, r3]
 8006fb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x98>)
 8006fb6:	fb03 f202 	mul.w	r2, r3, r2
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e004      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ff8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	613b      	str	r3, [r7, #16]
      break;
 8006fd2:	e002      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fd4:	4b05      	ldr	r3, [pc, #20]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x98>)
 8006fd6:	613b      	str	r3, [r7, #16]
      break;
 8006fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fda:	693b      	ldr	r3, [r7, #16]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	007a1200 	.word	0x007a1200
 8006ff0:	0800bf38 	.word	0x0800bf38
 8006ff4:	0800bf48 	.word	0x0800bf48
 8006ff8:	003d0900 	.word	0x003d0900

08006ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007000:	4b02      	ldr	r3, [pc, #8]	@ (800700c <HAL_RCC_GetHCLKFreq+0x10>)
 8007002:	681b      	ldr	r3, [r3, #0]
}
 8007004:	4618      	mov	r0, r3
 8007006:	46bd      	mov	sp, r7
 8007008:	bc80      	pop	{r7}
 800700a:	4770      	bx	lr
 800700c:	20000060 	.word	0x20000060

08007010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007014:	f7ff fff2 	bl	8006ffc <HAL_RCC_GetHCLKFreq>
 8007018:	4602      	mov	r2, r0
 800701a:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	0a1b      	lsrs	r3, r3, #8
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	4903      	ldr	r1, [pc, #12]	@ (8007034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007026:	5ccb      	ldrb	r3, [r1, r3]
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40021000 	.word	0x40021000
 8007034:	0800bf30 	.word	0x0800bf30

08007038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800703c:	f7ff ffde 	bl	8006ffc <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	0adb      	lsrs	r3, r3, #11
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4903      	ldr	r1, [pc, #12]	@ (800705c <HAL_RCC_GetPCLK2Freq+0x24>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000
 800705c:	0800bf30 	.word	0x0800bf30

08007060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007068:	4b0a      	ldr	r3, [pc, #40]	@ (8007094 <RCC_Delay+0x34>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0a      	ldr	r2, [pc, #40]	@ (8007098 <RCC_Delay+0x38>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	0a5b      	lsrs	r3, r3, #9
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800707c:	bf00      	nop
  }
  while (Delay --);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1e5a      	subs	r2, r3, #1
 8007082:	60fa      	str	r2, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f9      	bne.n	800707c <RCC_Delay+0x1c>
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	20000060 	.word	0x20000060
 8007098:	10624dd3 	.word	0x10624dd3

0800709c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d07d      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070bc:	4b4f      	ldr	r3, [pc, #316]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070c8:	4b4c      	ldr	r3, [pc, #304]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4a4b      	ldr	r2, [pc, #300]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d2:	61d3      	str	r3, [r2, #28]
 80070d4:	4b49      	ldr	r3, [pc, #292]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e4:	4b46      	ldr	r3, [pc, #280]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d118      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070f0:	4b43      	ldr	r3, [pc, #268]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a42      	ldr	r2, [pc, #264]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070fc:	f7fe fbb0 	bl	8005860 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007102:	e008      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007104:	f7fe fbac 	bl	8005860 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b64      	cmp	r3, #100	@ 0x64
 8007110:	d901      	bls.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e06d      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007116:	4b3a      	ldr	r3, [pc, #232]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007122:	4b36      	ldr	r3, [pc, #216]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800712a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d02e      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d027      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007140:	4b2e      	ldr	r3, [pc, #184]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007148:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800714a:	4b2e      	ldr	r3, [pc, #184]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007150:	4b2c      	ldr	r3, [pc, #176]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007156:	4a29      	ldr	r2, [pc, #164]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d014      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007166:	f7fe fb7b 	bl	8005860 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800716c:	e00a      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716e:	f7fe fb77 	bl	8005860 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e036      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007184:	4b1d      	ldr	r3, [pc, #116]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ee      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007190:	4b1a      	ldr	r3, [pc, #104]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4917      	ldr	r1, [pc, #92]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a8:	4b14      	ldr	r3, [pc, #80]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4a13      	ldr	r2, [pc, #76]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071c0:	4b0e      	ldr	r3, [pc, #56]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	490b      	ldr	r1, [pc, #44]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071de:	4b07      	ldr	r3, [pc, #28]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	4904      	ldr	r1, [pc, #16]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
 8007200:	40007000 	.word	0x40007000
 8007204:	42420440 	.word	0x42420440

08007208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	2300      	movs	r3, #0
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	2300      	movs	r3, #0
 8007222:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b10      	cmp	r3, #16
 8007228:	d00a      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b10      	cmp	r3, #16
 800722e:	f200 808a 	bhi.w	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d045      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d075      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800723e:	e082      	b.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007240:	4b46      	ldr	r3, [pc, #280]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007246:	4b45      	ldr	r3, [pc, #276]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d07b      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	0c9b      	lsrs	r3, r3, #18
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	4a41      	ldr	r2, [pc, #260]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800725c:	5cd3      	ldrb	r3, [r2, r3]
 800725e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d015      	beq.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800726a:	4b3c      	ldr	r3, [pc, #240]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	0c5b      	lsrs	r3, r3, #17
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	4a3b      	ldr	r2, [pc, #236]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007276:	5cd3      	ldrb	r3, [r2, r3]
 8007278:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007284:	4a38      	ldr	r2, [pc, #224]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	fbb2 f2f3 	udiv	r2, r2, r3
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4a34      	ldr	r2, [pc, #208]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80072a0:	4b2e      	ldr	r3, [pc, #184]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ac:	d102      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	61bb      	str	r3, [r7, #24]
      break;
 80072b2:	e04a      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80072ba:	fba2 2303 	umull	r2, r3, r2, r3
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	61bb      	str	r3, [r7, #24]
      break;
 80072c2:	e042      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80072c4:	4b25      	ldr	r3, [pc, #148]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d4:	d108      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80072e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e01f      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f2:	d109      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80072f4:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007300:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	e00f      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007312:	d11c      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007314:	4b11      	ldr	r3, [pc, #68]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d016      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007320:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007324:	61bb      	str	r3, [r7, #24]
      break;
 8007326:	e012      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007328:	e011      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800732a:	f7ff fe85 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 800732e:	4602      	mov	r2, r0
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	0b9b      	lsrs	r3, r3, #14
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	3301      	adds	r3, #1
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	61bb      	str	r3, [r7, #24]
      break;
 8007344:	e004      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007346:	bf00      	nop
 8007348:	e002      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800734a:	bf00      	nop
 800734c:	e000      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800734e:	bf00      	nop
    }
  }
  return (frequency);
 8007350:	69bb      	ldr	r3, [r7, #24]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40021000 	.word	0x40021000
 8007360:	0800bf4c 	.word	0x0800bf4c
 8007364:	0800bf5c 	.word	0x0800bf5c
 8007368:	007a1200 	.word	0x007a1200
 800736c:	003d0900 	.word	0x003d0900
 8007370:	aaaaaaab 	.word	0xaaaaaaab

08007374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e076      	b.n	8007474 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007396:	d009      	beq.n	80073ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	61da      	str	r2, [r3, #28]
 800739e:	e005      	b.n	80073ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fd fefe 	bl	80051c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007430:	ea42 0103 	orr.w	r1, r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	0c1a      	lsrs	r2, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f002 0204 	and.w	r2, r2, #4
 8007452:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007462:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	4613      	mov	r3, r2
 800748a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748c:	f7fe f9e8 	bl	8005860 <HAL_GetTick>
 8007490:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074a2:	2302      	movs	r3, #2
 80074a4:	e12a      	b.n	80076fc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <HAL_SPI_Transmit+0x36>
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e122      	b.n	80076fc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_SPI_Transmit+0x48>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e11b      	b.n	80076fc <HAL_SPI_Transmit+0x280>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2203      	movs	r2, #3
 80074d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	88fa      	ldrh	r2, [r7, #6]
 80074ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007512:	d10f      	bne.n	8007534 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007522:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007532:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753e:	2b40      	cmp	r3, #64	@ 0x40
 8007540:	d007      	beq.n	8007552 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800755a:	d152      	bne.n	8007602 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_Transmit+0xee>
 8007564:	8b7b      	ldrh	r3, [r7, #26]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d145      	bne.n	80075f6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756e:	881a      	ldrh	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757a:	1c9a      	adds	r2, r3, #2
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800758e:	e032      	b.n	80075f6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d112      	bne.n	80075c4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	881a      	ldrh	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ae:	1c9a      	adds	r2, r3, #2
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075c2:	e018      	b.n	80075f6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075c4:	f7fe f94c 	bl	8005860 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d803      	bhi.n	80075dc <HAL_SPI_Transmit+0x160>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075da:	d102      	bne.n	80075e2 <HAL_SPI_Transmit+0x166>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e082      	b.n	80076fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1c7      	bne.n	8007590 <HAL_SPI_Transmit+0x114>
 8007600:	e053      	b.n	80076aa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Transmit+0x194>
 800760a:	8b7b      	ldrh	r3, [r7, #26]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d147      	bne.n	80076a0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007636:	e033      	b.n	80076a0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b02      	cmp	r3, #2
 8007644:	d113      	bne.n	800766e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800766c:	e018      	b.n	80076a0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766e:	f7fe f8f7 	bl	8005860 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d803      	bhi.n	8007686 <HAL_SPI_Transmit+0x20a>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d102      	bne.n	800768c <HAL_SPI_Transmit+0x210>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e02d      	b.n	80076fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1c6      	bne.n	8007638 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fbc4 	bl	8007e3c <SPI_EndRxTxTransaction>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2220      	movs	r2, #32
 80076be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80076fa:	2300      	movs	r3, #0
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af02      	add	r7, sp, #8
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	d001      	beq.n	8007724 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007720:	2302      	movs	r3, #2
 8007722:	e104      	b.n	800792e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800772c:	d112      	bne.n	8007754 <HAL_SPI_Receive+0x50>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10e      	bne.n	8007754 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2204      	movs	r2, #4
 800773a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f8f3 	bl	8007936 <HAL_SPI_TransmitReceive>
 8007750:	4603      	mov	r3, r0
 8007752:	e0ec      	b.n	800792e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007754:	f7fe f884 	bl	8005860 <HAL_GetTick>
 8007758:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_SPI_Receive+0x62>
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0e1      	b.n	800792e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_SPI_Receive+0x74>
 8007774:	2302      	movs	r3, #2
 8007776:	e0da      	b.n	800792e <HAL_SPI_Receive+0x22a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2204      	movs	r2, #4
 8007784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c6:	d10f      	bne.n	80077e8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f2:	2b40      	cmp	r3, #64	@ 0x40
 80077f4:	d007      	beq.n	8007806 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007804:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d170      	bne.n	80078f0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800780e:	e035      	b.n	800787c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d115      	bne.n	800784a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f103 020c 	add.w	r2, r3, #12
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007848:	e018      	b.n	800787c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800784a:	f7fe f809 	bl	8005860 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d803      	bhi.n	8007862 <HAL_SPI_Receive+0x15e>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d102      	bne.n	8007868 <HAL_SPI_Receive+0x164>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e058      	b.n	800792e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1c4      	bne.n	8007810 <HAL_SPI_Receive+0x10c>
 8007886:	e038      	b.n	80078fa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b01      	cmp	r3, #1
 8007894:	d113      	bne.n	80078be <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	b292      	uxth	r2, r2
 80078a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078bc:	e018      	b.n	80078f0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078be:	f7fd ffcf 	bl	8005860 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d803      	bhi.n	80078d6 <HAL_SPI_Receive+0x1d2>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d4:	d102      	bne.n	80078dc <HAL_SPI_Receive+0x1d8>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e01e      	b.n	800792e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1c6      	bne.n	8007888 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fa4a 	bl	8007d98 <SPI_EndRxTransaction>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2220      	movs	r2, #32
 800790e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800792c:	2300      	movs	r3, #0
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b08a      	sub	sp, #40	@ 0x28
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007944:	2301      	movs	r3, #1
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007948:	f7fd ff8a 	bl	8005860 <HAL_GetTick>
 800794c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007954:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800795c:	887b      	ldrh	r3, [r7, #2]
 800795e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007960:	7ffb      	ldrb	r3, [r7, #31]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d00c      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x4a>
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800796c:	d106      	bne.n	800797c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <HAL_SPI_TransmitReceive+0x46>
 8007976:	7ffb      	ldrb	r3, [r7, #31]
 8007978:	2b04      	cmp	r3, #4
 800797a:	d001      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800797c:	2302      	movs	r3, #2
 800797e:	e17f      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x5c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x5c>
 800798c:	887b      	ldrh	r3, [r7, #2]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e174      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x6e>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e16d      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d003      	beq.n	80079c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2205      	movs	r2, #5
 80079bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	887a      	ldrh	r2, [r7, #2]
 80079d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	887a      	ldrh	r2, [r7, #2]
 80079d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	887a      	ldrh	r2, [r7, #2]
 80079e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a00:	2b40      	cmp	r3, #64	@ 0x40
 8007a02:	d007      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a1c:	d17e      	bne.n	8007b1c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0xf6>
 8007a26:	8afb      	ldrh	r3, [r7, #22]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d16c      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a30:	881a      	ldrh	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3c:	1c9a      	adds	r2, r3, #2
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a50:	e059      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d11b      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x162>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x162>
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d113      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	881a      	ldrh	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a80:	1c9a      	adds	r2, r3, #2
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d119      	bne.n	8007ada <HAL_SPI_TransmitReceive+0x1a4>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d014      	beq.n	8007ada <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	b292      	uxth	r2, r2
 8007abc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ada:	f7fd fec1 	bl	8005860 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d80d      	bhi.n	8007b06 <HAL_SPI_TransmitReceive+0x1d0>
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d009      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e0bc      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1a0      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x11c>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d19b      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x11c>
 8007b1a:	e082      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_SPI_TransmitReceive+0x1f4>
 8007b24:	8afb      	ldrh	r3, [r7, #22]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d171      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b50:	e05d      	b.n	8007c0e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d11c      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x264>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d017      	beq.n	8007b9a <HAL_SPI_TransmitReceive+0x264>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d114      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d119      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x2a6>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d014      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bdc:	f7fd fe40 	bl	8005860 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d803      	bhi.n	8007bf4 <HAL_SPI_TransmitReceive+0x2be>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d102      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x2c4>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e038      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d19c      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x21c>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d197      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c22:	6a3a      	ldr	r2, [r7, #32]
 8007c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f908 	bl	8007e3c <SPI_EndRxTxTransaction>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e01d      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3728      	adds	r7, #40	@ 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c98:	f7fd fde2 	bl	8005860 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ca8:	f7fd fdda 	bl	8005860 <HAL_GetTick>
 8007cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cae:	4b39      	ldr	r3, [pc, #228]	@ (8007d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	015b      	lsls	r3, r3, #5
 8007cb4:	0d1b      	lsrs	r3, r3, #20
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cbe:	e054      	b.n	8007d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d050      	beq.n	8007d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cc8:	f7fd fdca 	bl	8005860 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d902      	bls.n	8007cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d13d      	bne.n	8007d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf6:	d111      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d00:	d004      	beq.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0a:	d107      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d24:	d10f      	bne.n	8007d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e017      	b.n	8007d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d19b      	bne.n	8007cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000060 	.word	0x20000060

08007d98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dac:	d111      	bne.n	8007dd2 <SPI_EndRxTransaction+0x3a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db6:	d004      	beq.n	8007dc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc0:	d107      	bne.n	8007dd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dda:	d117      	bne.n	8007e0c <SPI_EndRxTransaction+0x74>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de4:	d112      	bne.n	8007e0c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	2101      	movs	r1, #1
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff ff49 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01a      	beq.n	8007e32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e00:	f043 0220 	orr.w	r2, r3, #32
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e013      	b.n	8007e34 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	2180      	movs	r1, #128	@ 0x80
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff ff36 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d007      	beq.n	8007e32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e000      	b.n	8007e34 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	2102      	movs	r1, #2
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ff18 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e013      	b.n	8007e96 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2200      	movs	r2, #0
 8007e76:	2180      	movs	r1, #128	@ 0x80
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff ff05 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e88:	f043 0220 	orr.w	r2, r3, #32
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e000      	b.n	8007e96 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e041      	b.n	8007f34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7fd fb9f 	bl	8005608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f000 faa5 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d001      	beq.n	8007f54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e032      	b.n	8007fba <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a18      	ldr	r2, [pc, #96]	@ (8007fc4 <HAL_TIM_Base_Start+0x88>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00e      	beq.n	8007f84 <HAL_TIM_Base_Start+0x48>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6e:	d009      	beq.n	8007f84 <HAL_TIM_Base_Start+0x48>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a14      	ldr	r2, [pc, #80]	@ (8007fc8 <HAL_TIM_Base_Start+0x8c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d004      	beq.n	8007f84 <HAL_TIM_Base_Start+0x48>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a13      	ldr	r2, [pc, #76]	@ (8007fcc <HAL_TIM_Base_Start+0x90>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d111      	bne.n	8007fa8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b06      	cmp	r3, #6
 8007f94:	d010      	beq.n	8007fb8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0201 	orr.w	r2, r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa6:	e007      	b.n	8007fb8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800

08007fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d001      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e03a      	b.n	800805e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a18      	ldr	r2, [pc, #96]	@ (8008068 <HAL_TIM_Base_Start_IT+0x98>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00e      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x58>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008012:	d009      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x58>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a14      	ldr	r2, [pc, #80]	@ (800806c <HAL_TIM_Base_Start_IT+0x9c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x58>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a13      	ldr	r2, [pc, #76]	@ (8008070 <HAL_TIM_Base_Start_IT+0xa0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d111      	bne.n	800804c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b06      	cmp	r3, #6
 8008038:	d010      	beq.n	800805c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804a:	e007      	b.n	800805c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800

08008074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d020      	beq.n	80080d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0202 	mvn.w	r2, #2
 80080a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f998 	bl	80083f4 <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f98b 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f99a 	bl	8008406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d020      	beq.n	8008124 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0204 	mvn.w	r2, #4
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f972 	bl	80083f4 <HAL_TIM_IC_CaptureCallback>
 8008110:	e005      	b.n	800811e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f965 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f974 	bl	8008406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d020      	beq.n	8008170 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f003 0308 	and.w	r3, r3, #8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01b      	beq.n	8008170 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0208 	mvn.w	r2, #8
 8008140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2204      	movs	r2, #4
 8008146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f94c 	bl	80083f4 <HAL_TIM_IC_CaptureCallback>
 800815c:	e005      	b.n	800816a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f93f 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f94e 	bl	8008406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	2b00      	cmp	r3, #0
 8008178:	d020      	beq.n	80081bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01b      	beq.n	80081bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0210 	mvn.w	r2, #16
 800818c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2208      	movs	r2, #8
 8008192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f926 	bl	80083f4 <HAL_TIM_IC_CaptureCallback>
 80081a8:	e005      	b.n	80081b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f919 	bl	80083e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f928 	bl	8008406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00c      	beq.n	80081e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f06f 0201 	mvn.w	r2, #1
 80081d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fc ff90 	bl	8005100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00c      	beq.n	8008204 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d007      	beq.n	8008204 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa7f 	bl	8008702 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d007      	beq.n	8008228 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f8f8 	bl	8008418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0220 	mvn.w	r2, #32
 8008244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa52 	bl	80086f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_TIM_ConfigClockSource+0x1c>
 800826c:	2302      	movs	r3, #2
 800826e:	e0b4      	b.n	80083da <HAL_TIM_ConfigClockSource+0x186>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800828e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a8:	d03e      	beq.n	8008328 <HAL_TIM_ConfigClockSource+0xd4>
 80082aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ae:	f200 8087 	bhi.w	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b6:	f000 8086 	beq.w	80083c6 <HAL_TIM_ConfigClockSource+0x172>
 80082ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082be:	d87f      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082c0:	2b70      	cmp	r3, #112	@ 0x70
 80082c2:	d01a      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0xa6>
 80082c4:	2b70      	cmp	r3, #112	@ 0x70
 80082c6:	d87b      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082c8:	2b60      	cmp	r3, #96	@ 0x60
 80082ca:	d050      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x11a>
 80082cc:	2b60      	cmp	r3, #96	@ 0x60
 80082ce:	d877      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082d0:	2b50      	cmp	r3, #80	@ 0x50
 80082d2:	d03c      	beq.n	800834e <HAL_TIM_ConfigClockSource+0xfa>
 80082d4:	2b50      	cmp	r3, #80	@ 0x50
 80082d6:	d873      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082d8:	2b40      	cmp	r3, #64	@ 0x40
 80082da:	d058      	beq.n	800838e <HAL_TIM_ConfigClockSource+0x13a>
 80082dc:	2b40      	cmp	r3, #64	@ 0x40
 80082de:	d86f      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082e0:	2b30      	cmp	r3, #48	@ 0x30
 80082e2:	d064      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x15a>
 80082e4:	2b30      	cmp	r3, #48	@ 0x30
 80082e6:	d86b      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d060      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x15a>
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d867      	bhi.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05c      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x15a>
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d05a      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x15a>
 80082f8:	e062      	b.n	80083c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800830a:	f000 f974 	bl	80085f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800831c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	609a      	str	r2, [r3, #8]
      break;
 8008326:	e04f      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008338:	f000 f95d 	bl	80085f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800834a:	609a      	str	r2, [r3, #8]
      break;
 800834c:	e03c      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800835a:	461a      	mov	r2, r3
 800835c:	f000 f8d4 	bl	8008508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2150      	movs	r1, #80	@ 0x50
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f92b 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 800836c:	e02c      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800837a:	461a      	mov	r2, r3
 800837c:	f000 f8f2 	bl	8008564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2160      	movs	r1, #96	@ 0x60
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f91b 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 800838c:	e01c      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800839a:	461a      	mov	r2, r3
 800839c:	f000 f8b4 	bl	8008508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2140      	movs	r1, #64	@ 0x40
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f90b 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 80083ac:	e00c      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f000 f902 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 80083be:	e003      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
      break;
 80083c4:	e000      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr
	...

0800842c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a2f      	ldr	r2, [pc, #188]	@ (80084fc <TIM_Base_SetConfig+0xd0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00b      	beq.n	800845c <TIM_Base_SetConfig+0x30>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800844a:	d007      	beq.n	800845c <TIM_Base_SetConfig+0x30>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a2c      	ldr	r2, [pc, #176]	@ (8008500 <TIM_Base_SetConfig+0xd4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0x30>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a2b      	ldr	r2, [pc, #172]	@ (8008504 <TIM_Base_SetConfig+0xd8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d108      	bne.n	800846e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a22      	ldr	r2, [pc, #136]	@ (80084fc <TIM_Base_SetConfig+0xd0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d00b      	beq.n	800848e <TIM_Base_SetConfig+0x62>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800847c:	d007      	beq.n	800848e <TIM_Base_SetConfig+0x62>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a1f      	ldr	r2, [pc, #124]	@ (8008500 <TIM_Base_SetConfig+0xd4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_Base_SetConfig+0x62>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a1e      	ldr	r2, [pc, #120]	@ (8008504 <TIM_Base_SetConfig+0xd8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d108      	bne.n	80084a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0d      	ldr	r2, [pc, #52]	@ (80084fc <TIM_Base_SetConfig+0xd0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d103      	bne.n	80084d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f023 0201 	bic.w	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	611a      	str	r2, [r3, #16]
  }
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr
 80084fc:	40012c00 	.word	0x40012c00
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800

08008508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	f023 0201 	bic.w	r2, r3, #1
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f023 030a 	bic.w	r3, r3, #10
 8008544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	621a      	str	r2, [r3, #32]
}
 800855a:	bf00      	nop
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0210 	bic.w	r2, r3, #16
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800858e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	031b      	lsls	r3, r3, #12
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	621a      	str	r2, [r3, #32]
}
 80085b8:	bf00      	nop
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr

080085c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	f043 0307 	orr.w	r3, r3, #7
 80085e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	609a      	str	r2, [r3, #8]
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr

080085f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b087      	sub	sp, #28
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	021a      	lsls	r2, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	431a      	orrs	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4313      	orrs	r3, r2
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	609a      	str	r2, [r3, #8]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e046      	b.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a16      	ldr	r2, [pc, #88]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00e      	beq.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008698:	d009      	beq.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a12      	ldr	r2, [pc, #72]	@ (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d004      	beq.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a10      	ldr	r2, [pc, #64]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d10c      	bne.n	80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr
 80086e4:	40012c00 	.word	0x40012c00
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000800 	.word	0x40000800

080086f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr

08008702 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e042      	b.n	80087ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fc ffc6 	bl	80056cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2224      	movs	r2, #36	@ 0x24
 8008744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f971 	bl	8008a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800876c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695a      	ldr	r2, [r3, #20]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800877c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800878c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	@ 0x28
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	4613      	mov	r3, r2
 80087c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d175      	bne.n	80088c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <HAL_UART_Transmit+0x2c>
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e06e      	b.n	80088c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2221      	movs	r2, #33	@ 0x21
 80087ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087f2:	f7fd f835 	bl	8005860 <HAL_GetTick>
 80087f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800880c:	d108      	bne.n	8008820 <HAL_UART_Transmit+0x6c>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	e003      	b.n	8008828 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008828:	e02e      	b.n	8008888 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2200      	movs	r2, #0
 8008832:	2180      	movs	r1, #128	@ 0x80
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 f848 	bl	80088ca <UART_WaitOnFlagUntilTimeout>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e03a      	b.n	80088c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	3302      	adds	r3, #2
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	e007      	b.n	800887a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1cb      	bne.n	800882a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	2140      	movs	r1, #64	@ 0x40
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f814 	bl	80088ca <UART_WaitOnFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e006      	b.n	80088c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	e000      	b.n	80088c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80088c0:	2302      	movs	r3, #2
  }
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3720      	adds	r7, #32
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088da:	e03b      	b.n	8008954 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d037      	beq.n	8008954 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e4:	f7fc ffbc 	bl	8005860 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d302      	bcc.n	80088fa <UART_WaitOnFlagUntilTimeout+0x30>
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e03a      	b.n	8008974 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d023      	beq.n	8008954 <UART_WaitOnFlagUntilTimeout+0x8a>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b80      	cmp	r3, #128	@ 0x80
 8008910:	d020      	beq.n	8008954 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b40      	cmp	r3, #64	@ 0x40
 8008916:	d01d      	beq.n	8008954 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0308 	and.w	r3, r3, #8
 8008922:	2b08      	cmp	r3, #8
 8008924:	d116      	bne.n	8008954 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f81d 	bl	800897c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2208      	movs	r2, #8
 8008946:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e00f      	b.n	8008974 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	4013      	ands	r3, r2
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	bf0c      	ite	eq
 8008964:	2301      	moveq	r3, #1
 8008966:	2300      	movne	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	461a      	mov	r2, r3
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	429a      	cmp	r2, r3
 8008970:	d0b4      	beq.n	80088dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800897c:	b480      	push	{r7}
 800897e:	b095      	sub	sp, #84	@ 0x54
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	330c      	adds	r3, #12
 800898a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800899a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e5      	bne.n	8008984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3314      	adds	r3, #20
 80089be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f023 0301 	bic.w	r3, r3, #1
 80089ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3314      	adds	r3, #20
 80089d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e5      	bne.n	80089b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d119      	bne.n	8008a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f023 0310 	bic.w	r3, r3, #16
 8008a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a14:	61ba      	str	r2, [r7, #24]
 8008a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	613b      	str	r3, [r7, #16]
   return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e5      	bne.n	80089f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a36:	bf00      	nop
 8008a38:	3754      	adds	r7, #84	@ 0x54
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr

08008a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008a7a:	f023 030c 	bic.w	r3, r3, #12
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	430b      	orrs	r3, r1
 8008a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8008b54 <UART_SetConfig+0x114>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d103      	bne.n	8008ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008aa8:	f7fe fac6 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	e002      	b.n	8008ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ab0:	f7fe faae 	bl	8007010 <HAL_RCC_GetPCLK1Freq>
 8008ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009a      	lsls	r2, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008acc:	4a22      	ldr	r2, [pc, #136]	@ (8008b58 <UART_SetConfig+0x118>)
 8008ace:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad2:	095b      	lsrs	r3, r3, #5
 8008ad4:	0119      	lsls	r1, r3, #4
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	009a      	lsls	r2, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008aec:	4b1a      	ldr	r3, [pc, #104]	@ (8008b58 <UART_SetConfig+0x118>)
 8008aee:	fba3 0302 	umull	r0, r3, r3, r2
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	2064      	movs	r0, #100	@ 0x64
 8008af6:	fb00 f303 	mul.w	r3, r0, r3
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	3332      	adds	r3, #50	@ 0x32
 8008b00:	4a15      	ldr	r2, [pc, #84]	@ (8008b58 <UART_SetConfig+0x118>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	095b      	lsrs	r3, r3, #5
 8008b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b0c:	4419      	add	r1, r3
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009a      	lsls	r2, r3, #2
 8008b18:	441a      	add	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b24:	4b0c      	ldr	r3, [pc, #48]	@ (8008b58 <UART_SetConfig+0x118>)
 8008b26:	fba3 0302 	umull	r0, r3, r3, r2
 8008b2a:	095b      	lsrs	r3, r3, #5
 8008b2c:	2064      	movs	r0, #100	@ 0x64
 8008b2e:	fb00 f303 	mul.w	r3, r0, r3
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	3332      	adds	r3, #50	@ 0x32
 8008b38:	4a07      	ldr	r2, [pc, #28]	@ (8008b58 <UART_SetConfig+0x118>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	f003 020f 	and.w	r2, r3, #15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	440a      	add	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	40013800 	.word	0x40013800
 8008b58:	51eb851f 	.word	0x51eb851f

08008b5c <atoi>:
 8008b5c:	220a      	movs	r2, #10
 8008b5e:	2100      	movs	r1, #0
 8008b60:	f000 b87a 	b.w	8008c58 <strtol>

08008b64 <_strtol_l.constprop.0>:
 8008b64:	2b24      	cmp	r3, #36	@ 0x24
 8008b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6a:	4686      	mov	lr, r0
 8008b6c:	4690      	mov	r8, r2
 8008b6e:	d801      	bhi.n	8008b74 <_strtol_l.constprop.0+0x10>
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d106      	bne.n	8008b82 <_strtol_l.constprop.0+0x1e>
 8008b74:	f000 fe86 	bl	8009884 <__errno>
 8008b78:	2316      	movs	r3, #22
 8008b7a:	6003      	str	r3, [r0, #0]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	460d      	mov	r5, r1
 8008b84:	4833      	ldr	r0, [pc, #204]	@ (8008c54 <_strtol_l.constprop.0+0xf0>)
 8008b86:	462a      	mov	r2, r5
 8008b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b8c:	5d06      	ldrb	r6, [r0, r4]
 8008b8e:	f016 0608 	ands.w	r6, r6, #8
 8008b92:	d1f8      	bne.n	8008b86 <_strtol_l.constprop.0+0x22>
 8008b94:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b96:	d12d      	bne.n	8008bf4 <_strtol_l.constprop.0+0x90>
 8008b98:	2601      	movs	r6, #1
 8008b9a:	782c      	ldrb	r4, [r5, #0]
 8008b9c:	1c95      	adds	r5, r2, #2
 8008b9e:	f033 0210 	bics.w	r2, r3, #16
 8008ba2:	d109      	bne.n	8008bb8 <_strtol_l.constprop.0+0x54>
 8008ba4:	2c30      	cmp	r4, #48	@ 0x30
 8008ba6:	d12a      	bne.n	8008bfe <_strtol_l.constprop.0+0x9a>
 8008ba8:	782a      	ldrb	r2, [r5, #0]
 8008baa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bae:	2a58      	cmp	r2, #88	@ 0x58
 8008bb0:	d125      	bne.n	8008bfe <_strtol_l.constprop.0+0x9a>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	786c      	ldrb	r4, [r5, #1]
 8008bb6:	3502      	adds	r5, #2
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008bbe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008bc2:	fbbc f9f3 	udiv	r9, ip, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bd0:	2f09      	cmp	r7, #9
 8008bd2:	d81b      	bhi.n	8008c0c <_strtol_l.constprop.0+0xa8>
 8008bd4:	463c      	mov	r4, r7
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	dd27      	ble.n	8008c2a <_strtol_l.constprop.0+0xc6>
 8008bda:	1c57      	adds	r7, r2, #1
 8008bdc:	d007      	beq.n	8008bee <_strtol_l.constprop.0+0x8a>
 8008bde:	4581      	cmp	r9, r0
 8008be0:	d320      	bcc.n	8008c24 <_strtol_l.constprop.0+0xc0>
 8008be2:	d101      	bne.n	8008be8 <_strtol_l.constprop.0+0x84>
 8008be4:	45a2      	cmp	sl, r4
 8008be6:	db1d      	blt.n	8008c24 <_strtol_l.constprop.0+0xc0>
 8008be8:	2201      	movs	r2, #1
 8008bea:	fb00 4003 	mla	r0, r0, r3, r4
 8008bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bf2:	e7eb      	b.n	8008bcc <_strtol_l.constprop.0+0x68>
 8008bf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bf6:	bf04      	itt	eq
 8008bf8:	782c      	ldrbeq	r4, [r5, #0]
 8008bfa:	1c95      	addeq	r5, r2, #2
 8008bfc:	e7cf      	b.n	8008b9e <_strtol_l.constprop.0+0x3a>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1da      	bne.n	8008bb8 <_strtol_l.constprop.0+0x54>
 8008c02:	2c30      	cmp	r4, #48	@ 0x30
 8008c04:	bf0c      	ite	eq
 8008c06:	2308      	moveq	r3, #8
 8008c08:	230a      	movne	r3, #10
 8008c0a:	e7d5      	b.n	8008bb8 <_strtol_l.constprop.0+0x54>
 8008c0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c10:	2f19      	cmp	r7, #25
 8008c12:	d801      	bhi.n	8008c18 <_strtol_l.constprop.0+0xb4>
 8008c14:	3c37      	subs	r4, #55	@ 0x37
 8008c16:	e7de      	b.n	8008bd6 <_strtol_l.constprop.0+0x72>
 8008c18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c1c:	2f19      	cmp	r7, #25
 8008c1e:	d804      	bhi.n	8008c2a <_strtol_l.constprop.0+0xc6>
 8008c20:	3c57      	subs	r4, #87	@ 0x57
 8008c22:	e7d8      	b.n	8008bd6 <_strtol_l.constprop.0+0x72>
 8008c24:	f04f 32ff 	mov.w	r2, #4294967295
 8008c28:	e7e1      	b.n	8008bee <_strtol_l.constprop.0+0x8a>
 8008c2a:	1c53      	adds	r3, r2, #1
 8008c2c:	d108      	bne.n	8008c40 <_strtol_l.constprop.0+0xdc>
 8008c2e:	2322      	movs	r3, #34	@ 0x22
 8008c30:	4660      	mov	r0, ip
 8008c32:	f8ce 3000 	str.w	r3, [lr]
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d0a0      	beq.n	8008b7e <_strtol_l.constprop.0+0x1a>
 8008c3c:	1e69      	subs	r1, r5, #1
 8008c3e:	e006      	b.n	8008c4e <_strtol_l.constprop.0+0xea>
 8008c40:	b106      	cbz	r6, 8008c44 <_strtol_l.constprop.0+0xe0>
 8008c42:	4240      	negs	r0, r0
 8008c44:	f1b8 0f00 	cmp.w	r8, #0
 8008c48:	d099      	beq.n	8008b7e <_strtol_l.constprop.0+0x1a>
 8008c4a:	2a00      	cmp	r2, #0
 8008c4c:	d1f6      	bne.n	8008c3c <_strtol_l.constprop.0+0xd8>
 8008c4e:	f8c8 1000 	str.w	r1, [r8]
 8008c52:	e794      	b.n	8008b7e <_strtol_l.constprop.0+0x1a>
 8008c54:	0800bf5f 	.word	0x0800bf5f

08008c58 <strtol>:
 8008c58:	4613      	mov	r3, r2
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	4601      	mov	r1, r0
 8008c5e:	4802      	ldr	r0, [pc, #8]	@ (8008c68 <strtol+0x10>)
 8008c60:	6800      	ldr	r0, [r0, #0]
 8008c62:	f7ff bf7f 	b.w	8008b64 <_strtol_l.constprop.0>
 8008c66:	bf00      	nop
 8008c68:	20000078 	.word	0x20000078

08008c6c <__cvt>:
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c72:	461d      	mov	r5, r3
 8008c74:	bfbb      	ittet	lt
 8008c76:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008c7a:	461d      	movlt	r5, r3
 8008c7c:	2300      	movge	r3, #0
 8008c7e:	232d      	movlt	r3, #45	@ 0x2d
 8008c80:	b088      	sub	sp, #32
 8008c82:	4614      	mov	r4, r2
 8008c84:	bfb8      	it	lt
 8008c86:	4614      	movlt	r4, r2
 8008c88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008c8c:	7013      	strb	r3, [r2, #0]
 8008c8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c90:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008c94:	f023 0820 	bic.w	r8, r3, #32
 8008c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c9c:	d005      	beq.n	8008caa <__cvt+0x3e>
 8008c9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ca2:	d100      	bne.n	8008ca6 <__cvt+0x3a>
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e000      	b.n	8008cac <__cvt+0x40>
 8008caa:	2303      	movs	r3, #3
 8008cac:	aa07      	add	r2, sp, #28
 8008cae:	9204      	str	r2, [sp, #16]
 8008cb0:	aa06      	add	r2, sp, #24
 8008cb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008cb6:	e9cd 3600 	strd	r3, r6, [sp]
 8008cba:	4622      	mov	r2, r4
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	f000 fea7 	bl	8009a10 <_dtoa_r>
 8008cc2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	d119      	bne.n	8008cfe <__cvt+0x92>
 8008cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ccc:	07db      	lsls	r3, r3, #31
 8008cce:	d50e      	bpl.n	8008cee <__cvt+0x82>
 8008cd0:	eb00 0906 	add.w	r9, r0, r6
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	4620      	mov	r0, r4
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8008ce0:	b108      	cbz	r0, 8008ce6 <__cvt+0x7a>
 8008ce2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ce6:	2230      	movs	r2, #48	@ 0x30
 8008ce8:	9b07      	ldr	r3, [sp, #28]
 8008cea:	454b      	cmp	r3, r9
 8008cec:	d31e      	bcc.n	8008d2c <__cvt+0xc0>
 8008cee:	4638      	mov	r0, r7
 8008cf0:	9b07      	ldr	r3, [sp, #28]
 8008cf2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008cf4:	1bdb      	subs	r3, r3, r7
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	b008      	add	sp, #32
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d02:	eb00 0906 	add.w	r9, r0, r6
 8008d06:	d1e5      	bne.n	8008cd4 <__cvt+0x68>
 8008d08:	7803      	ldrb	r3, [r0, #0]
 8008d0a:	2b30      	cmp	r3, #48	@ 0x30
 8008d0c:	d10a      	bne.n	8008d24 <__cvt+0xb8>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2300      	movs	r3, #0
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fe47 	bl	80009a8 <__aeabi_dcmpeq>
 8008d1a:	b918      	cbnz	r0, 8008d24 <__cvt+0xb8>
 8008d1c:	f1c6 0601 	rsb	r6, r6, #1
 8008d20:	f8ca 6000 	str.w	r6, [sl]
 8008d24:	f8da 3000 	ldr.w	r3, [sl]
 8008d28:	4499      	add	r9, r3
 8008d2a:	e7d3      	b.n	8008cd4 <__cvt+0x68>
 8008d2c:	1c59      	adds	r1, r3, #1
 8008d2e:	9107      	str	r1, [sp, #28]
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e7d9      	b.n	8008ce8 <__cvt+0x7c>

08008d34 <__exponent>:
 8008d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d36:	2900      	cmp	r1, #0
 8008d38:	bfb6      	itet	lt
 8008d3a:	232d      	movlt	r3, #45	@ 0x2d
 8008d3c:	232b      	movge	r3, #43	@ 0x2b
 8008d3e:	4249      	neglt	r1, r1
 8008d40:	2909      	cmp	r1, #9
 8008d42:	7002      	strb	r2, [r0, #0]
 8008d44:	7043      	strb	r3, [r0, #1]
 8008d46:	dd29      	ble.n	8008d9c <__exponent+0x68>
 8008d48:	f10d 0307 	add.w	r3, sp, #7
 8008d4c:	461d      	mov	r5, r3
 8008d4e:	270a      	movs	r7, #10
 8008d50:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d54:	461a      	mov	r2, r3
 8008d56:	fb07 1416 	mls	r4, r7, r6, r1
 8008d5a:	3430      	adds	r4, #48	@ 0x30
 8008d5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d60:	460c      	mov	r4, r1
 8008d62:	2c63      	cmp	r4, #99	@ 0x63
 8008d64:	4631      	mov	r1, r6
 8008d66:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d6a:	dcf1      	bgt.n	8008d50 <__exponent+0x1c>
 8008d6c:	3130      	adds	r1, #48	@ 0x30
 8008d6e:	1e94      	subs	r4, r2, #2
 8008d70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d74:	4623      	mov	r3, r4
 8008d76:	1c41      	adds	r1, r0, #1
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	d30a      	bcc.n	8008d92 <__exponent+0x5e>
 8008d7c:	f10d 0309 	add.w	r3, sp, #9
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	42ac      	cmp	r4, r5
 8008d84:	bf88      	it	hi
 8008d86:	2300      	movhi	r3, #0
 8008d88:	3302      	adds	r3, #2
 8008d8a:	4403      	add	r3, r0
 8008d8c:	1a18      	subs	r0, r3, r0
 8008d8e:	b003      	add	sp, #12
 8008d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d9a:	e7ed      	b.n	8008d78 <__exponent+0x44>
 8008d9c:	2330      	movs	r3, #48	@ 0x30
 8008d9e:	3130      	adds	r1, #48	@ 0x30
 8008da0:	7083      	strb	r3, [r0, #2]
 8008da2:	70c1      	strb	r1, [r0, #3]
 8008da4:	1d03      	adds	r3, r0, #4
 8008da6:	e7f1      	b.n	8008d8c <__exponent+0x58>

08008da8 <_printf_float>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b091      	sub	sp, #68	@ 0x44
 8008dae:	460c      	mov	r4, r1
 8008db0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008db4:	4616      	mov	r6, r2
 8008db6:	461f      	mov	r7, r3
 8008db8:	4605      	mov	r5, r0
 8008dba:	f000 fd19 	bl	80097f0 <_localeconv_r>
 8008dbe:	6803      	ldr	r3, [r0, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	f7f7 f9c4 	bl	8000150 <strlen>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	930e      	str	r3, [sp, #56]	@ 0x38
 8008dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008dd2:	3307      	adds	r3, #7
 8008dd4:	f023 0307 	bic.w	r3, r3, #7
 8008dd8:	f103 0208 	add.w	r2, r3, #8
 8008ddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008de0:	f8d4 b000 	ldr.w	fp, [r4]
 8008de4:	f8c8 2000 	str.w	r2, [r8]
 8008de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008df2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e02:	4b9c      	ldr	r3, [pc, #624]	@ (8009074 <_printf_float+0x2cc>)
 8008e04:	f7f7 fe02 	bl	8000a0c <__aeabi_dcmpun>
 8008e08:	bb70      	cbnz	r0, 8008e68 <_printf_float+0xc0>
 8008e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e12:	4b98      	ldr	r3, [pc, #608]	@ (8009074 <_printf_float+0x2cc>)
 8008e14:	f7f7 fddc 	bl	80009d0 <__aeabi_dcmple>
 8008e18:	bb30      	cbnz	r0, 8008e68 <_printf_float+0xc0>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fdcb 	bl	80009bc <__aeabi_dcmplt>
 8008e26:	b110      	cbz	r0, 8008e2e <_printf_float+0x86>
 8008e28:	232d      	movs	r3, #45	@ 0x2d
 8008e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e2e:	4a92      	ldr	r2, [pc, #584]	@ (8009078 <_printf_float+0x2d0>)
 8008e30:	4b92      	ldr	r3, [pc, #584]	@ (800907c <_printf_float+0x2d4>)
 8008e32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e36:	bf94      	ite	ls
 8008e38:	4690      	movls	r8, r2
 8008e3a:	4698      	movhi	r8, r3
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	f04f 0900 	mov.w	r9, #0
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	f02b 0304 	bic.w	r3, fp, #4
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	4633      	mov	r3, r6
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4628      	mov	r0, r5
 8008e50:	9700      	str	r7, [sp, #0]
 8008e52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008e54:	f000 f9d4 	bl	8009200 <_printf_common>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f040 8090 	bne.w	8008f7e <_printf_float+0x1d6>
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	b011      	add	sp, #68	@ 0x44
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7f7 fdcc 	bl	8000a0c <__aeabi_dcmpun>
 8008e74:	b148      	cbz	r0, 8008e8a <_printf_float+0xe2>
 8008e76:	464b      	mov	r3, r9
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bfb8      	it	lt
 8008e7c:	232d      	movlt	r3, #45	@ 0x2d
 8008e7e:	4a80      	ldr	r2, [pc, #512]	@ (8009080 <_printf_float+0x2d8>)
 8008e80:	bfb8      	it	lt
 8008e82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e86:	4b7f      	ldr	r3, [pc, #508]	@ (8009084 <_printf_float+0x2dc>)
 8008e88:	e7d3      	b.n	8008e32 <_printf_float+0x8a>
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	d13f      	bne.n	8008f14 <_printf_float+0x16c>
 8008e94:	2306      	movs	r3, #6
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	9206      	str	r2, [sp, #24]
 8008ea2:	aa0e      	add	r2, sp, #56	@ 0x38
 8008ea4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008ea8:	aa0d      	add	r2, sp, #52	@ 0x34
 8008eaa:	9203      	str	r2, [sp, #12]
 8008eac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008eb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	4628      	mov	r0, r5
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	910a      	str	r1, [sp, #40]	@ 0x28
 8008ec0:	f7ff fed4 	bl	8008c6c <__cvt>
 8008ec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	2947      	cmp	r1, #71	@ 0x47
 8008eca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008ecc:	d128      	bne.n	8008f20 <_printf_float+0x178>
 8008ece:	1cc8      	adds	r0, r1, #3
 8008ed0:	db02      	blt.n	8008ed8 <_printf_float+0x130>
 8008ed2:	6863      	ldr	r3, [r4, #4]
 8008ed4:	4299      	cmp	r1, r3
 8008ed6:	dd40      	ble.n	8008f5a <_printf_float+0x1b2>
 8008ed8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008edc:	fa5f fa8a 	uxtb.w	sl, sl
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	3901      	subs	r1, #1
 8008ee4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ee8:	910d      	str	r1, [sp, #52]	@ 0x34
 8008eea:	f7ff ff23 	bl	8008d34 <__exponent>
 8008eee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	1813      	adds	r3, r2, r0
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	dc02      	bgt.n	8008f00 <_printf_float+0x158>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	07d2      	lsls	r2, r2, #31
 8008efe:	d501      	bpl.n	8008f04 <_printf_float+0x15c>
 8008f00:	3301      	adds	r3, #1
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d09e      	beq.n	8008e4a <_printf_float+0xa2>
 8008f0c:	232d      	movs	r3, #45	@ 0x2d
 8008f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f12:	e79a      	b.n	8008e4a <_printf_float+0xa2>
 8008f14:	2947      	cmp	r1, #71	@ 0x47
 8008f16:	d1bf      	bne.n	8008e98 <_printf_float+0xf0>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1bd      	bne.n	8008e98 <_printf_float+0xf0>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e7ba      	b.n	8008e96 <_printf_float+0xee>
 8008f20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f24:	d9dc      	bls.n	8008ee0 <_printf_float+0x138>
 8008f26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f2a:	d118      	bne.n	8008f5e <_printf_float+0x1b6>
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	6863      	ldr	r3, [r4, #4]
 8008f30:	dd0b      	ble.n	8008f4a <_printf_float+0x1a2>
 8008f32:	6121      	str	r1, [r4, #16]
 8008f34:	b913      	cbnz	r3, 8008f3c <_printf_float+0x194>
 8008f36:	6822      	ldr	r2, [r4, #0]
 8008f38:	07d0      	lsls	r0, r2, #31
 8008f3a:	d502      	bpl.n	8008f42 <_printf_float+0x19a>
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	440b      	add	r3, r1
 8008f40:	6123      	str	r3, [r4, #16]
 8008f42:	f04f 0900 	mov.w	r9, #0
 8008f46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f48:	e7dc      	b.n	8008f04 <_printf_float+0x15c>
 8008f4a:	b913      	cbnz	r3, 8008f52 <_printf_float+0x1aa>
 8008f4c:	6822      	ldr	r2, [r4, #0]
 8008f4e:	07d2      	lsls	r2, r2, #31
 8008f50:	d501      	bpl.n	8008f56 <_printf_float+0x1ae>
 8008f52:	3302      	adds	r3, #2
 8008f54:	e7f4      	b.n	8008f40 <_printf_float+0x198>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e7f2      	b.n	8008f40 <_printf_float+0x198>
 8008f5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f60:	4299      	cmp	r1, r3
 8008f62:	db05      	blt.n	8008f70 <_printf_float+0x1c8>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	6121      	str	r1, [r4, #16]
 8008f68:	07d8      	lsls	r0, r3, #31
 8008f6a:	d5ea      	bpl.n	8008f42 <_printf_float+0x19a>
 8008f6c:	1c4b      	adds	r3, r1, #1
 8008f6e:	e7e7      	b.n	8008f40 <_printf_float+0x198>
 8008f70:	2900      	cmp	r1, #0
 8008f72:	bfcc      	ite	gt
 8008f74:	2201      	movgt	r2, #1
 8008f76:	f1c1 0202 	rsble	r2, r1, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	e7e0      	b.n	8008f40 <_printf_float+0x198>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	055a      	lsls	r2, r3, #21
 8008f82:	d407      	bmi.n	8008f94 <_printf_float+0x1ec>
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	4642      	mov	r2, r8
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	47b8      	blx	r7
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d12b      	bne.n	8008fea <_printf_float+0x242>
 8008f92:	e764      	b.n	8008e5e <_printf_float+0xb6>
 8008f94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f98:	f240 80dc 	bls.w	8009154 <_printf_float+0x3ac>
 8008f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f7f7 fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d033      	beq.n	8009014 <_printf_float+0x26c>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	4a35      	ldr	r2, [pc, #212]	@ (8009088 <_printf_float+0x2e0>)
 8008fb4:	47b8      	blx	r7
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f43f af51 	beq.w	8008e5e <_printf_float+0xb6>
 8008fbc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008fc0:	4543      	cmp	r3, r8
 8008fc2:	db02      	blt.n	8008fca <_printf_float+0x222>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	07d8      	lsls	r0, r3, #31
 8008fc8:	d50f      	bpl.n	8008fea <_printf_float+0x242>
 8008fca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	f43f af42 	beq.w	8008e5e <_printf_float+0xb6>
 8008fda:	f04f 0900 	mov.w	r9, #0
 8008fde:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fe2:	f104 0a1a 	add.w	sl, r4, #26
 8008fe6:	45c8      	cmp	r8, r9
 8008fe8:	dc09      	bgt.n	8008ffe <_printf_float+0x256>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	079b      	lsls	r3, r3, #30
 8008fee:	f100 8102 	bmi.w	80091f6 <_printf_float+0x44e>
 8008ff2:	68e0      	ldr	r0, [r4, #12]
 8008ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ff6:	4298      	cmp	r0, r3
 8008ff8:	bfb8      	it	lt
 8008ffa:	4618      	movlt	r0, r3
 8008ffc:	e731      	b.n	8008e62 <_printf_float+0xba>
 8008ffe:	2301      	movs	r3, #1
 8009000:	4652      	mov	r2, sl
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	f43f af28 	beq.w	8008e5e <_printf_float+0xb6>
 800900e:	f109 0901 	add.w	r9, r9, #1
 8009012:	e7e8      	b.n	8008fe6 <_printf_float+0x23e>
 8009014:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009016:	2b00      	cmp	r3, #0
 8009018:	dc38      	bgt.n	800908c <_printf_float+0x2e4>
 800901a:	2301      	movs	r3, #1
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	4a19      	ldr	r2, [pc, #100]	@ (8009088 <_printf_float+0x2e0>)
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	f43f af1a 	beq.w	8008e5e <_printf_float+0xb6>
 800902a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800902e:	ea59 0303 	orrs.w	r3, r9, r3
 8009032:	d102      	bne.n	800903a <_printf_float+0x292>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	07d9      	lsls	r1, r3, #31
 8009038:	d5d7      	bpl.n	8008fea <_printf_float+0x242>
 800903a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	f43f af0a 	beq.w	8008e5e <_printf_float+0xb6>
 800904a:	f04f 0a00 	mov.w	sl, #0
 800904e:	f104 0b1a 	add.w	fp, r4, #26
 8009052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009054:	425b      	negs	r3, r3
 8009056:	4553      	cmp	r3, sl
 8009058:	dc01      	bgt.n	800905e <_printf_float+0x2b6>
 800905a:	464b      	mov	r3, r9
 800905c:	e793      	b.n	8008f86 <_printf_float+0x1de>
 800905e:	2301      	movs	r3, #1
 8009060:	465a      	mov	r2, fp
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f aef8 	beq.w	8008e5e <_printf_float+0xb6>
 800906e:	f10a 0a01 	add.w	sl, sl, #1
 8009072:	e7ee      	b.n	8009052 <_printf_float+0x2aa>
 8009074:	7fefffff 	.word	0x7fefffff
 8009078:	0800c05f 	.word	0x0800c05f
 800907c:	0800c063 	.word	0x0800c063
 8009080:	0800c067 	.word	0x0800c067
 8009084:	0800c06b 	.word	0x0800c06b
 8009088:	0800c06f 	.word	0x0800c06f
 800908c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800908e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009092:	4553      	cmp	r3, sl
 8009094:	bfa8      	it	ge
 8009096:	4653      	movge	r3, sl
 8009098:	2b00      	cmp	r3, #0
 800909a:	4699      	mov	r9, r3
 800909c:	dc36      	bgt.n	800910c <_printf_float+0x364>
 800909e:	f04f 0b00 	mov.w	fp, #0
 80090a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a6:	f104 021a 	add.w	r2, r4, #26
 80090aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ae:	eba3 0309 	sub.w	r3, r3, r9
 80090b2:	455b      	cmp	r3, fp
 80090b4:	dc31      	bgt.n	800911a <_printf_float+0x372>
 80090b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b8:	459a      	cmp	sl, r3
 80090ba:	dc3a      	bgt.n	8009132 <_printf_float+0x38a>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	07da      	lsls	r2, r3, #31
 80090c0:	d437      	bmi.n	8009132 <_printf_float+0x38a>
 80090c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090c4:	ebaa 0903 	sub.w	r9, sl, r3
 80090c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ca:	ebaa 0303 	sub.w	r3, sl, r3
 80090ce:	4599      	cmp	r9, r3
 80090d0:	bfa8      	it	ge
 80090d2:	4699      	movge	r9, r3
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	dc33      	bgt.n	8009142 <_printf_float+0x39a>
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090e2:	f104 0b1a 	add.w	fp, r4, #26
 80090e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090e8:	ebaa 0303 	sub.w	r3, sl, r3
 80090ec:	eba3 0309 	sub.w	r3, r3, r9
 80090f0:	4543      	cmp	r3, r8
 80090f2:	f77f af7a 	ble.w	8008fea <_printf_float+0x242>
 80090f6:	2301      	movs	r3, #1
 80090f8:	465a      	mov	r2, fp
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f aeac 	beq.w	8008e5e <_printf_float+0xb6>
 8009106:	f108 0801 	add.w	r8, r8, #1
 800910a:	e7ec      	b.n	80090e6 <_printf_float+0x33e>
 800910c:	4642      	mov	r2, r8
 800910e:	4631      	mov	r1, r6
 8009110:	4628      	mov	r0, r5
 8009112:	47b8      	blx	r7
 8009114:	3001      	adds	r0, #1
 8009116:	d1c2      	bne.n	800909e <_printf_float+0x2f6>
 8009118:	e6a1      	b.n	8008e5e <_printf_float+0xb6>
 800911a:	2301      	movs	r3, #1
 800911c:	4631      	mov	r1, r6
 800911e:	4628      	mov	r0, r5
 8009120:	920a      	str	r2, [sp, #40]	@ 0x28
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	f43f ae9a 	beq.w	8008e5e <_printf_float+0xb6>
 800912a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800912c:	f10b 0b01 	add.w	fp, fp, #1
 8009130:	e7bb      	b.n	80090aa <_printf_float+0x302>
 8009132:	4631      	mov	r1, r6
 8009134:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	d1c0      	bne.n	80090c2 <_printf_float+0x31a>
 8009140:	e68d      	b.n	8008e5e <_printf_float+0xb6>
 8009142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009144:	464b      	mov	r3, r9
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	4442      	add	r2, r8
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	d1c3      	bne.n	80090da <_printf_float+0x332>
 8009152:	e684      	b.n	8008e5e <_printf_float+0xb6>
 8009154:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009158:	f1ba 0f01 	cmp.w	sl, #1
 800915c:	dc01      	bgt.n	8009162 <_printf_float+0x3ba>
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d536      	bpl.n	80091d0 <_printf_float+0x428>
 8009162:	2301      	movs	r3, #1
 8009164:	4642      	mov	r2, r8
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae76 	beq.w	8008e5e <_printf_float+0xb6>
 8009172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae6e 	beq.w	8008e5e <_printf_float+0xb6>
 8009182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009186:	2200      	movs	r2, #0
 8009188:	2300      	movs	r3, #0
 800918a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800918e:	f7f7 fc0b 	bl	80009a8 <__aeabi_dcmpeq>
 8009192:	b9c0      	cbnz	r0, 80091c6 <_printf_float+0x41e>
 8009194:	4653      	mov	r3, sl
 8009196:	f108 0201 	add.w	r2, r8, #1
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	d10c      	bne.n	80091be <_printf_float+0x416>
 80091a4:	e65b      	b.n	8008e5e <_printf_float+0xb6>
 80091a6:	2301      	movs	r3, #1
 80091a8:	465a      	mov	r2, fp
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f ae54 	beq.w	8008e5e <_printf_float+0xb6>
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	45d0      	cmp	r8, sl
 80091bc:	dbf3      	blt.n	80091a6 <_printf_float+0x3fe>
 80091be:	464b      	mov	r3, r9
 80091c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091c4:	e6e0      	b.n	8008f88 <_printf_float+0x1e0>
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	f104 0b1a 	add.w	fp, r4, #26
 80091ce:	e7f4      	b.n	80091ba <_printf_float+0x412>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4642      	mov	r2, r8
 80091d4:	e7e1      	b.n	800919a <_printf_float+0x3f2>
 80091d6:	2301      	movs	r3, #1
 80091d8:	464a      	mov	r2, r9
 80091da:	4631      	mov	r1, r6
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	f43f ae3c 	beq.w	8008e5e <_printf_float+0xb6>
 80091e6:	f108 0801 	add.w	r8, r8, #1
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091ee:	1a5b      	subs	r3, r3, r1
 80091f0:	4543      	cmp	r3, r8
 80091f2:	dcf0      	bgt.n	80091d6 <_printf_float+0x42e>
 80091f4:	e6fd      	b.n	8008ff2 <_printf_float+0x24a>
 80091f6:	f04f 0800 	mov.w	r8, #0
 80091fa:	f104 0919 	add.w	r9, r4, #25
 80091fe:	e7f4      	b.n	80091ea <_printf_float+0x442>

08009200 <_printf_common>:
 8009200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	4616      	mov	r6, r2
 8009206:	4698      	mov	r8, r3
 8009208:	688a      	ldr	r2, [r1, #8]
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	4607      	mov	r7, r0
 800920e:	4293      	cmp	r3, r2
 8009210:	bfb8      	it	lt
 8009212:	4613      	movlt	r3, r2
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800921a:	460c      	mov	r4, r1
 800921c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009220:	b10a      	cbz	r2, 8009226 <_printf_common+0x26>
 8009222:	3301      	adds	r3, #1
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	0699      	lsls	r1, r3, #26
 800922a:	bf42      	ittt	mi
 800922c:	6833      	ldrmi	r3, [r6, #0]
 800922e:	3302      	addmi	r3, #2
 8009230:	6033      	strmi	r3, [r6, #0]
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	f015 0506 	ands.w	r5, r5, #6
 8009238:	d106      	bne.n	8009248 <_printf_common+0x48>
 800923a:	f104 0a19 	add.w	sl, r4, #25
 800923e:	68e3      	ldr	r3, [r4, #12]
 8009240:	6832      	ldr	r2, [r6, #0]
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	42ab      	cmp	r3, r5
 8009246:	dc2b      	bgt.n	80092a0 <_printf_common+0xa0>
 8009248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	3b00      	subs	r3, #0
 8009250:	bf18      	it	ne
 8009252:	2301      	movne	r3, #1
 8009254:	0692      	lsls	r2, r2, #26
 8009256:	d430      	bmi.n	80092ba <_printf_common+0xba>
 8009258:	4641      	mov	r1, r8
 800925a:	4638      	mov	r0, r7
 800925c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009260:	47c8      	blx	r9
 8009262:	3001      	adds	r0, #1
 8009264:	d023      	beq.n	80092ae <_printf_common+0xae>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	6922      	ldr	r2, [r4, #16]
 800926a:	f003 0306 	and.w	r3, r3, #6
 800926e:	2b04      	cmp	r3, #4
 8009270:	bf14      	ite	ne
 8009272:	2500      	movne	r5, #0
 8009274:	6833      	ldreq	r3, [r6, #0]
 8009276:	f04f 0600 	mov.w	r6, #0
 800927a:	bf08      	it	eq
 800927c:	68e5      	ldreq	r5, [r4, #12]
 800927e:	f104 041a 	add.w	r4, r4, #26
 8009282:	bf08      	it	eq
 8009284:	1aed      	subeq	r5, r5, r3
 8009286:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800928a:	bf08      	it	eq
 800928c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009290:	4293      	cmp	r3, r2
 8009292:	bfc4      	itt	gt
 8009294:	1a9b      	subgt	r3, r3, r2
 8009296:	18ed      	addgt	r5, r5, r3
 8009298:	42b5      	cmp	r5, r6
 800929a:	d11a      	bne.n	80092d2 <_printf_common+0xd2>
 800929c:	2000      	movs	r0, #0
 800929e:	e008      	b.n	80092b2 <_printf_common+0xb2>
 80092a0:	2301      	movs	r3, #1
 80092a2:	4652      	mov	r2, sl
 80092a4:	4641      	mov	r1, r8
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c8      	blx	r9
 80092aa:	3001      	adds	r0, #1
 80092ac:	d103      	bne.n	80092b6 <_printf_common+0xb6>
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b6:	3501      	adds	r5, #1
 80092b8:	e7c1      	b.n	800923e <_printf_common+0x3e>
 80092ba:	2030      	movs	r0, #48	@ 0x30
 80092bc:	18e1      	adds	r1, r4, r3
 80092be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092c8:	4422      	add	r2, r4
 80092ca:	3302      	adds	r3, #2
 80092cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092d0:	e7c2      	b.n	8009258 <_printf_common+0x58>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4622      	mov	r2, r4
 80092d6:	4641      	mov	r1, r8
 80092d8:	4638      	mov	r0, r7
 80092da:	47c8      	blx	r9
 80092dc:	3001      	adds	r0, #1
 80092de:	d0e6      	beq.n	80092ae <_printf_common+0xae>
 80092e0:	3601      	adds	r6, #1
 80092e2:	e7d9      	b.n	8009298 <_printf_common+0x98>

080092e4 <_printf_i>:
 80092e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	7e0f      	ldrb	r7, [r1, #24]
 80092ea:	4691      	mov	r9, r2
 80092ec:	2f78      	cmp	r7, #120	@ 0x78
 80092ee:	4680      	mov	r8, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	469a      	mov	sl, r3
 80092f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092fa:	d807      	bhi.n	800930c <_printf_i+0x28>
 80092fc:	2f62      	cmp	r7, #98	@ 0x62
 80092fe:	d80a      	bhi.n	8009316 <_printf_i+0x32>
 8009300:	2f00      	cmp	r7, #0
 8009302:	f000 80d3 	beq.w	80094ac <_printf_i+0x1c8>
 8009306:	2f58      	cmp	r7, #88	@ 0x58
 8009308:	f000 80ba 	beq.w	8009480 <_printf_i+0x19c>
 800930c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009314:	e03a      	b.n	800938c <_printf_i+0xa8>
 8009316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800931a:	2b15      	cmp	r3, #21
 800931c:	d8f6      	bhi.n	800930c <_printf_i+0x28>
 800931e:	a101      	add	r1, pc, #4	@ (adr r1, 8009324 <_printf_i+0x40>)
 8009320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009324:	0800937d 	.word	0x0800937d
 8009328:	08009391 	.word	0x08009391
 800932c:	0800930d 	.word	0x0800930d
 8009330:	0800930d 	.word	0x0800930d
 8009334:	0800930d 	.word	0x0800930d
 8009338:	0800930d 	.word	0x0800930d
 800933c:	08009391 	.word	0x08009391
 8009340:	0800930d 	.word	0x0800930d
 8009344:	0800930d 	.word	0x0800930d
 8009348:	0800930d 	.word	0x0800930d
 800934c:	0800930d 	.word	0x0800930d
 8009350:	08009493 	.word	0x08009493
 8009354:	080093bb 	.word	0x080093bb
 8009358:	0800944d 	.word	0x0800944d
 800935c:	0800930d 	.word	0x0800930d
 8009360:	0800930d 	.word	0x0800930d
 8009364:	080094b5 	.word	0x080094b5
 8009368:	0800930d 	.word	0x0800930d
 800936c:	080093bb 	.word	0x080093bb
 8009370:	0800930d 	.word	0x0800930d
 8009374:	0800930d 	.word	0x0800930d
 8009378:	08009455 	.word	0x08009455
 800937c:	6833      	ldr	r3, [r6, #0]
 800937e:	1d1a      	adds	r2, r3, #4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6032      	str	r2, [r6, #0]
 8009384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800938c:	2301      	movs	r3, #1
 800938e:	e09e      	b.n	80094ce <_printf_i+0x1ea>
 8009390:	6833      	ldr	r3, [r6, #0]
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	1d19      	adds	r1, r3, #4
 8009396:	6031      	str	r1, [r6, #0]
 8009398:	0606      	lsls	r6, r0, #24
 800939a:	d501      	bpl.n	80093a0 <_printf_i+0xbc>
 800939c:	681d      	ldr	r5, [r3, #0]
 800939e:	e003      	b.n	80093a8 <_printf_i+0xc4>
 80093a0:	0645      	lsls	r5, r0, #25
 80093a2:	d5fb      	bpl.n	800939c <_printf_i+0xb8>
 80093a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	da03      	bge.n	80093b4 <_printf_i+0xd0>
 80093ac:	232d      	movs	r3, #45	@ 0x2d
 80093ae:	426d      	negs	r5, r5
 80093b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b4:	230a      	movs	r3, #10
 80093b6:	4859      	ldr	r0, [pc, #356]	@ (800951c <_printf_i+0x238>)
 80093b8:	e011      	b.n	80093de <_printf_i+0xfa>
 80093ba:	6821      	ldr	r1, [r4, #0]
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	0608      	lsls	r0, r1, #24
 80093c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80093c4:	d402      	bmi.n	80093cc <_printf_i+0xe8>
 80093c6:	0649      	lsls	r1, r1, #25
 80093c8:	bf48      	it	mi
 80093ca:	b2ad      	uxthmi	r5, r5
 80093cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80093ce:	6033      	str	r3, [r6, #0]
 80093d0:	bf14      	ite	ne
 80093d2:	230a      	movne	r3, #10
 80093d4:	2308      	moveq	r3, #8
 80093d6:	4851      	ldr	r0, [pc, #324]	@ (800951c <_printf_i+0x238>)
 80093d8:	2100      	movs	r1, #0
 80093da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093de:	6866      	ldr	r6, [r4, #4]
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	bfa8      	it	ge
 80093e4:	6821      	ldrge	r1, [r4, #0]
 80093e6:	60a6      	str	r6, [r4, #8]
 80093e8:	bfa4      	itt	ge
 80093ea:	f021 0104 	bicge.w	r1, r1, #4
 80093ee:	6021      	strge	r1, [r4, #0]
 80093f0:	b90d      	cbnz	r5, 80093f6 <_printf_i+0x112>
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	d04b      	beq.n	800948e <_printf_i+0x1aa>
 80093f6:	4616      	mov	r6, r2
 80093f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80093fc:	fb03 5711 	mls	r7, r3, r1, r5
 8009400:	5dc7      	ldrb	r7, [r0, r7]
 8009402:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009406:	462f      	mov	r7, r5
 8009408:	42bb      	cmp	r3, r7
 800940a:	460d      	mov	r5, r1
 800940c:	d9f4      	bls.n	80093f8 <_printf_i+0x114>
 800940e:	2b08      	cmp	r3, #8
 8009410:	d10b      	bne.n	800942a <_printf_i+0x146>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	07df      	lsls	r7, r3, #31
 8009416:	d508      	bpl.n	800942a <_printf_i+0x146>
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	6861      	ldr	r1, [r4, #4]
 800941c:	4299      	cmp	r1, r3
 800941e:	bfde      	ittt	le
 8009420:	2330      	movle	r3, #48	@ 0x30
 8009422:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009426:	f106 36ff 	addle.w	r6, r6, #4294967295
 800942a:	1b92      	subs	r2, r2, r6
 800942c:	6122      	str	r2, [r4, #16]
 800942e:	464b      	mov	r3, r9
 8009430:	4621      	mov	r1, r4
 8009432:	4640      	mov	r0, r8
 8009434:	f8cd a000 	str.w	sl, [sp]
 8009438:	aa03      	add	r2, sp, #12
 800943a:	f7ff fee1 	bl	8009200 <_printf_common>
 800943e:	3001      	adds	r0, #1
 8009440:	d14a      	bne.n	80094d8 <_printf_i+0x1f4>
 8009442:	f04f 30ff 	mov.w	r0, #4294967295
 8009446:	b004      	add	sp, #16
 8009448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	f043 0320 	orr.w	r3, r3, #32
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	2778      	movs	r7, #120	@ 0x78
 8009456:	4832      	ldr	r0, [pc, #200]	@ (8009520 <_printf_i+0x23c>)
 8009458:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	6831      	ldr	r1, [r6, #0]
 8009460:	061f      	lsls	r7, r3, #24
 8009462:	f851 5b04 	ldr.w	r5, [r1], #4
 8009466:	d402      	bmi.n	800946e <_printf_i+0x18a>
 8009468:	065f      	lsls	r7, r3, #25
 800946a:	bf48      	it	mi
 800946c:	b2ad      	uxthmi	r5, r5
 800946e:	6031      	str	r1, [r6, #0]
 8009470:	07d9      	lsls	r1, r3, #31
 8009472:	bf44      	itt	mi
 8009474:	f043 0320 	orrmi.w	r3, r3, #32
 8009478:	6023      	strmi	r3, [r4, #0]
 800947a:	b11d      	cbz	r5, 8009484 <_printf_i+0x1a0>
 800947c:	2310      	movs	r3, #16
 800947e:	e7ab      	b.n	80093d8 <_printf_i+0xf4>
 8009480:	4826      	ldr	r0, [pc, #152]	@ (800951c <_printf_i+0x238>)
 8009482:	e7e9      	b.n	8009458 <_printf_i+0x174>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	f023 0320 	bic.w	r3, r3, #32
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	e7f6      	b.n	800947c <_printf_i+0x198>
 800948e:	4616      	mov	r6, r2
 8009490:	e7bd      	b.n	800940e <_printf_i+0x12a>
 8009492:	6833      	ldr	r3, [r6, #0]
 8009494:	6825      	ldr	r5, [r4, #0]
 8009496:	1d18      	adds	r0, r3, #4
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	6030      	str	r0, [r6, #0]
 800949c:	062e      	lsls	r6, r5, #24
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	d501      	bpl.n	80094a6 <_printf_i+0x1c2>
 80094a2:	6019      	str	r1, [r3, #0]
 80094a4:	e002      	b.n	80094ac <_printf_i+0x1c8>
 80094a6:	0668      	lsls	r0, r5, #25
 80094a8:	d5fb      	bpl.n	80094a2 <_printf_i+0x1be>
 80094aa:	8019      	strh	r1, [r3, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	4616      	mov	r6, r2
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	e7bc      	b.n	800942e <_printf_i+0x14a>
 80094b4:	6833      	ldr	r3, [r6, #0]
 80094b6:	2100      	movs	r1, #0
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	6032      	str	r2, [r6, #0]
 80094bc:	681e      	ldr	r6, [r3, #0]
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	4630      	mov	r0, r6
 80094c2:	f000 fa0c 	bl	80098de <memchr>
 80094c6:	b108      	cbz	r0, 80094cc <_printf_i+0x1e8>
 80094c8:	1b80      	subs	r0, r0, r6
 80094ca:	6060      	str	r0, [r4, #4]
 80094cc:	6863      	ldr	r3, [r4, #4]
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	2300      	movs	r3, #0
 80094d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d6:	e7aa      	b.n	800942e <_printf_i+0x14a>
 80094d8:	4632      	mov	r2, r6
 80094da:	4649      	mov	r1, r9
 80094dc:	4640      	mov	r0, r8
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	47d0      	blx	sl
 80094e2:	3001      	adds	r0, #1
 80094e4:	d0ad      	beq.n	8009442 <_printf_i+0x15e>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	079b      	lsls	r3, r3, #30
 80094ea:	d413      	bmi.n	8009514 <_printf_i+0x230>
 80094ec:	68e0      	ldr	r0, [r4, #12]
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	4298      	cmp	r0, r3
 80094f2:	bfb8      	it	lt
 80094f4:	4618      	movlt	r0, r3
 80094f6:	e7a6      	b.n	8009446 <_printf_i+0x162>
 80094f8:	2301      	movs	r3, #1
 80094fa:	4632      	mov	r2, r6
 80094fc:	4649      	mov	r1, r9
 80094fe:	4640      	mov	r0, r8
 8009500:	47d0      	blx	sl
 8009502:	3001      	adds	r0, #1
 8009504:	d09d      	beq.n	8009442 <_printf_i+0x15e>
 8009506:	3501      	adds	r5, #1
 8009508:	68e3      	ldr	r3, [r4, #12]
 800950a:	9903      	ldr	r1, [sp, #12]
 800950c:	1a5b      	subs	r3, r3, r1
 800950e:	42ab      	cmp	r3, r5
 8009510:	dcf2      	bgt.n	80094f8 <_printf_i+0x214>
 8009512:	e7eb      	b.n	80094ec <_printf_i+0x208>
 8009514:	2500      	movs	r5, #0
 8009516:	f104 0619 	add.w	r6, r4, #25
 800951a:	e7f5      	b.n	8009508 <_printf_i+0x224>
 800951c:	0800c071 	.word	0x0800c071
 8009520:	0800c082 	.word	0x0800c082

08009524 <std>:
 8009524:	2300      	movs	r3, #0
 8009526:	b510      	push	{r4, lr}
 8009528:	4604      	mov	r4, r0
 800952a:	e9c0 3300 	strd	r3, r3, [r0]
 800952e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009532:	6083      	str	r3, [r0, #8]
 8009534:	8181      	strh	r1, [r0, #12]
 8009536:	6643      	str	r3, [r0, #100]	@ 0x64
 8009538:	81c2      	strh	r2, [r0, #14]
 800953a:	6183      	str	r3, [r0, #24]
 800953c:	4619      	mov	r1, r3
 800953e:	2208      	movs	r2, #8
 8009540:	305c      	adds	r0, #92	@ 0x5c
 8009542:	f000 f94d 	bl	80097e0 <memset>
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x58>)
 8009548:	6224      	str	r4, [r4, #32]
 800954a:	6263      	str	r3, [r4, #36]	@ 0x24
 800954c:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <std+0x5c>)
 800954e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009550:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <std+0x60>)
 8009552:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009554:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <std+0x64>)
 8009556:	6323      	str	r3, [r4, #48]	@ 0x30
 8009558:	4b0c      	ldr	r3, [pc, #48]	@ (800958c <std+0x68>)
 800955a:	429c      	cmp	r4, r3
 800955c:	d006      	beq.n	800956c <std+0x48>
 800955e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009562:	4294      	cmp	r4, r2
 8009564:	d002      	beq.n	800956c <std+0x48>
 8009566:	33d0      	adds	r3, #208	@ 0xd0
 8009568:	429c      	cmp	r4, r3
 800956a:	d105      	bne.n	8009578 <std+0x54>
 800956c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f000 b9b0 	b.w	80098d8 <__retarget_lock_init_recursive>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	080096e9 	.word	0x080096e9
 8009580:	0800970b 	.word	0x0800970b
 8009584:	08009743 	.word	0x08009743
 8009588:	08009767 	.word	0x08009767
 800958c:	20000e1c 	.word	0x20000e1c

08009590 <stdio_exit_handler>:
 8009590:	4a02      	ldr	r2, [pc, #8]	@ (800959c <stdio_exit_handler+0xc>)
 8009592:	4903      	ldr	r1, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x10>)
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <stdio_exit_handler+0x14>)
 8009596:	f000 b869 	b.w	800966c <_fwalk_sglue>
 800959a:	bf00      	nop
 800959c:	2000006c 	.word	0x2000006c
 80095a0:	0800b24d 	.word	0x0800b24d
 80095a4:	2000007c 	.word	0x2000007c

080095a8 <cleanup_stdio>:
 80095a8:	6841      	ldr	r1, [r0, #4]
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <cleanup_stdio+0x34>)
 80095ac:	b510      	push	{r4, lr}
 80095ae:	4299      	cmp	r1, r3
 80095b0:	4604      	mov	r4, r0
 80095b2:	d001      	beq.n	80095b8 <cleanup_stdio+0x10>
 80095b4:	f001 fe4a 	bl	800b24c <_fflush_r>
 80095b8:	68a1      	ldr	r1, [r4, #8]
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <cleanup_stdio+0x38>)
 80095bc:	4299      	cmp	r1, r3
 80095be:	d002      	beq.n	80095c6 <cleanup_stdio+0x1e>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f001 fe43 	bl	800b24c <_fflush_r>
 80095c6:	68e1      	ldr	r1, [r4, #12]
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <cleanup_stdio+0x3c>)
 80095ca:	4299      	cmp	r1, r3
 80095cc:	d004      	beq.n	80095d8 <cleanup_stdio+0x30>
 80095ce:	4620      	mov	r0, r4
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f001 be3a 	b.w	800b24c <_fflush_r>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	bf00      	nop
 80095dc:	20000e1c 	.word	0x20000e1c
 80095e0:	20000e84 	.word	0x20000e84
 80095e4:	20000eec 	.word	0x20000eec

080095e8 <global_stdio_init.part.0>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x30>)
 80095ec:	4c0b      	ldr	r4, [pc, #44]	@ (800961c <global_stdio_init.part.0+0x34>)
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <global_stdio_init.part.0+0x38>)
 80095f0:	4620      	mov	r0, r4
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	2104      	movs	r1, #4
 80095f6:	2200      	movs	r2, #0
 80095f8:	f7ff ff94 	bl	8009524 <std>
 80095fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009600:	2201      	movs	r2, #1
 8009602:	2109      	movs	r1, #9
 8009604:	f7ff ff8e 	bl	8009524 <std>
 8009608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800960c:	2202      	movs	r2, #2
 800960e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009612:	2112      	movs	r1, #18
 8009614:	f7ff bf86 	b.w	8009524 <std>
 8009618:	20000f54 	.word	0x20000f54
 800961c:	20000e1c 	.word	0x20000e1c
 8009620:	08009591 	.word	0x08009591

08009624 <__sfp_lock_acquire>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__sfp_lock_acquire+0x8>)
 8009626:	f000 b958 	b.w	80098da <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	20000f5d 	.word	0x20000f5d

08009630 <__sfp_lock_release>:
 8009630:	4801      	ldr	r0, [pc, #4]	@ (8009638 <__sfp_lock_release+0x8>)
 8009632:	f000 b953 	b.w	80098dc <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	20000f5d 	.word	0x20000f5d

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	f7ff fff0 	bl	8009624 <__sfp_lock_acquire>
 8009644:	6a23      	ldr	r3, [r4, #32]
 8009646:	b11b      	cbz	r3, 8009650 <__sinit+0x14>
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f7ff bff0 	b.w	8009630 <__sfp_lock_release>
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x28>)
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <__sinit+0x2c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f5      	bne.n	8009648 <__sinit+0xc>
 800965c:	f7ff ffc4 	bl	80095e8 <global_stdio_init.part.0>
 8009660:	e7f2      	b.n	8009648 <__sinit+0xc>
 8009662:	bf00      	nop
 8009664:	080095a9 	.word	0x080095a9
 8009668:	20000f54 	.word	0x20000f54

0800966c <_fwalk_sglue>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4607      	mov	r7, r0
 8009672:	4688      	mov	r8, r1
 8009674:	4614      	mov	r4, r2
 8009676:	2600      	movs	r6, #0
 8009678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800967c:	f1b9 0901 	subs.w	r9, r9, #1
 8009680:	d505      	bpl.n	800968e <_fwalk_sglue+0x22>
 8009682:	6824      	ldr	r4, [r4, #0]
 8009684:	2c00      	cmp	r4, #0
 8009686:	d1f7      	bne.n	8009678 <_fwalk_sglue+0xc>
 8009688:	4630      	mov	r0, r6
 800968a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d907      	bls.n	80096a4 <_fwalk_sglue+0x38>
 8009694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009698:	3301      	adds	r3, #1
 800969a:	d003      	beq.n	80096a4 <_fwalk_sglue+0x38>
 800969c:	4629      	mov	r1, r5
 800969e:	4638      	mov	r0, r7
 80096a0:	47c0      	blx	r8
 80096a2:	4306      	orrs	r6, r0
 80096a4:	3568      	adds	r5, #104	@ 0x68
 80096a6:	e7e9      	b.n	800967c <_fwalk_sglue+0x10>

080096a8 <siprintf>:
 80096a8:	b40e      	push	{r1, r2, r3}
 80096aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096ae:	b500      	push	{lr}
 80096b0:	b09c      	sub	sp, #112	@ 0x70
 80096b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80096b4:	9002      	str	r0, [sp, #8]
 80096b6:	9006      	str	r0, [sp, #24]
 80096b8:	9107      	str	r1, [sp, #28]
 80096ba:	9104      	str	r1, [sp, #16]
 80096bc:	4808      	ldr	r0, [pc, #32]	@ (80096e0 <siprintf+0x38>)
 80096be:	4909      	ldr	r1, [pc, #36]	@ (80096e4 <siprintf+0x3c>)
 80096c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c4:	9105      	str	r1, [sp, #20]
 80096c6:	6800      	ldr	r0, [r0, #0]
 80096c8:	a902      	add	r1, sp, #8
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	f001 fc42 	bl	800af54 <_svfiprintf_r>
 80096d0:	2200      	movs	r2, #0
 80096d2:	9b02      	ldr	r3, [sp, #8]
 80096d4:	701a      	strb	r2, [r3, #0]
 80096d6:	b01c      	add	sp, #112	@ 0x70
 80096d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096dc:	b003      	add	sp, #12
 80096de:	4770      	bx	lr
 80096e0:	20000078 	.word	0x20000078
 80096e4:	ffff0208 	.word	0xffff0208

080096e8 <__sread>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	f000 f8a4 	bl	800983c <_read_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	bfab      	itete	ge
 80096f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096fa:	89a3      	ldrhlt	r3, [r4, #12]
 80096fc:	181b      	addge	r3, r3, r0
 80096fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009702:	bfac      	ite	ge
 8009704:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009706:	81a3      	strhlt	r3, [r4, #12]
 8009708:	bd10      	pop	{r4, pc}

0800970a <__swrite>:
 800970a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	461f      	mov	r7, r3
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	4605      	mov	r5, r0
 8009714:	05db      	lsls	r3, r3, #23
 8009716:	460c      	mov	r4, r1
 8009718:	4616      	mov	r6, r2
 800971a:	d505      	bpl.n	8009728 <__swrite+0x1e>
 800971c:	2302      	movs	r3, #2
 800971e:	2200      	movs	r2, #0
 8009720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009724:	f000 f878 	bl	8009818 <_lseek_r>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	4632      	mov	r2, r6
 800972c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	4628      	mov	r0, r5
 8009734:	463b      	mov	r3, r7
 8009736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973e:	f000 b88f 	b.w	8009860 <_write_r>

08009742 <__sseek>:
 8009742:	b510      	push	{r4, lr}
 8009744:	460c      	mov	r4, r1
 8009746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974a:	f000 f865 	bl	8009818 <_lseek_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	bf15      	itete	ne
 8009754:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800975a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800975e:	81a3      	strheq	r3, [r4, #12]
 8009760:	bf18      	it	ne
 8009762:	81a3      	strhne	r3, [r4, #12]
 8009764:	bd10      	pop	{r4, pc}

08009766 <__sclose>:
 8009766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976a:	f000 b845 	b.w	80097f8 <_close_r>

0800976e <_vsniprintf_r>:
 800976e:	b530      	push	{r4, r5, lr}
 8009770:	4614      	mov	r4, r2
 8009772:	2c00      	cmp	r4, #0
 8009774:	4605      	mov	r5, r0
 8009776:	461a      	mov	r2, r3
 8009778:	b09b      	sub	sp, #108	@ 0x6c
 800977a:	da05      	bge.n	8009788 <_vsniprintf_r+0x1a>
 800977c:	238b      	movs	r3, #139	@ 0x8b
 800977e:	6003      	str	r3, [r0, #0]
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	b01b      	add	sp, #108	@ 0x6c
 8009786:	bd30      	pop	{r4, r5, pc}
 8009788:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800978c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009790:	bf0c      	ite	eq
 8009792:	4623      	moveq	r3, r4
 8009794:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	9305      	str	r3, [sp, #20]
 800979c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097a0:	9100      	str	r1, [sp, #0]
 80097a2:	9104      	str	r1, [sp, #16]
 80097a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80097a8:	4669      	mov	r1, sp
 80097aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80097ac:	f001 fbd2 	bl	800af54 <_svfiprintf_r>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	bfbc      	itt	lt
 80097b4:	238b      	movlt	r3, #139	@ 0x8b
 80097b6:	602b      	strlt	r3, [r5, #0]
 80097b8:	2c00      	cmp	r4, #0
 80097ba:	d0e3      	beq.n	8009784 <_vsniprintf_r+0x16>
 80097bc:	2200      	movs	r2, #0
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	701a      	strb	r2, [r3, #0]
 80097c2:	e7df      	b.n	8009784 <_vsniprintf_r+0x16>

080097c4 <vsniprintf>:
 80097c4:	b507      	push	{r0, r1, r2, lr}
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	460a      	mov	r2, r1
 80097cc:	4601      	mov	r1, r0
 80097ce:	4803      	ldr	r0, [pc, #12]	@ (80097dc <vsniprintf+0x18>)
 80097d0:	6800      	ldr	r0, [r0, #0]
 80097d2:	f7ff ffcc 	bl	800976e <_vsniprintf_r>
 80097d6:	b003      	add	sp, #12
 80097d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80097dc:	20000078 	.word	0x20000078

080097e0 <memset>:
 80097e0:	4603      	mov	r3, r0
 80097e2:	4402      	add	r2, r0
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d100      	bne.n	80097ea <memset+0xa>
 80097e8:	4770      	bx	lr
 80097ea:	f803 1b01 	strb.w	r1, [r3], #1
 80097ee:	e7f9      	b.n	80097e4 <memset+0x4>

080097f0 <_localeconv_r>:
 80097f0:	4800      	ldr	r0, [pc, #0]	@ (80097f4 <_localeconv_r+0x4>)
 80097f2:	4770      	bx	lr
 80097f4:	200001b8 	.word	0x200001b8

080097f8 <_close_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	2300      	movs	r3, #0
 80097fc:	4d05      	ldr	r5, [pc, #20]	@ (8009814 <_close_r+0x1c>)
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7fb fdf5 	bl	80053f2 <_close>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_close_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_close_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	20000f58 	.word	0x20000f58

08009818 <_lseek_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	2200      	movs	r2, #0
 8009822:	4d05      	ldr	r5, [pc, #20]	@ (8009838 <_lseek_r+0x20>)
 8009824:	602a      	str	r2, [r5, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	f7fb fe07 	bl	800543a <_lseek>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d102      	bne.n	8009836 <_lseek_r+0x1e>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	b103      	cbz	r3, 8009836 <_lseek_r+0x1e>
 8009834:	6023      	str	r3, [r4, #0]
 8009836:	bd38      	pop	{r3, r4, r5, pc}
 8009838:	20000f58 	.word	0x20000f58

0800983c <_read_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	4611      	mov	r1, r2
 8009844:	2200      	movs	r2, #0
 8009846:	4d05      	ldr	r5, [pc, #20]	@ (800985c <_read_r+0x20>)
 8009848:	602a      	str	r2, [r5, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	f7fb fd98 	bl	8005380 <_read>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_read_r+0x1e>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_read_r+0x1e>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20000f58 	.word	0x20000f58

08009860 <_write_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	2200      	movs	r2, #0
 800986a:	4d05      	ldr	r5, [pc, #20]	@ (8009880 <_write_r+0x20>)
 800986c:	602a      	str	r2, [r5, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	f7fb fda3 	bl	80053ba <_write>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d102      	bne.n	800987e <_write_r+0x1e>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	b103      	cbz	r3, 800987e <_write_r+0x1e>
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	20000f58 	.word	0x20000f58

08009884 <__errno>:
 8009884:	4b01      	ldr	r3, [pc, #4]	@ (800988c <__errno+0x8>)
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20000078 	.word	0x20000078

08009890 <__libc_init_array>:
 8009890:	b570      	push	{r4, r5, r6, lr}
 8009892:	2600      	movs	r6, #0
 8009894:	4d0c      	ldr	r5, [pc, #48]	@ (80098c8 <__libc_init_array+0x38>)
 8009896:	4c0d      	ldr	r4, [pc, #52]	@ (80098cc <__libc_init_array+0x3c>)
 8009898:	1b64      	subs	r4, r4, r5
 800989a:	10a4      	asrs	r4, r4, #2
 800989c:	42a6      	cmp	r6, r4
 800989e:	d109      	bne.n	80098b4 <__libc_init_array+0x24>
 80098a0:	f002 f870 	bl	800b984 <_init>
 80098a4:	2600      	movs	r6, #0
 80098a6:	4d0a      	ldr	r5, [pc, #40]	@ (80098d0 <__libc_init_array+0x40>)
 80098a8:	4c0a      	ldr	r4, [pc, #40]	@ (80098d4 <__libc_init_array+0x44>)
 80098aa:	1b64      	subs	r4, r4, r5
 80098ac:	10a4      	asrs	r4, r4, #2
 80098ae:	42a6      	cmp	r6, r4
 80098b0:	d105      	bne.n	80098be <__libc_init_array+0x2e>
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b8:	4798      	blx	r3
 80098ba:	3601      	adds	r6, #1
 80098bc:	e7ee      	b.n	800989c <__libc_init_array+0xc>
 80098be:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c2:	4798      	blx	r3
 80098c4:	3601      	adds	r6, #1
 80098c6:	e7f2      	b.n	80098ae <__libc_init_array+0x1e>
 80098c8:	0800c2d8 	.word	0x0800c2d8
 80098cc:	0800c2d8 	.word	0x0800c2d8
 80098d0:	0800c2d8 	.word	0x0800c2d8
 80098d4:	0800c2dc 	.word	0x0800c2dc

080098d8 <__retarget_lock_init_recursive>:
 80098d8:	4770      	bx	lr

080098da <__retarget_lock_acquire_recursive>:
 80098da:	4770      	bx	lr

080098dc <__retarget_lock_release_recursive>:
 80098dc:	4770      	bx	lr

080098de <memchr>:
 80098de:	4603      	mov	r3, r0
 80098e0:	b510      	push	{r4, lr}
 80098e2:	b2c9      	uxtb	r1, r1
 80098e4:	4402      	add	r2, r0
 80098e6:	4293      	cmp	r3, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	d101      	bne.n	80098f0 <memchr+0x12>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e003      	b.n	80098f8 <memchr+0x1a>
 80098f0:	7804      	ldrb	r4, [r0, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	428c      	cmp	r4, r1
 80098f6:	d1f6      	bne.n	80098e6 <memchr+0x8>
 80098f8:	bd10      	pop	{r4, pc}

080098fa <quorem>:
 80098fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fe:	6903      	ldr	r3, [r0, #16]
 8009900:	690c      	ldr	r4, [r1, #16]
 8009902:	4607      	mov	r7, r0
 8009904:	42a3      	cmp	r3, r4
 8009906:	db7e      	blt.n	8009a06 <quorem+0x10c>
 8009908:	3c01      	subs	r4, #1
 800990a:	00a3      	lsls	r3, r4, #2
 800990c:	f100 0514 	add.w	r5, r0, #20
 8009910:	f101 0814 	add.w	r8, r1, #20
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009924:	3301      	adds	r3, #1
 8009926:	429a      	cmp	r2, r3
 8009928:	fbb2 f6f3 	udiv	r6, r2, r3
 800992c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009930:	d32e      	bcc.n	8009990 <quorem+0x96>
 8009932:	f04f 0a00 	mov.w	sl, #0
 8009936:	46c4      	mov	ip, r8
 8009938:	46ae      	mov	lr, r5
 800993a:	46d3      	mov	fp, sl
 800993c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009940:	b298      	uxth	r0, r3
 8009942:	fb06 a000 	mla	r0, r6, r0, sl
 8009946:	0c1b      	lsrs	r3, r3, #16
 8009948:	0c02      	lsrs	r2, r0, #16
 800994a:	fb06 2303 	mla	r3, r6, r3, r2
 800994e:	f8de 2000 	ldr.w	r2, [lr]
 8009952:	b280      	uxth	r0, r0
 8009954:	b292      	uxth	r2, r2
 8009956:	1a12      	subs	r2, r2, r0
 8009958:	445a      	add	r2, fp
 800995a:	f8de 0000 	ldr.w	r0, [lr]
 800995e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009962:	b29b      	uxth	r3, r3
 8009964:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009968:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800996c:	b292      	uxth	r2, r2
 800996e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009972:	45e1      	cmp	r9, ip
 8009974:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009978:	f84e 2b04 	str.w	r2, [lr], #4
 800997c:	d2de      	bcs.n	800993c <quorem+0x42>
 800997e:	9b00      	ldr	r3, [sp, #0]
 8009980:	58eb      	ldr	r3, [r5, r3]
 8009982:	b92b      	cbnz	r3, 8009990 <quorem+0x96>
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	3b04      	subs	r3, #4
 8009988:	429d      	cmp	r5, r3
 800998a:	461a      	mov	r2, r3
 800998c:	d32f      	bcc.n	80099ee <quorem+0xf4>
 800998e:	613c      	str	r4, [r7, #16]
 8009990:	4638      	mov	r0, r7
 8009992:	f001 f97b 	bl	800ac8c <__mcmp>
 8009996:	2800      	cmp	r0, #0
 8009998:	db25      	blt.n	80099e6 <quorem+0xec>
 800999a:	4629      	mov	r1, r5
 800999c:	2000      	movs	r0, #0
 800999e:	f858 2b04 	ldr.w	r2, [r8], #4
 80099a2:	f8d1 c000 	ldr.w	ip, [r1]
 80099a6:	fa1f fe82 	uxth.w	lr, r2
 80099aa:	fa1f f38c 	uxth.w	r3, ip
 80099ae:	eba3 030e 	sub.w	r3, r3, lr
 80099b2:	4403      	add	r3, r0
 80099b4:	0c12      	lsrs	r2, r2, #16
 80099b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c4:	45c1      	cmp	r9, r8
 80099c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099ca:	f841 3b04 	str.w	r3, [r1], #4
 80099ce:	d2e6      	bcs.n	800999e <quorem+0xa4>
 80099d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099d8:	b922      	cbnz	r2, 80099e4 <quorem+0xea>
 80099da:	3b04      	subs	r3, #4
 80099dc:	429d      	cmp	r5, r3
 80099de:	461a      	mov	r2, r3
 80099e0:	d30b      	bcc.n	80099fa <quorem+0x100>
 80099e2:	613c      	str	r4, [r7, #16]
 80099e4:	3601      	adds	r6, #1
 80099e6:	4630      	mov	r0, r6
 80099e8:	b003      	add	sp, #12
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	3b04      	subs	r3, #4
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	d1cb      	bne.n	800998e <quorem+0x94>
 80099f6:	3c01      	subs	r4, #1
 80099f8:	e7c6      	b.n	8009988 <quorem+0x8e>
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	3b04      	subs	r3, #4
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d1ef      	bne.n	80099e2 <quorem+0xe8>
 8009a02:	3c01      	subs	r4, #1
 8009a04:	e7ea      	b.n	80099dc <quorem+0xe2>
 8009a06:	2000      	movs	r0, #0
 8009a08:	e7ee      	b.n	80099e8 <quorem+0xee>
 8009a0a:	0000      	movs	r0, r0
 8009a0c:	0000      	movs	r0, r0
	...

08009a10 <_dtoa_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	4614      	mov	r4, r2
 8009a16:	461d      	mov	r5, r3
 8009a18:	69c7      	ldr	r7, [r0, #28]
 8009a1a:	b097      	sub	sp, #92	@ 0x5c
 8009a1c:	4683      	mov	fp, r0
 8009a1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009a24:	b97f      	cbnz	r7, 8009a46 <_dtoa_r+0x36>
 8009a26:	2010      	movs	r0, #16
 8009a28:	f000 fe02 	bl	800a630 <malloc>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a32:	b920      	cbnz	r0, 8009a3e <_dtoa_r+0x2e>
 8009a34:	21ef      	movs	r1, #239	@ 0xef
 8009a36:	4ba8      	ldr	r3, [pc, #672]	@ (8009cd8 <_dtoa_r+0x2c8>)
 8009a38:	48a8      	ldr	r0, [pc, #672]	@ (8009cdc <_dtoa_r+0x2cc>)
 8009a3a:	f001 fc67 	bl	800b30c <__assert_func>
 8009a3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a42:	6007      	str	r7, [r0, #0]
 8009a44:	60c7      	str	r7, [r0, #12]
 8009a46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a4a:	6819      	ldr	r1, [r3, #0]
 8009a4c:	b159      	cbz	r1, 8009a66 <_dtoa_r+0x56>
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	2301      	movs	r3, #1
 8009a52:	4093      	lsls	r3, r2
 8009a54:	604a      	str	r2, [r1, #4]
 8009a56:	608b      	str	r3, [r1, #8]
 8009a58:	4658      	mov	r0, fp
 8009a5a:	f000 fedf 	bl	800a81c <_Bfree>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	1e2b      	subs	r3, r5, #0
 8009a68:	bfaf      	iteee	ge
 8009a6a:	2300      	movge	r3, #0
 8009a6c:	2201      	movlt	r2, #1
 8009a6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a72:	9303      	strlt	r3, [sp, #12]
 8009a74:	bfa8      	it	ge
 8009a76:	6033      	strge	r3, [r6, #0]
 8009a78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a7c:	4b98      	ldr	r3, [pc, #608]	@ (8009ce0 <_dtoa_r+0x2d0>)
 8009a7e:	bfb8      	it	lt
 8009a80:	6032      	strlt	r2, [r6, #0]
 8009a82:	ea33 0308 	bics.w	r3, r3, r8
 8009a86:	d112      	bne.n	8009aae <_dtoa_r+0x9e>
 8009a88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a94:	4323      	orrs	r3, r4
 8009a96:	f000 8550 	beq.w	800a53a <_dtoa_r+0xb2a>
 8009a9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009ce4 <_dtoa_r+0x2d4>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 8552 	beq.w	800a54a <_dtoa_r+0xb3a>
 8009aa6:	f10a 0303 	add.w	r3, sl, #3
 8009aaa:	f000 bd4c 	b.w	800a546 <_dtoa_r+0xb36>
 8009aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	f7f6 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	b158      	cbz	r0, 8009ade <_dtoa_r+0xce>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ace:	b113      	cbz	r3, 8009ad6 <_dtoa_r+0xc6>
 8009ad0:	4b85      	ldr	r3, [pc, #532]	@ (8009ce8 <_dtoa_r+0x2d8>)
 8009ad2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009cec <_dtoa_r+0x2dc>
 8009ada:	f000 bd36 	b.w	800a54a <_dtoa_r+0xb3a>
 8009ade:	ab14      	add	r3, sp, #80	@ 0x50
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	ab15      	add	r3, sp, #84	@ 0x54
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009aec:	f001 f97e 	bl	800adec <__d2b>
 8009af0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009af4:	4681      	mov	r9, r0
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d077      	beq.n	8009bea <_dtoa_r+0x1da>
 8009afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b10:	9712      	str	r7, [sp, #72]	@ 0x48
 8009b12:	4619      	mov	r1, r3
 8009b14:	2200      	movs	r2, #0
 8009b16:	4b76      	ldr	r3, [pc, #472]	@ (8009cf0 <_dtoa_r+0x2e0>)
 8009b18:	f7f6 fb26 	bl	8000168 <__aeabi_dsub>
 8009b1c:	a368      	add	r3, pc, #416	@ (adr r3, 8009cc0 <_dtoa_r+0x2b0>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fcd9 	bl	80004d8 <__aeabi_dmul>
 8009b26:	a368      	add	r3, pc, #416	@ (adr r3, 8009cc8 <_dtoa_r+0x2b8>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 fb1e 	bl	800016c <__adddf3>
 8009b30:	4604      	mov	r4, r0
 8009b32:	4630      	mov	r0, r6
 8009b34:	460d      	mov	r5, r1
 8009b36:	f7f6 fc65 	bl	8000404 <__aeabi_i2d>
 8009b3a:	a365      	add	r3, pc, #404	@ (adr r3, 8009cd0 <_dtoa_r+0x2c0>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fcca 	bl	80004d8 <__aeabi_dmul>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fb0e 	bl	800016c <__adddf3>
 8009b50:	4604      	mov	r4, r0
 8009b52:	460d      	mov	r5, r1
 8009b54:	f7f6 ff70 	bl	8000a38 <__aeabi_d2iz>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 ff2b 	bl	80009bc <__aeabi_dcmplt>
 8009b66:	b140      	cbz	r0, 8009b7a <_dtoa_r+0x16a>
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f7f6 fc4b 	bl	8000404 <__aeabi_i2d>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	f7f6 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8009b76:	b900      	cbnz	r0, 8009b7a <_dtoa_r+0x16a>
 8009b78:	3f01      	subs	r7, #1
 8009b7a:	2f16      	cmp	r7, #22
 8009b7c:	d853      	bhi.n	8009c26 <_dtoa_r+0x216>
 8009b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b82:	4b5c      	ldr	r3, [pc, #368]	@ (8009cf4 <_dtoa_r+0x2e4>)
 8009b84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f7f6 ff16 	bl	80009bc <__aeabi_dcmplt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d04a      	beq.n	8009c2a <_dtoa_r+0x21a>
 8009b94:	2300      	movs	r3, #0
 8009b96:	3f01      	subs	r7, #1
 8009b98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b9c:	1b9b      	subs	r3, r3, r6
 8009b9e:	1e5a      	subs	r2, r3, #1
 8009ba0:	bf46      	itte	mi
 8009ba2:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ba6:	2300      	movmi	r3, #0
 8009ba8:	f04f 0800 	movpl.w	r8, #0
 8009bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bae:	bf48      	it	mi
 8009bb0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009bb2:	2f00      	cmp	r7, #0
 8009bb4:	db3b      	blt.n	8009c2e <_dtoa_r+0x21e>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	970e      	str	r7, [sp, #56]	@ 0x38
 8009bba:	443b      	add	r3, r7
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bc4:	2b09      	cmp	r3, #9
 8009bc6:	d866      	bhi.n	8009c96 <_dtoa_r+0x286>
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	bfc4      	itt	gt
 8009bcc:	3b04      	subgt	r3, #4
 8009bce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009bd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bd2:	bfc8      	it	gt
 8009bd4:	2400      	movgt	r4, #0
 8009bd6:	f1a3 0302 	sub.w	r3, r3, #2
 8009bda:	bfd8      	it	le
 8009bdc:	2401      	movle	r4, #1
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d864      	bhi.n	8009cac <_dtoa_r+0x29c>
 8009be2:	e8df f003 	tbb	[pc, r3]
 8009be6:	382b      	.short	0x382b
 8009be8:	5636      	.short	0x5636
 8009bea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009bee:	441e      	add	r6, r3
 8009bf0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	bfc1      	itttt	gt
 8009bf8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009c04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c08:	bfd6      	itet	le
 8009c0a:	f1c3 0320 	rsble	r3, r3, #32
 8009c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c12:	fa04 f003 	lslle.w	r0, r4, r3
 8009c16:	f7f6 fbe5 	bl	80003e4 <__aeabi_ui2d>
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c20:	3e01      	subs	r6, #1
 8009c22:	9212      	str	r2, [sp, #72]	@ 0x48
 8009c24:	e775      	b.n	8009b12 <_dtoa_r+0x102>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e7b6      	b.n	8009b98 <_dtoa_r+0x188>
 8009c2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009c2c:	e7b5      	b.n	8009b9a <_dtoa_r+0x18a>
 8009c2e:	427b      	negs	r3, r7
 8009c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c32:	2300      	movs	r3, #0
 8009c34:	eba8 0807 	sub.w	r8, r8, r7
 8009c38:	930e      	str	r3, [sp, #56]	@ 0x38
 8009c3a:	e7c2      	b.n	8009bc2 <_dtoa_r+0x1b2>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dc35      	bgt.n	8009cb2 <_dtoa_r+0x2a2>
 8009c46:	2301      	movs	r3, #1
 8009c48:	461a      	mov	r2, r3
 8009c4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009c4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8009c50:	e00b      	b.n	8009c6a <_dtoa_r+0x25a>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e7f3      	b.n	8009c3e <_dtoa_r+0x22e>
 8009c56:	2300      	movs	r3, #0
 8009c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c5c:	18fb      	adds	r3, r7, r3
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	3301      	adds	r3, #1
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	9307      	str	r3, [sp, #28]
 8009c66:	bfb8      	it	lt
 8009c68:	2301      	movlt	r3, #1
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c72:	f102 0514 	add.w	r5, r2, #20
 8009c76:	429d      	cmp	r5, r3
 8009c78:	d91f      	bls.n	8009cba <_dtoa_r+0x2aa>
 8009c7a:	6041      	str	r1, [r0, #4]
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f000 fd8d 	bl	800a79c <_Balloc>
 8009c82:	4682      	mov	sl, r0
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d139      	bne.n	8009cfc <_dtoa_r+0x2ec>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf8 <_dtoa_r+0x2e8>)
 8009c90:	e6d2      	b.n	8009a38 <_dtoa_r+0x28>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7e0      	b.n	8009c58 <_dtoa_r+0x248>
 8009c96:	2401      	movs	r4, #1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ca8:	2312      	movs	r3, #18
 8009caa:	e7d0      	b.n	8009c4e <_dtoa_r+0x23e>
 8009cac:	2301      	movs	r3, #1
 8009cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cb0:	e7f5      	b.n	8009c9e <_dtoa_r+0x28e>
 8009cb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009cb8:	e7d7      	b.n	8009c6a <_dtoa_r+0x25a>
 8009cba:	3101      	adds	r1, #1
 8009cbc:	0052      	lsls	r2, r2, #1
 8009cbe:	e7d8      	b.n	8009c72 <_dtoa_r+0x262>
 8009cc0:	636f4361 	.word	0x636f4361
 8009cc4:	3fd287a7 	.word	0x3fd287a7
 8009cc8:	8b60c8b3 	.word	0x8b60c8b3
 8009ccc:	3fc68a28 	.word	0x3fc68a28
 8009cd0:	509f79fb 	.word	0x509f79fb
 8009cd4:	3fd34413 	.word	0x3fd34413
 8009cd8:	0800c0a0 	.word	0x0800c0a0
 8009cdc:	0800c0b7 	.word	0x0800c0b7
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	0800c09c 	.word	0x0800c09c
 8009ce8:	0800c070 	.word	0x0800c070
 8009cec:	0800c06f 	.word	0x0800c06f
 8009cf0:	3ff80000 	.word	0x3ff80000
 8009cf4:	0800c1b0 	.word	0x0800c1b0
 8009cf8:	0800c10f 	.word	0x0800c10f
 8009cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d00:	6018      	str	r0, [r3, #0]
 8009d02:	9b07      	ldr	r3, [sp, #28]
 8009d04:	2b0e      	cmp	r3, #14
 8009d06:	f200 80a4 	bhi.w	8009e52 <_dtoa_r+0x442>
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	f000 80a1 	beq.w	8009e52 <_dtoa_r+0x442>
 8009d10:	2f00      	cmp	r7, #0
 8009d12:	dd33      	ble.n	8009d7c <_dtoa_r+0x36c>
 8009d14:	4b86      	ldr	r3, [pc, #536]	@ (8009f30 <_dtoa_r+0x520>)
 8009d16:	f007 020f 	and.w	r2, r7, #15
 8009d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1e:	05f8      	lsls	r0, r7, #23
 8009d20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d2c:	d516      	bpl.n	8009d5c <_dtoa_r+0x34c>
 8009d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d32:	4b80      	ldr	r3, [pc, #512]	@ (8009f34 <_dtoa_r+0x524>)
 8009d34:	2603      	movs	r6, #3
 8009d36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d3a:	f7f6 fcf7 	bl	800072c <__aeabi_ddiv>
 8009d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d42:	f004 040f 	and.w	r4, r4, #15
 8009d46:	4d7b      	ldr	r5, [pc, #492]	@ (8009f34 <_dtoa_r+0x524>)
 8009d48:	b954      	cbnz	r4, 8009d60 <_dtoa_r+0x350>
 8009d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d52:	f7f6 fceb 	bl	800072c <__aeabi_ddiv>
 8009d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d5a:	e028      	b.n	8009dae <_dtoa_r+0x39e>
 8009d5c:	2602      	movs	r6, #2
 8009d5e:	e7f2      	b.n	8009d46 <_dtoa_r+0x336>
 8009d60:	07e1      	lsls	r1, r4, #31
 8009d62:	d508      	bpl.n	8009d76 <_dtoa_r+0x366>
 8009d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d6c:	f7f6 fbb4 	bl	80004d8 <__aeabi_dmul>
 8009d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d74:	3601      	adds	r6, #1
 8009d76:	1064      	asrs	r4, r4, #1
 8009d78:	3508      	adds	r5, #8
 8009d7a:	e7e5      	b.n	8009d48 <_dtoa_r+0x338>
 8009d7c:	f000 80d2 	beq.w	8009f24 <_dtoa_r+0x514>
 8009d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d84:	427c      	negs	r4, r7
 8009d86:	4b6a      	ldr	r3, [pc, #424]	@ (8009f30 <_dtoa_r+0x520>)
 8009d88:	f004 020f 	and.w	r2, r4, #15
 8009d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f7f6 fba0 	bl	80004d8 <__aeabi_dmul>
 8009d98:	2602      	movs	r6, #2
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da0:	4d64      	ldr	r5, [pc, #400]	@ (8009f34 <_dtoa_r+0x524>)
 8009da2:	1124      	asrs	r4, r4, #4
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	f040 80b2 	bne.w	8009f0e <_dtoa_r+0x4fe>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1d3      	bne.n	8009d56 <_dtoa_r+0x346>
 8009dae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80b7 	beq.w	8009f28 <_dtoa_r+0x518>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8009f38 <_dtoa_r+0x528>)
 8009dc2:	f7f6 fdfb 	bl	80009bc <__aeabi_dcmplt>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f000 80ae 	beq.w	8009f28 <_dtoa_r+0x518>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80aa 	beq.w	8009f28 <_dtoa_r+0x518>
 8009dd4:	9b08      	ldr	r3, [sp, #32]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dd37      	ble.n	8009e4a <_dtoa_r+0x43a>
 8009dda:	1e7b      	subs	r3, r7, #1
 8009ddc:	4620      	mov	r0, r4
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	2200      	movs	r2, #0
 8009de2:	4629      	mov	r1, r5
 8009de4:	4b55      	ldr	r3, [pc, #340]	@ (8009f3c <_dtoa_r+0x52c>)
 8009de6:	f7f6 fb77 	bl	80004d8 <__aeabi_dmul>
 8009dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dee:	9c08      	ldr	r4, [sp, #32]
 8009df0:	3601      	adds	r6, #1
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7f6 fb06 	bl	8000404 <__aeabi_i2d>
 8009df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dfc:	f7f6 fb6c 	bl	80004d8 <__aeabi_dmul>
 8009e00:	2200      	movs	r2, #0
 8009e02:	4b4f      	ldr	r3, [pc, #316]	@ (8009f40 <_dtoa_r+0x530>)
 8009e04:	f7f6 f9b2 	bl	800016c <__adddf3>
 8009e08:	4605      	mov	r5, r0
 8009e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e0e:	2c00      	cmp	r4, #0
 8009e10:	f040 809a 	bne.w	8009f48 <_dtoa_r+0x538>
 8009e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8009f44 <_dtoa_r+0x534>)
 8009e1c:	f7f6 f9a4 	bl	8000168 <__aeabi_dsub>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4633      	mov	r3, r6
 8009e2c:	f7f6 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f040 828e 	bne.w	800a352 <_dtoa_r+0x942>
 8009e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e40:	f7f6 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f040 8127 	bne.w	800a098 <_dtoa_r+0x688>
 8009e4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f2c0 8163 	blt.w	800a120 <_dtoa_r+0x710>
 8009e5a:	2f0e      	cmp	r7, #14
 8009e5c:	f300 8160 	bgt.w	800a120 <_dtoa_r+0x710>
 8009e60:	4b33      	ldr	r3, [pc, #204]	@ (8009f30 <_dtoa_r+0x520>)
 8009e62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009e6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	da03      	bge.n	8009e7c <_dtoa_r+0x46c>
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f340 8100 	ble.w	800a07c <_dtoa_r+0x66c>
 8009e7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e80:	4656      	mov	r6, sl
 8009e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 fc4f 	bl	800072c <__aeabi_ddiv>
 8009e8e:	f7f6 fdd3 	bl	8000a38 <__aeabi_d2iz>
 8009e92:	4680      	mov	r8, r0
 8009e94:	f7f6 fab6 	bl	8000404 <__aeabi_i2d>
 8009e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e9c:	f7f6 fb1c 	bl	80004d8 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 f95e 	bl	8000168 <__aeabi_dsub>
 8009eac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009eb0:	9d07      	ldr	r5, [sp, #28]
 8009eb2:	f806 4b01 	strb.w	r4, [r6], #1
 8009eb6:	eba6 040a 	sub.w	r4, r6, sl
 8009eba:	42a5      	cmp	r5, r4
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	f040 8116 	bne.w	800a0f0 <_dtoa_r+0x6e0>
 8009ec4:	f7f6 f952 	bl	800016c <__adddf3>
 8009ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ecc:	4604      	mov	r4, r0
 8009ece:	460d      	mov	r5, r1
 8009ed0:	f7f6 fd92 	bl	80009f8 <__aeabi_dcmpgt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f040 80f8 	bne.w	800a0ca <_dtoa_r+0x6ba>
 8009eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8009ee6:	b118      	cbz	r0, 8009ef0 <_dtoa_r+0x4e0>
 8009ee8:	f018 0f01 	tst.w	r8, #1
 8009eec:	f040 80ed 	bne.w	800a0ca <_dtoa_r+0x6ba>
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4658      	mov	r0, fp
 8009ef4:	f000 fc92 	bl	800a81c <_Bfree>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	7033      	strb	r3, [r6, #0]
 8009efc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009efe:	3701      	adds	r7, #1
 8009f00:	601f      	str	r7, [r3, #0]
 8009f02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8320 	beq.w	800a54a <_dtoa_r+0xb3a>
 8009f0a:	601e      	str	r6, [r3, #0]
 8009f0c:	e31d      	b.n	800a54a <_dtoa_r+0xb3a>
 8009f0e:	07e2      	lsls	r2, r4, #31
 8009f10:	d505      	bpl.n	8009f1e <_dtoa_r+0x50e>
 8009f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f16:	f7f6 fadf 	bl	80004d8 <__aeabi_dmul>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	1064      	asrs	r4, r4, #1
 8009f20:	3508      	adds	r5, #8
 8009f22:	e73f      	b.n	8009da4 <_dtoa_r+0x394>
 8009f24:	2602      	movs	r6, #2
 8009f26:	e742      	b.n	8009dae <_dtoa_r+0x39e>
 8009f28:	9c07      	ldr	r4, [sp, #28]
 8009f2a:	9704      	str	r7, [sp, #16]
 8009f2c:	e761      	b.n	8009df2 <_dtoa_r+0x3e2>
 8009f2e:	bf00      	nop
 8009f30:	0800c1b0 	.word	0x0800c1b0
 8009f34:	0800c188 	.word	0x0800c188
 8009f38:	3ff00000 	.word	0x3ff00000
 8009f3c:	40240000 	.word	0x40240000
 8009f40:	401c0000 	.word	0x401c0000
 8009f44:	40140000 	.word	0x40140000
 8009f48:	4b70      	ldr	r3, [pc, #448]	@ (800a10c <_dtoa_r+0x6fc>)
 8009f4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f54:	4454      	add	r4, sl
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d045      	beq.n	8009fe6 <_dtoa_r+0x5d6>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	496c      	ldr	r1, [pc, #432]	@ (800a110 <_dtoa_r+0x700>)
 8009f5e:	f7f6 fbe5 	bl	800072c <__aeabi_ddiv>
 8009f62:	4633      	mov	r3, r6
 8009f64:	462a      	mov	r2, r5
 8009f66:	f7f6 f8ff 	bl	8000168 <__aeabi_dsub>
 8009f6a:	4656      	mov	r6, sl
 8009f6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f74:	f7f6 fd60 	bl	8000a38 <__aeabi_d2iz>
 8009f78:	4605      	mov	r5, r0
 8009f7a:	f7f6 fa43 	bl	8000404 <__aeabi_i2d>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f86:	f7f6 f8ef 	bl	8000168 <__aeabi_dsub>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	3530      	adds	r5, #48	@ 0x30
 8009f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f98:	f806 5b01 	strb.w	r5, [r6], #1
 8009f9c:	f7f6 fd0e 	bl	80009bc <__aeabi_dcmplt>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d163      	bne.n	800a06c <_dtoa_r+0x65c>
 8009fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fa8:	2000      	movs	r0, #0
 8009faa:	495a      	ldr	r1, [pc, #360]	@ (800a114 <_dtoa_r+0x704>)
 8009fac:	f7f6 f8dc 	bl	8000168 <__aeabi_dsub>
 8009fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fb4:	f7f6 fd02 	bl	80009bc <__aeabi_dcmplt>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	f040 8087 	bne.w	800a0cc <_dtoa_r+0x6bc>
 8009fbe:	42a6      	cmp	r6, r4
 8009fc0:	f43f af43 	beq.w	8009e4a <_dtoa_r+0x43a>
 8009fc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4b53      	ldr	r3, [pc, #332]	@ (800a118 <_dtoa_r+0x708>)
 8009fcc:	f7f6 fa84 	bl	80004d8 <__aeabi_dmul>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fda:	4b4f      	ldr	r3, [pc, #316]	@ (800a118 <_dtoa_r+0x708>)
 8009fdc:	f7f6 fa7c 	bl	80004d8 <__aeabi_dmul>
 8009fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe4:	e7c4      	b.n	8009f70 <_dtoa_r+0x560>
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7f6 fa75 	bl	80004d8 <__aeabi_dmul>
 8009fee:	4656      	mov	r6, sl
 8009ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ff4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffa:	f7f6 fd1d 	bl	8000a38 <__aeabi_d2iz>
 8009ffe:	4605      	mov	r5, r0
 800a000:	f7f6 fa00 	bl	8000404 <__aeabi_i2d>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00c:	f7f6 f8ac 	bl	8000168 <__aeabi_dsub>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	3530      	adds	r5, #48	@ 0x30
 800a016:	f806 5b01 	strb.w	r5, [r6], #1
 800a01a:	42a6      	cmp	r6, r4
 800a01c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	d124      	bne.n	800a070 <_dtoa_r+0x660>
 800a026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a02a:	4b39      	ldr	r3, [pc, #228]	@ (800a110 <_dtoa_r+0x700>)
 800a02c:	f7f6 f89e 	bl	800016c <__adddf3>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a038:	f7f6 fcde 	bl	80009f8 <__aeabi_dcmpgt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d145      	bne.n	800a0cc <_dtoa_r+0x6bc>
 800a040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a044:	2000      	movs	r0, #0
 800a046:	4932      	ldr	r1, [pc, #200]	@ (800a110 <_dtoa_r+0x700>)
 800a048:	f7f6 f88e 	bl	8000168 <__aeabi_dsub>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a054:	f7f6 fcb2 	bl	80009bc <__aeabi_dcmplt>
 800a058:	2800      	cmp	r0, #0
 800a05a:	f43f aef6 	beq.w	8009e4a <_dtoa_r+0x43a>
 800a05e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a060:	1e73      	subs	r3, r6, #1
 800a062:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a064:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a068:	2b30      	cmp	r3, #48	@ 0x30
 800a06a:	d0f8      	beq.n	800a05e <_dtoa_r+0x64e>
 800a06c:	9f04      	ldr	r7, [sp, #16]
 800a06e:	e73f      	b.n	8009ef0 <_dtoa_r+0x4e0>
 800a070:	4b29      	ldr	r3, [pc, #164]	@ (800a118 <_dtoa_r+0x708>)
 800a072:	f7f6 fa31 	bl	80004d8 <__aeabi_dmul>
 800a076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07a:	e7bc      	b.n	8009ff6 <_dtoa_r+0x5e6>
 800a07c:	d10c      	bne.n	800a098 <_dtoa_r+0x688>
 800a07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a082:	2200      	movs	r2, #0
 800a084:	4b25      	ldr	r3, [pc, #148]	@ (800a11c <_dtoa_r+0x70c>)
 800a086:	f7f6 fa27 	bl	80004d8 <__aeabi_dmul>
 800a08a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a08e:	f7f6 fca9 	bl	80009e4 <__aeabi_dcmpge>
 800a092:	2800      	cmp	r0, #0
 800a094:	f000 815b 	beq.w	800a34e <_dtoa_r+0x93e>
 800a098:	2400      	movs	r4, #0
 800a09a:	4625      	mov	r5, r4
 800a09c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a09e:	4656      	mov	r6, sl
 800a0a0:	43db      	mvns	r3, r3
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4658      	mov	r0, fp
 800a0aa:	f000 fbb7 	bl	800a81c <_Bfree>
 800a0ae:	2d00      	cmp	r5, #0
 800a0b0:	d0dc      	beq.n	800a06c <_dtoa_r+0x65c>
 800a0b2:	b12f      	cbz	r7, 800a0c0 <_dtoa_r+0x6b0>
 800a0b4:	42af      	cmp	r7, r5
 800a0b6:	d003      	beq.n	800a0c0 <_dtoa_r+0x6b0>
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4658      	mov	r0, fp
 800a0bc:	f000 fbae 	bl	800a81c <_Bfree>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	4658      	mov	r0, fp
 800a0c4:	f000 fbaa 	bl	800a81c <_Bfree>
 800a0c8:	e7d0      	b.n	800a06c <_dtoa_r+0x65c>
 800a0ca:	9704      	str	r7, [sp, #16]
 800a0cc:	4633      	mov	r3, r6
 800a0ce:	461e      	mov	r6, r3
 800a0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0d4:	2a39      	cmp	r2, #57	@ 0x39
 800a0d6:	d107      	bne.n	800a0e8 <_dtoa_r+0x6d8>
 800a0d8:	459a      	cmp	sl, r3
 800a0da:	d1f8      	bne.n	800a0ce <_dtoa_r+0x6be>
 800a0dc:	9a04      	ldr	r2, [sp, #16]
 800a0de:	3201      	adds	r2, #1
 800a0e0:	9204      	str	r2, [sp, #16]
 800a0e2:	2230      	movs	r2, #48	@ 0x30
 800a0e4:	f88a 2000 	strb.w	r2, [sl]
 800a0e8:	781a      	ldrb	r2, [r3, #0]
 800a0ea:	3201      	adds	r2, #1
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	e7bd      	b.n	800a06c <_dtoa_r+0x65c>
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4b09      	ldr	r3, [pc, #36]	@ (800a118 <_dtoa_r+0x708>)
 800a0f4:	f7f6 f9f0 	bl	80004d8 <__aeabi_dmul>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	460d      	mov	r5, r1
 800a100:	f7f6 fc52 	bl	80009a8 <__aeabi_dcmpeq>
 800a104:	2800      	cmp	r0, #0
 800a106:	f43f aebc 	beq.w	8009e82 <_dtoa_r+0x472>
 800a10a:	e6f1      	b.n	8009ef0 <_dtoa_r+0x4e0>
 800a10c:	0800c1b0 	.word	0x0800c1b0
 800a110:	3fe00000 	.word	0x3fe00000
 800a114:	3ff00000 	.word	0x3ff00000
 800a118:	40240000 	.word	0x40240000
 800a11c:	40140000 	.word	0x40140000
 800a120:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a122:	2a00      	cmp	r2, #0
 800a124:	f000 80db 	beq.w	800a2de <_dtoa_r+0x8ce>
 800a128:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a12a:	2a01      	cmp	r2, #1
 800a12c:	f300 80bf 	bgt.w	800a2ae <_dtoa_r+0x89e>
 800a130:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a132:	2a00      	cmp	r2, #0
 800a134:	f000 80b7 	beq.w	800a2a6 <_dtoa_r+0x896>
 800a138:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a13c:	4646      	mov	r6, r8
 800a13e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a142:	2101      	movs	r1, #1
 800a144:	441a      	add	r2, r3
 800a146:	4658      	mov	r0, fp
 800a148:	4498      	add	r8, r3
 800a14a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a14c:	f000 fc1a 	bl	800a984 <__i2b>
 800a150:	4605      	mov	r5, r0
 800a152:	b15e      	cbz	r6, 800a16c <_dtoa_r+0x75c>
 800a154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	dd08      	ble.n	800a16c <_dtoa_r+0x75c>
 800a15a:	42b3      	cmp	r3, r6
 800a15c:	bfa8      	it	ge
 800a15e:	4633      	movge	r3, r6
 800a160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a162:	eba8 0803 	sub.w	r8, r8, r3
 800a166:	1af6      	subs	r6, r6, r3
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16e:	b1f3      	cbz	r3, 800a1ae <_dtoa_r+0x79e>
 800a170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80b7 	beq.w	800a2e6 <_dtoa_r+0x8d6>
 800a178:	b18c      	cbz	r4, 800a19e <_dtoa_r+0x78e>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4622      	mov	r2, r4
 800a17e:	4658      	mov	r0, fp
 800a180:	f000 fcbe 	bl	800ab00 <__pow5mult>
 800a184:	464a      	mov	r2, r9
 800a186:	4601      	mov	r1, r0
 800a188:	4605      	mov	r5, r0
 800a18a:	4658      	mov	r0, fp
 800a18c:	f000 fc10 	bl	800a9b0 <__multiply>
 800a190:	4649      	mov	r1, r9
 800a192:	9004      	str	r0, [sp, #16]
 800a194:	4658      	mov	r0, fp
 800a196:	f000 fb41 	bl	800a81c <_Bfree>
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	4699      	mov	r9, r3
 800a19e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1a0:	1b1a      	subs	r2, r3, r4
 800a1a2:	d004      	beq.n	800a1ae <_dtoa_r+0x79e>
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f000 fcaa 	bl	800ab00 <__pow5mult>
 800a1ac:	4681      	mov	r9, r0
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4658      	mov	r0, fp
 800a1b2:	f000 fbe7 	bl	800a984 <__i2b>
 800a1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 81c9 	beq.w	800a552 <_dtoa_r+0xb42>
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	4658      	mov	r0, fp
 800a1c6:	f000 fc9b 	bl	800ab00 <__pow5mult>
 800a1ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	f300 808f 	bgt.w	800a2f2 <_dtoa_r+0x8e2>
 800a1d4:	9b02      	ldr	r3, [sp, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 8087 	bne.w	800a2ea <_dtoa_r+0x8da>
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f040 8083 	bne.w	800a2ee <_dtoa_r+0x8de>
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1ee:	0d1b      	lsrs	r3, r3, #20
 800a1f0:	051b      	lsls	r3, r3, #20
 800a1f2:	b12b      	cbz	r3, 800a200 <_dtoa_r+0x7f0>
 800a1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f6:	f108 0801 	add.w	r8, r8, #1
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1fe:	2301      	movs	r3, #1
 800a200:	930a      	str	r3, [sp, #40]	@ 0x28
 800a202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 81aa 	beq.w	800a55e <_dtoa_r+0xb4e>
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a210:	6918      	ldr	r0, [r3, #16]
 800a212:	f000 fb6b 	bl	800a8ec <__hi0bits>
 800a216:	f1c0 0020 	rsb	r0, r0, #32
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	4418      	add	r0, r3
 800a21e:	f010 001f 	ands.w	r0, r0, #31
 800a222:	d071      	beq.n	800a308 <_dtoa_r+0x8f8>
 800a224:	f1c0 0320 	rsb	r3, r0, #32
 800a228:	2b04      	cmp	r3, #4
 800a22a:	dd65      	ble.n	800a2f8 <_dtoa_r+0x8e8>
 800a22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a22e:	f1c0 001c 	rsb	r0, r0, #28
 800a232:	4403      	add	r3, r0
 800a234:	4480      	add	r8, r0
 800a236:	4406      	add	r6, r0
 800a238:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23a:	f1b8 0f00 	cmp.w	r8, #0
 800a23e:	dd05      	ble.n	800a24c <_dtoa_r+0x83c>
 800a240:	4649      	mov	r1, r9
 800a242:	4642      	mov	r2, r8
 800a244:	4658      	mov	r0, fp
 800a246:	f000 fcb5 	bl	800abb4 <__lshift>
 800a24a:	4681      	mov	r9, r0
 800a24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dd05      	ble.n	800a25e <_dtoa_r+0x84e>
 800a252:	4621      	mov	r1, r4
 800a254:	461a      	mov	r2, r3
 800a256:	4658      	mov	r0, fp
 800a258:	f000 fcac 	bl	800abb4 <__lshift>
 800a25c:	4604      	mov	r4, r0
 800a25e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d053      	beq.n	800a30c <_dtoa_r+0x8fc>
 800a264:	4621      	mov	r1, r4
 800a266:	4648      	mov	r0, r9
 800a268:	f000 fd10 	bl	800ac8c <__mcmp>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	da4d      	bge.n	800a30c <_dtoa_r+0x8fc>
 800a270:	1e7b      	subs	r3, r7, #1
 800a272:	4649      	mov	r1, r9
 800a274:	9304      	str	r3, [sp, #16]
 800a276:	220a      	movs	r2, #10
 800a278:	2300      	movs	r3, #0
 800a27a:	4658      	mov	r0, fp
 800a27c:	f000 faf0 	bl	800a860 <__multadd>
 800a280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a282:	4681      	mov	r9, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 816c 	beq.w	800a562 <_dtoa_r+0xb52>
 800a28a:	2300      	movs	r3, #0
 800a28c:	4629      	mov	r1, r5
 800a28e:	220a      	movs	r2, #10
 800a290:	4658      	mov	r0, fp
 800a292:	f000 fae5 	bl	800a860 <__multadd>
 800a296:	9b08      	ldr	r3, [sp, #32]
 800a298:	4605      	mov	r5, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dc61      	bgt.n	800a362 <_dtoa_r+0x952>
 800a29e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	dc3b      	bgt.n	800a31c <_dtoa_r+0x90c>
 800a2a4:	e05d      	b.n	800a362 <_dtoa_r+0x952>
 800a2a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a2a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a2ac:	e746      	b.n	800a13c <_dtoa_r+0x72c>
 800a2ae:	9b07      	ldr	r3, [sp, #28]
 800a2b0:	1e5c      	subs	r4, r3, #1
 800a2b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	bfbf      	itttt	lt
 800a2b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a2bc:	1ae3      	sublt	r3, r4, r3
 800a2be:	18d2      	addlt	r2, r2, r3
 800a2c0:	bfa8      	it	ge
 800a2c2:	1b1c      	subge	r4, r3, r4
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	bfbe      	ittt	lt
 800a2c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a2cc:	2400      	movlt	r4, #0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bfb5      	itete	lt
 800a2d2:	eba8 0603 	sublt.w	r6, r8, r3
 800a2d6:	4646      	movge	r6, r8
 800a2d8:	2300      	movlt	r3, #0
 800a2da:	9b07      	ldrge	r3, [sp, #28]
 800a2dc:	e730      	b.n	800a140 <_dtoa_r+0x730>
 800a2de:	4646      	mov	r6, r8
 800a2e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2e4:	e735      	b.n	800a152 <_dtoa_r+0x742>
 800a2e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2e8:	e75c      	b.n	800a1a4 <_dtoa_r+0x794>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e788      	b.n	800a200 <_dtoa_r+0x7f0>
 800a2ee:	9b02      	ldr	r3, [sp, #8]
 800a2f0:	e786      	b.n	800a200 <_dtoa_r+0x7f0>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f6:	e788      	b.n	800a20a <_dtoa_r+0x7fa>
 800a2f8:	d09f      	beq.n	800a23a <_dtoa_r+0x82a>
 800a2fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2fc:	331c      	adds	r3, #28
 800a2fe:	441a      	add	r2, r3
 800a300:	4498      	add	r8, r3
 800a302:	441e      	add	r6, r3
 800a304:	9209      	str	r2, [sp, #36]	@ 0x24
 800a306:	e798      	b.n	800a23a <_dtoa_r+0x82a>
 800a308:	4603      	mov	r3, r0
 800a30a:	e7f6      	b.n	800a2fa <_dtoa_r+0x8ea>
 800a30c:	9b07      	ldr	r3, [sp, #28]
 800a30e:	9704      	str	r7, [sp, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc20      	bgt.n	800a356 <_dtoa_r+0x946>
 800a314:	9308      	str	r3, [sp, #32]
 800a316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a318:	2b02      	cmp	r3, #2
 800a31a:	dd1e      	ble.n	800a35a <_dtoa_r+0x94a>
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f47f aebc 	bne.w	800a09c <_dtoa_r+0x68c>
 800a324:	4621      	mov	r1, r4
 800a326:	2205      	movs	r2, #5
 800a328:	4658      	mov	r0, fp
 800a32a:	f000 fa99 	bl	800a860 <__multadd>
 800a32e:	4601      	mov	r1, r0
 800a330:	4604      	mov	r4, r0
 800a332:	4648      	mov	r0, r9
 800a334:	f000 fcaa 	bl	800ac8c <__mcmp>
 800a338:	2800      	cmp	r0, #0
 800a33a:	f77f aeaf 	ble.w	800a09c <_dtoa_r+0x68c>
 800a33e:	2331      	movs	r3, #49	@ 0x31
 800a340:	4656      	mov	r6, sl
 800a342:	f806 3b01 	strb.w	r3, [r6], #1
 800a346:	9b04      	ldr	r3, [sp, #16]
 800a348:	3301      	adds	r3, #1
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	e6aa      	b.n	800a0a4 <_dtoa_r+0x694>
 800a34e:	9c07      	ldr	r4, [sp, #28]
 800a350:	9704      	str	r7, [sp, #16]
 800a352:	4625      	mov	r5, r4
 800a354:	e7f3      	b.n	800a33e <_dtoa_r+0x92e>
 800a356:	9b07      	ldr	r3, [sp, #28]
 800a358:	9308      	str	r3, [sp, #32]
 800a35a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8104 	beq.w	800a56a <_dtoa_r+0xb5a>
 800a362:	2e00      	cmp	r6, #0
 800a364:	dd05      	ble.n	800a372 <_dtoa_r+0x962>
 800a366:	4629      	mov	r1, r5
 800a368:	4632      	mov	r2, r6
 800a36a:	4658      	mov	r0, fp
 800a36c:	f000 fc22 	bl	800abb4 <__lshift>
 800a370:	4605      	mov	r5, r0
 800a372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a374:	2b00      	cmp	r3, #0
 800a376:	d05a      	beq.n	800a42e <_dtoa_r+0xa1e>
 800a378:	4658      	mov	r0, fp
 800a37a:	6869      	ldr	r1, [r5, #4]
 800a37c:	f000 fa0e 	bl	800a79c <_Balloc>
 800a380:	4606      	mov	r6, r0
 800a382:	b928      	cbnz	r0, 800a390 <_dtoa_r+0x980>
 800a384:	4602      	mov	r2, r0
 800a386:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a38a:	4b83      	ldr	r3, [pc, #524]	@ (800a598 <_dtoa_r+0xb88>)
 800a38c:	f7ff bb54 	b.w	8009a38 <_dtoa_r+0x28>
 800a390:	692a      	ldr	r2, [r5, #16]
 800a392:	f105 010c 	add.w	r1, r5, #12
 800a396:	3202      	adds	r2, #2
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	300c      	adds	r0, #12
 800a39c:	f000 ffa8 	bl	800b2f0 <memcpy>
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4658      	mov	r0, fp
 800a3a6:	f000 fc05 	bl	800abb4 <__lshift>
 800a3aa:	462f      	mov	r7, r5
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	f10a 0301 	add.w	r3, sl, #1
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	4453      	add	r3, sl
 800a3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3ba:	9b02      	ldr	r3, [sp, #8]
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c2:	9b07      	ldr	r3, [sp, #28]
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	4648      	mov	r0, r9
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	f7ff fa95 	bl	80098fa <quorem>
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	9008      	str	r0, [sp, #32]
 800a3d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3d8:	4648      	mov	r0, r9
 800a3da:	f000 fc57 	bl	800ac8c <__mcmp>
 800a3de:	462a      	mov	r2, r5
 800a3e0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	4658      	mov	r0, fp
 800a3e6:	f000 fc6d 	bl	800acc4 <__mdiff>
 800a3ea:	68c2      	ldr	r2, [r0, #12]
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	bb02      	cbnz	r2, 800a432 <_dtoa_r+0xa22>
 800a3f0:	4601      	mov	r1, r0
 800a3f2:	4648      	mov	r0, r9
 800a3f4:	f000 fc4a 	bl	800ac8c <__mcmp>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4658      	mov	r0, fp
 800a3fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800a400:	f000 fa0c 	bl	800a81c <_Bfree>
 800a404:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a406:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a408:	9e07      	ldr	r6, [sp, #28]
 800a40a:	ea43 0102 	orr.w	r1, r3, r2
 800a40e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a410:	4319      	orrs	r1, r3
 800a412:	d110      	bne.n	800a436 <_dtoa_r+0xa26>
 800a414:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a418:	d029      	beq.n	800a46e <_dtoa_r+0xa5e>
 800a41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd02      	ble.n	800a426 <_dtoa_r+0xa16>
 800a420:	9b08      	ldr	r3, [sp, #32]
 800a422:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a426:	9b02      	ldr	r3, [sp, #8]
 800a428:	f883 8000 	strb.w	r8, [r3]
 800a42c:	e63b      	b.n	800a0a6 <_dtoa_r+0x696>
 800a42e:	4628      	mov	r0, r5
 800a430:	e7bb      	b.n	800a3aa <_dtoa_r+0x99a>
 800a432:	2201      	movs	r2, #1
 800a434:	e7e1      	b.n	800a3fa <_dtoa_r+0x9ea>
 800a436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a438:	2b00      	cmp	r3, #0
 800a43a:	db04      	blt.n	800a446 <_dtoa_r+0xa36>
 800a43c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a43e:	430b      	orrs	r3, r1
 800a440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a442:	430b      	orrs	r3, r1
 800a444:	d120      	bne.n	800a488 <_dtoa_r+0xa78>
 800a446:	2a00      	cmp	r2, #0
 800a448:	dded      	ble.n	800a426 <_dtoa_r+0xa16>
 800a44a:	4649      	mov	r1, r9
 800a44c:	2201      	movs	r2, #1
 800a44e:	4658      	mov	r0, fp
 800a450:	f000 fbb0 	bl	800abb4 <__lshift>
 800a454:	4621      	mov	r1, r4
 800a456:	4681      	mov	r9, r0
 800a458:	f000 fc18 	bl	800ac8c <__mcmp>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dc03      	bgt.n	800a468 <_dtoa_r+0xa58>
 800a460:	d1e1      	bne.n	800a426 <_dtoa_r+0xa16>
 800a462:	f018 0f01 	tst.w	r8, #1
 800a466:	d0de      	beq.n	800a426 <_dtoa_r+0xa16>
 800a468:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a46c:	d1d8      	bne.n	800a420 <_dtoa_r+0xa10>
 800a46e:	2339      	movs	r3, #57	@ 0x39
 800a470:	9a02      	ldr	r2, [sp, #8]
 800a472:	7013      	strb	r3, [r2, #0]
 800a474:	4633      	mov	r3, r6
 800a476:	461e      	mov	r6, r3
 800a478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	2a39      	cmp	r2, #57	@ 0x39
 800a480:	d052      	beq.n	800a528 <_dtoa_r+0xb18>
 800a482:	3201      	adds	r2, #1
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	e60e      	b.n	800a0a6 <_dtoa_r+0x696>
 800a488:	2a00      	cmp	r2, #0
 800a48a:	dd07      	ble.n	800a49c <_dtoa_r+0xa8c>
 800a48c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a490:	d0ed      	beq.n	800a46e <_dtoa_r+0xa5e>
 800a492:	9a02      	ldr	r2, [sp, #8]
 800a494:	f108 0301 	add.w	r3, r8, #1
 800a498:	7013      	strb	r3, [r2, #0]
 800a49a:	e604      	b.n	800a0a6 <_dtoa_r+0x696>
 800a49c:	9b07      	ldr	r3, [sp, #28]
 800a49e:	9a07      	ldr	r2, [sp, #28]
 800a4a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a4a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d028      	beq.n	800a4fc <_dtoa_r+0xaec>
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	220a      	movs	r2, #10
 800a4b0:	4658      	mov	r0, fp
 800a4b2:	f000 f9d5 	bl	800a860 <__multadd>
 800a4b6:	42af      	cmp	r7, r5
 800a4b8:	4681      	mov	r9, r0
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	f04f 020a 	mov.w	r2, #10
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	4658      	mov	r0, fp
 800a4c6:	d107      	bne.n	800a4d8 <_dtoa_r+0xac8>
 800a4c8:	f000 f9ca 	bl	800a860 <__multadd>
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	9b07      	ldr	r3, [sp, #28]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	9307      	str	r3, [sp, #28]
 800a4d6:	e774      	b.n	800a3c2 <_dtoa_r+0x9b2>
 800a4d8:	f000 f9c2 	bl	800a860 <__multadd>
 800a4dc:	4629      	mov	r1, r5
 800a4de:	4607      	mov	r7, r0
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	220a      	movs	r2, #10
 800a4e4:	4658      	mov	r0, fp
 800a4e6:	f000 f9bb 	bl	800a860 <__multadd>
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	e7f0      	b.n	800a4d0 <_dtoa_r+0xac0>
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	2700      	movs	r7, #0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bfcc      	ite	gt
 800a4f6:	461e      	movgt	r6, r3
 800a4f8:	2601      	movle	r6, #1
 800a4fa:	4456      	add	r6, sl
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	2201      	movs	r2, #1
 800a500:	4658      	mov	r0, fp
 800a502:	f000 fb57 	bl	800abb4 <__lshift>
 800a506:	4621      	mov	r1, r4
 800a508:	4681      	mov	r9, r0
 800a50a:	f000 fbbf 	bl	800ac8c <__mcmp>
 800a50e:	2800      	cmp	r0, #0
 800a510:	dcb0      	bgt.n	800a474 <_dtoa_r+0xa64>
 800a512:	d102      	bne.n	800a51a <_dtoa_r+0xb0a>
 800a514:	f018 0f01 	tst.w	r8, #1
 800a518:	d1ac      	bne.n	800a474 <_dtoa_r+0xa64>
 800a51a:	4633      	mov	r3, r6
 800a51c:	461e      	mov	r6, r3
 800a51e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a522:	2a30      	cmp	r2, #48	@ 0x30
 800a524:	d0fa      	beq.n	800a51c <_dtoa_r+0xb0c>
 800a526:	e5be      	b.n	800a0a6 <_dtoa_r+0x696>
 800a528:	459a      	cmp	sl, r3
 800a52a:	d1a4      	bne.n	800a476 <_dtoa_r+0xa66>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	3301      	adds	r3, #1
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	2331      	movs	r3, #49	@ 0x31
 800a534:	f88a 3000 	strb.w	r3, [sl]
 800a538:	e5b5      	b.n	800a0a6 <_dtoa_r+0x696>
 800a53a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a53c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a59c <_dtoa_r+0xb8c>
 800a540:	b11b      	cbz	r3, 800a54a <_dtoa_r+0xb3a>
 800a542:	f10a 0308 	add.w	r3, sl, #8
 800a546:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	4650      	mov	r0, sl
 800a54c:	b017      	add	sp, #92	@ 0x5c
 800a54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a552:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a554:	2b01      	cmp	r3, #1
 800a556:	f77f ae3d 	ble.w	800a1d4 <_dtoa_r+0x7c4>
 800a55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a55c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a55e:	2001      	movs	r0, #1
 800a560:	e65b      	b.n	800a21a <_dtoa_r+0x80a>
 800a562:	9b08      	ldr	r3, [sp, #32]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f77f aed6 	ble.w	800a316 <_dtoa_r+0x906>
 800a56a:	4656      	mov	r6, sl
 800a56c:	4621      	mov	r1, r4
 800a56e:	4648      	mov	r0, r9
 800a570:	f7ff f9c3 	bl	80098fa <quorem>
 800a574:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a578:	9b08      	ldr	r3, [sp, #32]
 800a57a:	f806 8b01 	strb.w	r8, [r6], #1
 800a57e:	eba6 020a 	sub.w	r2, r6, sl
 800a582:	4293      	cmp	r3, r2
 800a584:	ddb3      	ble.n	800a4ee <_dtoa_r+0xade>
 800a586:	4649      	mov	r1, r9
 800a588:	2300      	movs	r3, #0
 800a58a:	220a      	movs	r2, #10
 800a58c:	4658      	mov	r0, fp
 800a58e:	f000 f967 	bl	800a860 <__multadd>
 800a592:	4681      	mov	r9, r0
 800a594:	e7ea      	b.n	800a56c <_dtoa_r+0xb5c>
 800a596:	bf00      	nop
 800a598:	0800c10f 	.word	0x0800c10f
 800a59c:	0800c093 	.word	0x0800c093

0800a5a0 <_free_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	d040      	beq.n	800a62a <_free_r+0x8a>
 800a5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ac:	1f0c      	subs	r4, r1, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfb8      	it	lt
 800a5b2:	18e4      	addlt	r4, r4, r3
 800a5b4:	f000 f8e6 	bl	800a784 <__malloc_lock>
 800a5b8:	4a1c      	ldr	r2, [pc, #112]	@ (800a62c <_free_r+0x8c>)
 800a5ba:	6813      	ldr	r3, [r2, #0]
 800a5bc:	b933      	cbnz	r3, 800a5cc <_free_r+0x2c>
 800a5be:	6063      	str	r3, [r4, #4]
 800a5c0:	6014      	str	r4, [r2, #0]
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5c8:	f000 b8e2 	b.w	800a790 <__malloc_unlock>
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	d908      	bls.n	800a5e2 <_free_r+0x42>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	1821      	adds	r1, r4, r0
 800a5d4:	428b      	cmp	r3, r1
 800a5d6:	bf01      	itttt	eq
 800a5d8:	6819      	ldreq	r1, [r3, #0]
 800a5da:	685b      	ldreq	r3, [r3, #4]
 800a5dc:	1809      	addeq	r1, r1, r0
 800a5de:	6021      	streq	r1, [r4, #0]
 800a5e0:	e7ed      	b.n	800a5be <_free_r+0x1e>
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	b10b      	cbz	r3, 800a5ec <_free_r+0x4c>
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	d9fa      	bls.n	800a5e2 <_free_r+0x42>
 800a5ec:	6811      	ldr	r1, [r2, #0]
 800a5ee:	1850      	adds	r0, r2, r1
 800a5f0:	42a0      	cmp	r0, r4
 800a5f2:	d10b      	bne.n	800a60c <_free_r+0x6c>
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	4401      	add	r1, r0
 800a5f8:	1850      	adds	r0, r2, r1
 800a5fa:	4283      	cmp	r3, r0
 800a5fc:	6011      	str	r1, [r2, #0]
 800a5fe:	d1e0      	bne.n	800a5c2 <_free_r+0x22>
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	4408      	add	r0, r1
 800a606:	6010      	str	r0, [r2, #0]
 800a608:	6053      	str	r3, [r2, #4]
 800a60a:	e7da      	b.n	800a5c2 <_free_r+0x22>
 800a60c:	d902      	bls.n	800a614 <_free_r+0x74>
 800a60e:	230c      	movs	r3, #12
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	e7d6      	b.n	800a5c2 <_free_r+0x22>
 800a614:	6820      	ldr	r0, [r4, #0]
 800a616:	1821      	adds	r1, r4, r0
 800a618:	428b      	cmp	r3, r1
 800a61a:	bf01      	itttt	eq
 800a61c:	6819      	ldreq	r1, [r3, #0]
 800a61e:	685b      	ldreq	r3, [r3, #4]
 800a620:	1809      	addeq	r1, r1, r0
 800a622:	6021      	streq	r1, [r4, #0]
 800a624:	6063      	str	r3, [r4, #4]
 800a626:	6054      	str	r4, [r2, #4]
 800a628:	e7cb      	b.n	800a5c2 <_free_r+0x22>
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20000f64 	.word	0x20000f64

0800a630 <malloc>:
 800a630:	4b02      	ldr	r3, [pc, #8]	@ (800a63c <malloc+0xc>)
 800a632:	4601      	mov	r1, r0
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	f000 b825 	b.w	800a684 <_malloc_r>
 800a63a:	bf00      	nop
 800a63c:	20000078 	.word	0x20000078

0800a640 <sbrk_aligned>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	4e0f      	ldr	r6, [pc, #60]	@ (800a680 <sbrk_aligned+0x40>)
 800a644:	460c      	mov	r4, r1
 800a646:	6831      	ldr	r1, [r6, #0]
 800a648:	4605      	mov	r5, r0
 800a64a:	b911      	cbnz	r1, 800a652 <sbrk_aligned+0x12>
 800a64c:	f000 fe40 	bl	800b2d0 <_sbrk_r>
 800a650:	6030      	str	r0, [r6, #0]
 800a652:	4621      	mov	r1, r4
 800a654:	4628      	mov	r0, r5
 800a656:	f000 fe3b 	bl	800b2d0 <_sbrk_r>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	d103      	bne.n	800a666 <sbrk_aligned+0x26>
 800a65e:	f04f 34ff 	mov.w	r4, #4294967295
 800a662:	4620      	mov	r0, r4
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	1cc4      	adds	r4, r0, #3
 800a668:	f024 0403 	bic.w	r4, r4, #3
 800a66c:	42a0      	cmp	r0, r4
 800a66e:	d0f8      	beq.n	800a662 <sbrk_aligned+0x22>
 800a670:	1a21      	subs	r1, r4, r0
 800a672:	4628      	mov	r0, r5
 800a674:	f000 fe2c 	bl	800b2d0 <_sbrk_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	d1f2      	bne.n	800a662 <sbrk_aligned+0x22>
 800a67c:	e7ef      	b.n	800a65e <sbrk_aligned+0x1e>
 800a67e:	bf00      	nop
 800a680:	20000f60 	.word	0x20000f60

0800a684 <_malloc_r>:
 800a684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a688:	1ccd      	adds	r5, r1, #3
 800a68a:	f025 0503 	bic.w	r5, r5, #3
 800a68e:	3508      	adds	r5, #8
 800a690:	2d0c      	cmp	r5, #12
 800a692:	bf38      	it	cc
 800a694:	250c      	movcc	r5, #12
 800a696:	2d00      	cmp	r5, #0
 800a698:	4606      	mov	r6, r0
 800a69a:	db01      	blt.n	800a6a0 <_malloc_r+0x1c>
 800a69c:	42a9      	cmp	r1, r5
 800a69e:	d904      	bls.n	800a6aa <_malloc_r+0x26>
 800a6a0:	230c      	movs	r3, #12
 800a6a2:	6033      	str	r3, [r6, #0]
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a780 <_malloc_r+0xfc>
 800a6ae:	f000 f869 	bl	800a784 <__malloc_lock>
 800a6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6b6:	461c      	mov	r4, r3
 800a6b8:	bb44      	cbnz	r4, 800a70c <_malloc_r+0x88>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff ffbf 	bl	800a640 <sbrk_aligned>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	d158      	bne.n	800a77a <_malloc_r+0xf6>
 800a6c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a6cc:	4627      	mov	r7, r4
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	d143      	bne.n	800a75a <_malloc_r+0xd6>
 800a6d2:	2c00      	cmp	r4, #0
 800a6d4:	d04b      	beq.n	800a76e <_malloc_r+0xea>
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	4639      	mov	r1, r7
 800a6da:	4630      	mov	r0, r6
 800a6dc:	eb04 0903 	add.w	r9, r4, r3
 800a6e0:	f000 fdf6 	bl	800b2d0 <_sbrk_r>
 800a6e4:	4581      	cmp	r9, r0
 800a6e6:	d142      	bne.n	800a76e <_malloc_r+0xea>
 800a6e8:	6821      	ldr	r1, [r4, #0]
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	1a6d      	subs	r5, r5, r1
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f7ff ffa6 	bl	800a640 <sbrk_aligned>
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d03a      	beq.n	800a76e <_malloc_r+0xea>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	442b      	add	r3, r5
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	bb62      	cbnz	r2, 800a760 <_malloc_r+0xdc>
 800a706:	f8c8 7000 	str.w	r7, [r8]
 800a70a:	e00f      	b.n	800a72c <_malloc_r+0xa8>
 800a70c:	6822      	ldr	r2, [r4, #0]
 800a70e:	1b52      	subs	r2, r2, r5
 800a710:	d420      	bmi.n	800a754 <_malloc_r+0xd0>
 800a712:	2a0b      	cmp	r2, #11
 800a714:	d917      	bls.n	800a746 <_malloc_r+0xc2>
 800a716:	1961      	adds	r1, r4, r5
 800a718:	42a3      	cmp	r3, r4
 800a71a:	6025      	str	r5, [r4, #0]
 800a71c:	bf18      	it	ne
 800a71e:	6059      	strne	r1, [r3, #4]
 800a720:	6863      	ldr	r3, [r4, #4]
 800a722:	bf08      	it	eq
 800a724:	f8c8 1000 	streq.w	r1, [r8]
 800a728:	5162      	str	r2, [r4, r5]
 800a72a:	604b      	str	r3, [r1, #4]
 800a72c:	4630      	mov	r0, r6
 800a72e:	f000 f82f 	bl	800a790 <__malloc_unlock>
 800a732:	f104 000b 	add.w	r0, r4, #11
 800a736:	1d23      	adds	r3, r4, #4
 800a738:	f020 0007 	bic.w	r0, r0, #7
 800a73c:	1ac2      	subs	r2, r0, r3
 800a73e:	bf1c      	itt	ne
 800a740:	1a1b      	subne	r3, r3, r0
 800a742:	50a3      	strne	r3, [r4, r2]
 800a744:	e7af      	b.n	800a6a6 <_malloc_r+0x22>
 800a746:	6862      	ldr	r2, [r4, #4]
 800a748:	42a3      	cmp	r3, r4
 800a74a:	bf0c      	ite	eq
 800a74c:	f8c8 2000 	streq.w	r2, [r8]
 800a750:	605a      	strne	r2, [r3, #4]
 800a752:	e7eb      	b.n	800a72c <_malloc_r+0xa8>
 800a754:	4623      	mov	r3, r4
 800a756:	6864      	ldr	r4, [r4, #4]
 800a758:	e7ae      	b.n	800a6b8 <_malloc_r+0x34>
 800a75a:	463c      	mov	r4, r7
 800a75c:	687f      	ldr	r7, [r7, #4]
 800a75e:	e7b6      	b.n	800a6ce <_malloc_r+0x4a>
 800a760:	461a      	mov	r2, r3
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	42a3      	cmp	r3, r4
 800a766:	d1fb      	bne.n	800a760 <_malloc_r+0xdc>
 800a768:	2300      	movs	r3, #0
 800a76a:	6053      	str	r3, [r2, #4]
 800a76c:	e7de      	b.n	800a72c <_malloc_r+0xa8>
 800a76e:	230c      	movs	r3, #12
 800a770:	4630      	mov	r0, r6
 800a772:	6033      	str	r3, [r6, #0]
 800a774:	f000 f80c 	bl	800a790 <__malloc_unlock>
 800a778:	e794      	b.n	800a6a4 <_malloc_r+0x20>
 800a77a:	6005      	str	r5, [r0, #0]
 800a77c:	e7d6      	b.n	800a72c <_malloc_r+0xa8>
 800a77e:	bf00      	nop
 800a780:	20000f64 	.word	0x20000f64

0800a784 <__malloc_lock>:
 800a784:	4801      	ldr	r0, [pc, #4]	@ (800a78c <__malloc_lock+0x8>)
 800a786:	f7ff b8a8 	b.w	80098da <__retarget_lock_acquire_recursive>
 800a78a:	bf00      	nop
 800a78c:	20000f5c 	.word	0x20000f5c

0800a790 <__malloc_unlock>:
 800a790:	4801      	ldr	r0, [pc, #4]	@ (800a798 <__malloc_unlock+0x8>)
 800a792:	f7ff b8a3 	b.w	80098dc <__retarget_lock_release_recursive>
 800a796:	bf00      	nop
 800a798:	20000f5c 	.word	0x20000f5c

0800a79c <_Balloc>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	69c6      	ldr	r6, [r0, #28]
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	460d      	mov	r5, r1
 800a7a4:	b976      	cbnz	r6, 800a7c4 <_Balloc+0x28>
 800a7a6:	2010      	movs	r0, #16
 800a7a8:	f7ff ff42 	bl	800a630 <malloc>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	61e0      	str	r0, [r4, #28]
 800a7b0:	b920      	cbnz	r0, 800a7bc <_Balloc+0x20>
 800a7b2:	216b      	movs	r1, #107	@ 0x6b
 800a7b4:	4b17      	ldr	r3, [pc, #92]	@ (800a814 <_Balloc+0x78>)
 800a7b6:	4818      	ldr	r0, [pc, #96]	@ (800a818 <_Balloc+0x7c>)
 800a7b8:	f000 fda8 	bl	800b30c <__assert_func>
 800a7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c0:	6006      	str	r6, [r0, #0]
 800a7c2:	60c6      	str	r6, [r0, #12]
 800a7c4:	69e6      	ldr	r6, [r4, #28]
 800a7c6:	68f3      	ldr	r3, [r6, #12]
 800a7c8:	b183      	cbz	r3, 800a7ec <_Balloc+0x50>
 800a7ca:	69e3      	ldr	r3, [r4, #28]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7d2:	b9b8      	cbnz	r0, 800a804 <_Balloc+0x68>
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7da:	1d72      	adds	r2, r6, #5
 800a7dc:	4620      	mov	r0, r4
 800a7de:	0092      	lsls	r2, r2, #2
 800a7e0:	f000 fdb2 	bl	800b348 <_calloc_r>
 800a7e4:	b160      	cbz	r0, 800a800 <_Balloc+0x64>
 800a7e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ea:	e00e      	b.n	800a80a <_Balloc+0x6e>
 800a7ec:	2221      	movs	r2, #33	@ 0x21
 800a7ee:	2104      	movs	r1, #4
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fda9 	bl	800b348 <_calloc_r>
 800a7f6:	69e3      	ldr	r3, [r4, #28]
 800a7f8:	60f0      	str	r0, [r6, #12]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1e4      	bne.n	800a7ca <_Balloc+0x2e>
 800a800:	2000      	movs	r0, #0
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	6802      	ldr	r2, [r0, #0]
 800a806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a80a:	2300      	movs	r3, #0
 800a80c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a810:	e7f7      	b.n	800a802 <_Balloc+0x66>
 800a812:	bf00      	nop
 800a814:	0800c0a0 	.word	0x0800c0a0
 800a818:	0800c120 	.word	0x0800c120

0800a81c <_Bfree>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	69c6      	ldr	r6, [r0, #28]
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	b976      	cbnz	r6, 800a844 <_Bfree+0x28>
 800a826:	2010      	movs	r0, #16
 800a828:	f7ff ff02 	bl	800a630 <malloc>
 800a82c:	4602      	mov	r2, r0
 800a82e:	61e8      	str	r0, [r5, #28]
 800a830:	b920      	cbnz	r0, 800a83c <_Bfree+0x20>
 800a832:	218f      	movs	r1, #143	@ 0x8f
 800a834:	4b08      	ldr	r3, [pc, #32]	@ (800a858 <_Bfree+0x3c>)
 800a836:	4809      	ldr	r0, [pc, #36]	@ (800a85c <_Bfree+0x40>)
 800a838:	f000 fd68 	bl	800b30c <__assert_func>
 800a83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a840:	6006      	str	r6, [r0, #0]
 800a842:	60c6      	str	r6, [r0, #12]
 800a844:	b13c      	cbz	r4, 800a856 <_Bfree+0x3a>
 800a846:	69eb      	ldr	r3, [r5, #28]
 800a848:	6862      	ldr	r2, [r4, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a850:	6021      	str	r1, [r4, #0]
 800a852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	0800c0a0 	.word	0x0800c0a0
 800a85c:	0800c120 	.word	0x0800c120

0800a860 <__multadd>:
 800a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a864:	4607      	mov	r7, r0
 800a866:	460c      	mov	r4, r1
 800a868:	461e      	mov	r6, r3
 800a86a:	2000      	movs	r0, #0
 800a86c:	690d      	ldr	r5, [r1, #16]
 800a86e:	f101 0c14 	add.w	ip, r1, #20
 800a872:	f8dc 3000 	ldr.w	r3, [ip]
 800a876:	3001      	adds	r0, #1
 800a878:	b299      	uxth	r1, r3
 800a87a:	fb02 6101 	mla	r1, r2, r1, r6
 800a87e:	0c1e      	lsrs	r6, r3, #16
 800a880:	0c0b      	lsrs	r3, r1, #16
 800a882:	fb02 3306 	mla	r3, r2, r6, r3
 800a886:	b289      	uxth	r1, r1
 800a888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a88c:	4285      	cmp	r5, r0
 800a88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a892:	f84c 1b04 	str.w	r1, [ip], #4
 800a896:	dcec      	bgt.n	800a872 <__multadd+0x12>
 800a898:	b30e      	cbz	r6, 800a8de <__multadd+0x7e>
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	42ab      	cmp	r3, r5
 800a89e:	dc19      	bgt.n	800a8d4 <__multadd+0x74>
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	3101      	adds	r1, #1
 800a8a6:	f7ff ff79 	bl	800a79c <_Balloc>
 800a8aa:	4680      	mov	r8, r0
 800a8ac:	b928      	cbnz	r0, 800a8ba <__multadd+0x5a>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	21ba      	movs	r1, #186	@ 0xba
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <__multadd+0x84>)
 800a8b4:	480c      	ldr	r0, [pc, #48]	@ (800a8e8 <__multadd+0x88>)
 800a8b6:	f000 fd29 	bl	800b30c <__assert_func>
 800a8ba:	6922      	ldr	r2, [r4, #16]
 800a8bc:	f104 010c 	add.w	r1, r4, #12
 800a8c0:	3202      	adds	r2, #2
 800a8c2:	0092      	lsls	r2, r2, #2
 800a8c4:	300c      	adds	r0, #12
 800a8c6:	f000 fd13 	bl	800b2f0 <memcpy>
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff ffa5 	bl	800a81c <_Bfree>
 800a8d2:	4644      	mov	r4, r8
 800a8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8d8:	3501      	adds	r5, #1
 800a8da:	615e      	str	r6, [r3, #20]
 800a8dc:	6125      	str	r5, [r4, #16]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e4:	0800c10f 	.word	0x0800c10f
 800a8e8:	0800c120 	.word	0x0800c120

0800a8ec <__hi0bits>:
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8f2:	bf3a      	itte	cc
 800a8f4:	0403      	lslcc	r3, r0, #16
 800a8f6:	2010      	movcc	r0, #16
 800a8f8:	2000      	movcs	r0, #0
 800a8fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8fe:	bf3c      	itt	cc
 800a900:	021b      	lslcc	r3, r3, #8
 800a902:	3008      	addcc	r0, #8
 800a904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a908:	bf3c      	itt	cc
 800a90a:	011b      	lslcc	r3, r3, #4
 800a90c:	3004      	addcc	r0, #4
 800a90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a912:	bf3c      	itt	cc
 800a914:	009b      	lslcc	r3, r3, #2
 800a916:	3002      	addcc	r0, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db05      	blt.n	800a928 <__hi0bits+0x3c>
 800a91c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a920:	f100 0001 	add.w	r0, r0, #1
 800a924:	bf08      	it	eq
 800a926:	2020      	moveq	r0, #32
 800a928:	4770      	bx	lr

0800a92a <__lo0bits>:
 800a92a:	6803      	ldr	r3, [r0, #0]
 800a92c:	4602      	mov	r2, r0
 800a92e:	f013 0007 	ands.w	r0, r3, #7
 800a932:	d00b      	beq.n	800a94c <__lo0bits+0x22>
 800a934:	07d9      	lsls	r1, r3, #31
 800a936:	d421      	bmi.n	800a97c <__lo0bits+0x52>
 800a938:	0798      	lsls	r0, r3, #30
 800a93a:	bf49      	itett	mi
 800a93c:	085b      	lsrmi	r3, r3, #1
 800a93e:	089b      	lsrpl	r3, r3, #2
 800a940:	2001      	movmi	r0, #1
 800a942:	6013      	strmi	r3, [r2, #0]
 800a944:	bf5c      	itt	pl
 800a946:	2002      	movpl	r0, #2
 800a948:	6013      	strpl	r3, [r2, #0]
 800a94a:	4770      	bx	lr
 800a94c:	b299      	uxth	r1, r3
 800a94e:	b909      	cbnz	r1, 800a954 <__lo0bits+0x2a>
 800a950:	2010      	movs	r0, #16
 800a952:	0c1b      	lsrs	r3, r3, #16
 800a954:	b2d9      	uxtb	r1, r3
 800a956:	b909      	cbnz	r1, 800a95c <__lo0bits+0x32>
 800a958:	3008      	adds	r0, #8
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	0719      	lsls	r1, r3, #28
 800a95e:	bf04      	itt	eq
 800a960:	091b      	lsreq	r3, r3, #4
 800a962:	3004      	addeq	r0, #4
 800a964:	0799      	lsls	r1, r3, #30
 800a966:	bf04      	itt	eq
 800a968:	089b      	lsreq	r3, r3, #2
 800a96a:	3002      	addeq	r0, #2
 800a96c:	07d9      	lsls	r1, r3, #31
 800a96e:	d403      	bmi.n	800a978 <__lo0bits+0x4e>
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	f100 0001 	add.w	r0, r0, #1
 800a976:	d003      	beq.n	800a980 <__lo0bits+0x56>
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	4770      	bx	lr
 800a97c:	2000      	movs	r0, #0
 800a97e:	4770      	bx	lr
 800a980:	2020      	movs	r0, #32
 800a982:	4770      	bx	lr

0800a984 <__i2b>:
 800a984:	b510      	push	{r4, lr}
 800a986:	460c      	mov	r4, r1
 800a988:	2101      	movs	r1, #1
 800a98a:	f7ff ff07 	bl	800a79c <_Balloc>
 800a98e:	4602      	mov	r2, r0
 800a990:	b928      	cbnz	r0, 800a99e <__i2b+0x1a>
 800a992:	f240 1145 	movw	r1, #325	@ 0x145
 800a996:	4b04      	ldr	r3, [pc, #16]	@ (800a9a8 <__i2b+0x24>)
 800a998:	4804      	ldr	r0, [pc, #16]	@ (800a9ac <__i2b+0x28>)
 800a99a:	f000 fcb7 	bl	800b30c <__assert_func>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	6144      	str	r4, [r0, #20]
 800a9a2:	6103      	str	r3, [r0, #16]
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800c10f 	.word	0x0800c10f
 800a9ac:	0800c120 	.word	0x0800c120

0800a9b0 <__multiply>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	690a      	ldr	r2, [r1, #16]
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	460f      	mov	r7, r1
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	bfa2      	ittt	ge
 800a9c0:	4623      	movge	r3, r4
 800a9c2:	460c      	movge	r4, r1
 800a9c4:	461f      	movge	r7, r3
 800a9c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	6861      	ldr	r1, [r4, #4]
 800a9d2:	eb0a 0609 	add.w	r6, sl, r9
 800a9d6:	42b3      	cmp	r3, r6
 800a9d8:	b085      	sub	sp, #20
 800a9da:	bfb8      	it	lt
 800a9dc:	3101      	addlt	r1, #1
 800a9de:	f7ff fedd 	bl	800a79c <_Balloc>
 800a9e2:	b930      	cbnz	r0, 800a9f2 <__multiply+0x42>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a9ea:	4b43      	ldr	r3, [pc, #268]	@ (800aaf8 <__multiply+0x148>)
 800a9ec:	4843      	ldr	r0, [pc, #268]	@ (800aafc <__multiply+0x14c>)
 800a9ee:	f000 fc8d 	bl	800b30c <__assert_func>
 800a9f2:	f100 0514 	add.w	r5, r0, #20
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9fe:	4543      	cmp	r3, r8
 800aa00:	d321      	bcc.n	800aa46 <__multiply+0x96>
 800aa02:	f107 0114 	add.w	r1, r7, #20
 800aa06:	f104 0214 	add.w	r2, r4, #20
 800aa0a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa0e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	1b13      	subs	r3, r2, r4
 800aa16:	3b15      	subs	r3, #21
 800aa18:	f023 0303 	bic.w	r3, r3, #3
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	f104 0715 	add.w	r7, r4, #21
 800aa22:	42ba      	cmp	r2, r7
 800aa24:	bf38      	it	cc
 800aa26:	2304      	movcc	r3, #4
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	9b02      	ldr	r3, [sp, #8]
 800aa2c:	9103      	str	r1, [sp, #12]
 800aa2e:	428b      	cmp	r3, r1
 800aa30:	d80c      	bhi.n	800aa4c <__multiply+0x9c>
 800aa32:	2e00      	cmp	r6, #0
 800aa34:	dd03      	ble.n	800aa3e <__multiply+0x8e>
 800aa36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d05a      	beq.n	800aaf4 <__multiply+0x144>
 800aa3e:	6106      	str	r6, [r0, #16]
 800aa40:	b005      	add	sp, #20
 800aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa46:	f843 2b04 	str.w	r2, [r3], #4
 800aa4a:	e7d8      	b.n	800a9fe <__multiply+0x4e>
 800aa4c:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	d023      	beq.n	800aa9e <__multiply+0xee>
 800aa56:	46a9      	mov	r9, r5
 800aa58:	f04f 0c00 	mov.w	ip, #0
 800aa5c:	f104 0e14 	add.w	lr, r4, #20
 800aa60:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa64:	f8d9 3000 	ldr.w	r3, [r9]
 800aa68:	fa1f fb87 	uxth.w	fp, r7
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa72:	4463      	add	r3, ip
 800aa74:	f8d9 c000 	ldr.w	ip, [r9]
 800aa78:	0c3f      	lsrs	r7, r7, #16
 800aa7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aa7e:	fb0a c707 	mla	r7, sl, r7, ip
 800aa82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa8c:	4572      	cmp	r2, lr
 800aa8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa92:	f849 3b04 	str.w	r3, [r9], #4
 800aa96:	d8e3      	bhi.n	800aa60 <__multiply+0xb0>
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	f845 c003 	str.w	ip, [r5, r3]
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	3104      	adds	r1, #4
 800aaa2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aaa6:	f1b9 0f00 	cmp.w	r9, #0
 800aaaa:	d021      	beq.n	800aaf0 <__multiply+0x140>
 800aaac:	46ae      	mov	lr, r5
 800aaae:	f04f 0a00 	mov.w	sl, #0
 800aab2:	682b      	ldr	r3, [r5, #0]
 800aab4:	f104 0c14 	add.w	ip, r4, #20
 800aab8:	f8bc b000 	ldrh.w	fp, [ip]
 800aabc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	fb09 770b 	mla	r7, r9, fp, r7
 800aac6:	4457      	add	r7, sl
 800aac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aacc:	f84e 3b04 	str.w	r3, [lr], #4
 800aad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aad8:	f8be 3000 	ldrh.w	r3, [lr]
 800aadc:	4562      	cmp	r2, ip
 800aade:	fb09 330a 	mla	r3, r9, sl, r3
 800aae2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaea:	d8e5      	bhi.n	800aab8 <__multiply+0x108>
 800aaec:	9f01      	ldr	r7, [sp, #4]
 800aaee:	51eb      	str	r3, [r5, r7]
 800aaf0:	3504      	adds	r5, #4
 800aaf2:	e79a      	b.n	800aa2a <__multiply+0x7a>
 800aaf4:	3e01      	subs	r6, #1
 800aaf6:	e79c      	b.n	800aa32 <__multiply+0x82>
 800aaf8:	0800c10f 	.word	0x0800c10f
 800aafc:	0800c120 	.word	0x0800c120

0800ab00 <__pow5mult>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	4615      	mov	r5, r2
 800ab06:	f012 0203 	ands.w	r2, r2, #3
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	460e      	mov	r6, r1
 800ab0e:	d007      	beq.n	800ab20 <__pow5mult+0x20>
 800ab10:	4c25      	ldr	r4, [pc, #148]	@ (800aba8 <__pow5mult+0xa8>)
 800ab12:	3a01      	subs	r2, #1
 800ab14:	2300      	movs	r3, #0
 800ab16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab1a:	f7ff fea1 	bl	800a860 <__multadd>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	10ad      	asrs	r5, r5, #2
 800ab22:	d03d      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab24:	69fc      	ldr	r4, [r7, #28]
 800ab26:	b97c      	cbnz	r4, 800ab48 <__pow5mult+0x48>
 800ab28:	2010      	movs	r0, #16
 800ab2a:	f7ff fd81 	bl	800a630 <malloc>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	61f8      	str	r0, [r7, #28]
 800ab32:	b928      	cbnz	r0, 800ab40 <__pow5mult+0x40>
 800ab34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab38:	4b1c      	ldr	r3, [pc, #112]	@ (800abac <__pow5mult+0xac>)
 800ab3a:	481d      	ldr	r0, [pc, #116]	@ (800abb0 <__pow5mult+0xb0>)
 800ab3c:	f000 fbe6 	bl	800b30c <__assert_func>
 800ab40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab44:	6004      	str	r4, [r0, #0]
 800ab46:	60c4      	str	r4, [r0, #12]
 800ab48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab50:	b94c      	cbnz	r4, 800ab66 <__pow5mult+0x66>
 800ab52:	f240 2171 	movw	r1, #625	@ 0x271
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7ff ff14 	bl	800a984 <__i2b>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	07eb      	lsls	r3, r5, #31
 800ab6c:	d50a      	bpl.n	800ab84 <__pow5mult+0x84>
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4622      	mov	r2, r4
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7ff ff1c 	bl	800a9b0 <__multiply>
 800ab78:	4680      	mov	r8, r0
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	f7ff fe4d 	bl	800a81c <_Bfree>
 800ab82:	4646      	mov	r6, r8
 800ab84:	106d      	asrs	r5, r5, #1
 800ab86:	d00b      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	b938      	cbnz	r0, 800ab9c <__pow5mult+0x9c>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ff0d 	bl	800a9b0 <__multiply>
 800ab96:	6020      	str	r0, [r4, #0]
 800ab98:	f8c0 9000 	str.w	r9, [r0]
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	e7e4      	b.n	800ab6a <__pow5mult+0x6a>
 800aba0:	4630      	mov	r0, r6
 800aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba6:	bf00      	nop
 800aba8:	0800c17c 	.word	0x0800c17c
 800abac:	0800c0a0 	.word	0x0800c0a0
 800abb0:	0800c120 	.word	0x0800c120

0800abb4 <__lshift>:
 800abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	4607      	mov	r7, r0
 800abbc:	4691      	mov	r9, r2
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	6849      	ldr	r1, [r1, #4]
 800abc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abc6:	68a3      	ldr	r3, [r4, #8]
 800abc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abcc:	f108 0601 	add.w	r6, r8, #1
 800abd0:	42b3      	cmp	r3, r6
 800abd2:	db0b      	blt.n	800abec <__lshift+0x38>
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff fde1 	bl	800a79c <_Balloc>
 800abda:	4605      	mov	r5, r0
 800abdc:	b948      	cbnz	r0, 800abf2 <__lshift+0x3e>
 800abde:	4602      	mov	r2, r0
 800abe0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800abe4:	4b27      	ldr	r3, [pc, #156]	@ (800ac84 <__lshift+0xd0>)
 800abe6:	4828      	ldr	r0, [pc, #160]	@ (800ac88 <__lshift+0xd4>)
 800abe8:	f000 fb90 	bl	800b30c <__assert_func>
 800abec:	3101      	adds	r1, #1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	e7ee      	b.n	800abd0 <__lshift+0x1c>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f100 0114 	add.w	r1, r0, #20
 800abf8:	f100 0210 	add.w	r2, r0, #16
 800abfc:	4618      	mov	r0, r3
 800abfe:	4553      	cmp	r3, sl
 800ac00:	db33      	blt.n	800ac6a <__lshift+0xb6>
 800ac02:	6920      	ldr	r0, [r4, #16]
 800ac04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac08:	f104 0314 	add.w	r3, r4, #20
 800ac0c:	f019 091f 	ands.w	r9, r9, #31
 800ac10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac18:	d02b      	beq.n	800ac72 <__lshift+0xbe>
 800ac1a:	468a      	mov	sl, r1
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	fa00 f009 	lsl.w	r0, r0, r9
 800ac28:	4310      	orrs	r0, r2
 800ac2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	459c      	cmp	ip, r3
 800ac34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac38:	d8f3      	bhi.n	800ac22 <__lshift+0x6e>
 800ac3a:	ebac 0304 	sub.w	r3, ip, r4
 800ac3e:	3b15      	subs	r3, #21
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	3304      	adds	r3, #4
 800ac46:	f104 0015 	add.w	r0, r4, #21
 800ac4a:	4584      	cmp	ip, r0
 800ac4c:	bf38      	it	cc
 800ac4e:	2304      	movcc	r3, #4
 800ac50:	50ca      	str	r2, [r1, r3]
 800ac52:	b10a      	cbz	r2, 800ac58 <__lshift+0xa4>
 800ac54:	f108 0602 	add.w	r6, r8, #2
 800ac58:	3e01      	subs	r6, #1
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	612e      	str	r6, [r5, #16]
 800ac60:	f7ff fddc 	bl	800a81c <_Bfree>
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac6e:	3301      	adds	r3, #1
 800ac70:	e7c5      	b.n	800abfe <__lshift+0x4a>
 800ac72:	3904      	subs	r1, #4
 800ac74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac78:	459c      	cmp	ip, r3
 800ac7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac7e:	d8f9      	bhi.n	800ac74 <__lshift+0xc0>
 800ac80:	e7ea      	b.n	800ac58 <__lshift+0xa4>
 800ac82:	bf00      	nop
 800ac84:	0800c10f 	.word	0x0800c10f
 800ac88:	0800c120 	.word	0x0800c120

0800ac8c <__mcmp>:
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	690a      	ldr	r2, [r1, #16]
 800ac90:	6900      	ldr	r0, [r0, #16]
 800ac92:	b530      	push	{r4, r5, lr}
 800ac94:	1a80      	subs	r0, r0, r2
 800ac96:	d10e      	bne.n	800acb6 <__mcmp+0x2a>
 800ac98:	3314      	adds	r3, #20
 800ac9a:	3114      	adds	r1, #20
 800ac9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acac:	4295      	cmp	r5, r2
 800acae:	d003      	beq.n	800acb8 <__mcmp+0x2c>
 800acb0:	d205      	bcs.n	800acbe <__mcmp+0x32>
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295
 800acb6:	bd30      	pop	{r4, r5, pc}
 800acb8:	42a3      	cmp	r3, r4
 800acba:	d3f3      	bcc.n	800aca4 <__mcmp+0x18>
 800acbc:	e7fb      	b.n	800acb6 <__mcmp+0x2a>
 800acbe:	2001      	movs	r0, #1
 800acc0:	e7f9      	b.n	800acb6 <__mcmp+0x2a>
	...

0800acc4 <__mdiff>:
 800acc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	4689      	mov	r9, r1
 800acca:	4606      	mov	r6, r0
 800accc:	4611      	mov	r1, r2
 800acce:	4648      	mov	r0, r9
 800acd0:	4614      	mov	r4, r2
 800acd2:	f7ff ffdb 	bl	800ac8c <__mcmp>
 800acd6:	1e05      	subs	r5, r0, #0
 800acd8:	d112      	bne.n	800ad00 <__mdiff+0x3c>
 800acda:	4629      	mov	r1, r5
 800acdc:	4630      	mov	r0, r6
 800acde:	f7ff fd5d 	bl	800a79c <_Balloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	b928      	cbnz	r0, 800acf2 <__mdiff+0x2e>
 800ace6:	f240 2137 	movw	r1, #567	@ 0x237
 800acea:	4b3e      	ldr	r3, [pc, #248]	@ (800ade4 <__mdiff+0x120>)
 800acec:	483e      	ldr	r0, [pc, #248]	@ (800ade8 <__mdiff+0x124>)
 800acee:	f000 fb0d 	bl	800b30c <__assert_func>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acf8:	4610      	mov	r0, r2
 800acfa:	b003      	add	sp, #12
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	bfbc      	itt	lt
 800ad02:	464b      	movlt	r3, r9
 800ad04:	46a1      	movlt	r9, r4
 800ad06:	4630      	mov	r0, r6
 800ad08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad0c:	bfba      	itte	lt
 800ad0e:	461c      	movlt	r4, r3
 800ad10:	2501      	movlt	r5, #1
 800ad12:	2500      	movge	r5, #0
 800ad14:	f7ff fd42 	bl	800a79c <_Balloc>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	b918      	cbnz	r0, 800ad24 <__mdiff+0x60>
 800ad1c:	f240 2145 	movw	r1, #581	@ 0x245
 800ad20:	4b30      	ldr	r3, [pc, #192]	@ (800ade4 <__mdiff+0x120>)
 800ad22:	e7e3      	b.n	800acec <__mdiff+0x28>
 800ad24:	f100 0b14 	add.w	fp, r0, #20
 800ad28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad2c:	f109 0310 	add.w	r3, r9, #16
 800ad30:	60c5      	str	r5, [r0, #12]
 800ad32:	f04f 0c00 	mov.w	ip, #0
 800ad36:	f109 0514 	add.w	r5, r9, #20
 800ad3a:	46d9      	mov	r9, fp
 800ad3c:	6926      	ldr	r6, [r4, #16]
 800ad3e:	f104 0e14 	add.w	lr, r4, #20
 800ad42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad4a:	9301      	str	r3, [sp, #4]
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad56:	b281      	uxth	r1, r0
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	fa1f f38a 	uxth.w	r3, sl
 800ad5e:	1a5b      	subs	r3, r3, r1
 800ad60:	0c00      	lsrs	r0, r0, #16
 800ad62:	4463      	add	r3, ip
 800ad64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad72:	4576      	cmp	r6, lr
 800ad74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad78:	f849 3b04 	str.w	r3, [r9], #4
 800ad7c:	d8e6      	bhi.n	800ad4c <__mdiff+0x88>
 800ad7e:	1b33      	subs	r3, r6, r4
 800ad80:	3b15      	subs	r3, #21
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	3415      	adds	r4, #21
 800ad88:	3304      	adds	r3, #4
 800ad8a:	42a6      	cmp	r6, r4
 800ad8c:	bf38      	it	cc
 800ad8e:	2304      	movcc	r3, #4
 800ad90:	441d      	add	r5, r3
 800ad92:	445b      	add	r3, fp
 800ad94:	461e      	mov	r6, r3
 800ad96:	462c      	mov	r4, r5
 800ad98:	4544      	cmp	r4, r8
 800ad9a:	d30e      	bcc.n	800adba <__mdiff+0xf6>
 800ad9c:	f108 0103 	add.w	r1, r8, #3
 800ada0:	1b49      	subs	r1, r1, r5
 800ada2:	f021 0103 	bic.w	r1, r1, #3
 800ada6:	3d03      	subs	r5, #3
 800ada8:	45a8      	cmp	r8, r5
 800adaa:	bf38      	it	cc
 800adac:	2100      	movcc	r1, #0
 800adae:	440b      	add	r3, r1
 800adb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adb4:	b199      	cbz	r1, 800adde <__mdiff+0x11a>
 800adb6:	6117      	str	r7, [r2, #16]
 800adb8:	e79e      	b.n	800acf8 <__mdiff+0x34>
 800adba:	46e6      	mov	lr, ip
 800adbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800adc0:	fa1f fc81 	uxth.w	ip, r1
 800adc4:	44f4      	add	ip, lr
 800adc6:	0c08      	lsrs	r0, r1, #16
 800adc8:	4471      	add	r1, lr
 800adca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800adce:	b289      	uxth	r1, r1
 800add0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800add4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800add8:	f846 1b04 	str.w	r1, [r6], #4
 800addc:	e7dc      	b.n	800ad98 <__mdiff+0xd4>
 800adde:	3f01      	subs	r7, #1
 800ade0:	e7e6      	b.n	800adb0 <__mdiff+0xec>
 800ade2:	bf00      	nop
 800ade4:	0800c10f 	.word	0x0800c10f
 800ade8:	0800c120 	.word	0x0800c120

0800adec <__d2b>:
 800adec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800adf0:	2101      	movs	r1, #1
 800adf2:	4690      	mov	r8, r2
 800adf4:	4699      	mov	r9, r3
 800adf6:	9e08      	ldr	r6, [sp, #32]
 800adf8:	f7ff fcd0 	bl	800a79c <_Balloc>
 800adfc:	4604      	mov	r4, r0
 800adfe:	b930      	cbnz	r0, 800ae0e <__d2b+0x22>
 800ae00:	4602      	mov	r2, r0
 800ae02:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae06:	4b23      	ldr	r3, [pc, #140]	@ (800ae94 <__d2b+0xa8>)
 800ae08:	4823      	ldr	r0, [pc, #140]	@ (800ae98 <__d2b+0xac>)
 800ae0a:	f000 fa7f 	bl	800b30c <__assert_func>
 800ae0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae16:	b10d      	cbz	r5, 800ae1c <__d2b+0x30>
 800ae18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	f1b8 0300 	subs.w	r3, r8, #0
 800ae22:	d024      	beq.n	800ae6e <__d2b+0x82>
 800ae24:	4668      	mov	r0, sp
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	f7ff fd7f 	bl	800a92a <__lo0bits>
 800ae2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae30:	b1d8      	cbz	r0, 800ae6a <__d2b+0x7e>
 800ae32:	f1c0 0320 	rsb	r3, r0, #32
 800ae36:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	40c2      	lsrs	r2, r0
 800ae3e:	6163      	str	r3, [r4, #20]
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bf0c      	ite	eq
 800ae48:	2201      	moveq	r2, #1
 800ae4a:	2202      	movne	r2, #2
 800ae4c:	61a3      	str	r3, [r4, #24]
 800ae4e:	6122      	str	r2, [r4, #16]
 800ae50:	b1ad      	cbz	r5, 800ae7e <__d2b+0x92>
 800ae52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae56:	4405      	add	r5, r0
 800ae58:	6035      	str	r5, [r6, #0]
 800ae5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae60:	6018      	str	r0, [r3, #0]
 800ae62:	4620      	mov	r0, r4
 800ae64:	b002      	add	sp, #8
 800ae66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ae6a:	6161      	str	r1, [r4, #20]
 800ae6c:	e7e9      	b.n	800ae42 <__d2b+0x56>
 800ae6e:	a801      	add	r0, sp, #4
 800ae70:	f7ff fd5b 	bl	800a92a <__lo0bits>
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	6163      	str	r3, [r4, #20]
 800ae7a:	3020      	adds	r0, #32
 800ae7c:	e7e7      	b.n	800ae4e <__d2b+0x62>
 800ae7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae86:	6030      	str	r0, [r6, #0]
 800ae88:	6918      	ldr	r0, [r3, #16]
 800ae8a:	f7ff fd2f 	bl	800a8ec <__hi0bits>
 800ae8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae92:	e7e4      	b.n	800ae5e <__d2b+0x72>
 800ae94:	0800c10f 	.word	0x0800c10f
 800ae98:	0800c120 	.word	0x0800c120

0800ae9c <__ssputs_r>:
 800ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	461f      	mov	r7, r3
 800aea2:	688e      	ldr	r6, [r1, #8]
 800aea4:	4682      	mov	sl, r0
 800aea6:	42be      	cmp	r6, r7
 800aea8:	460c      	mov	r4, r1
 800aeaa:	4690      	mov	r8, r2
 800aeac:	680b      	ldr	r3, [r1, #0]
 800aeae:	d82d      	bhi.n	800af0c <__ssputs_r+0x70>
 800aeb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aeb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aeb8:	d026      	beq.n	800af08 <__ssputs_r+0x6c>
 800aeba:	6965      	ldr	r5, [r4, #20]
 800aebc:	6909      	ldr	r1, [r1, #16]
 800aebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aec2:	eba3 0901 	sub.w	r9, r3, r1
 800aec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeca:	1c7b      	adds	r3, r7, #1
 800aecc:	444b      	add	r3, r9
 800aece:	106d      	asrs	r5, r5, #1
 800aed0:	429d      	cmp	r5, r3
 800aed2:	bf38      	it	cc
 800aed4:	461d      	movcc	r5, r3
 800aed6:	0553      	lsls	r3, r2, #21
 800aed8:	d527      	bpl.n	800af2a <__ssputs_r+0x8e>
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7ff fbd2 	bl	800a684 <_malloc_r>
 800aee0:	4606      	mov	r6, r0
 800aee2:	b360      	cbz	r0, 800af3e <__ssputs_r+0xa2>
 800aee4:	464a      	mov	r2, r9
 800aee6:	6921      	ldr	r1, [r4, #16]
 800aee8:	f000 fa02 	bl	800b2f0 <memcpy>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	6126      	str	r6, [r4, #16]
 800aefa:	444e      	add	r6, r9
 800aefc:	6026      	str	r6, [r4, #0]
 800aefe:	463e      	mov	r6, r7
 800af00:	6165      	str	r5, [r4, #20]
 800af02:	eba5 0509 	sub.w	r5, r5, r9
 800af06:	60a5      	str	r5, [r4, #8]
 800af08:	42be      	cmp	r6, r7
 800af0a:	d900      	bls.n	800af0e <__ssputs_r+0x72>
 800af0c:	463e      	mov	r6, r7
 800af0e:	4632      	mov	r2, r6
 800af10:	4641      	mov	r1, r8
 800af12:	6820      	ldr	r0, [r4, #0]
 800af14:	f000 f9c2 	bl	800b29c <memmove>
 800af18:	2000      	movs	r0, #0
 800af1a:	68a3      	ldr	r3, [r4, #8]
 800af1c:	1b9b      	subs	r3, r3, r6
 800af1e:	60a3      	str	r3, [r4, #8]
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	4433      	add	r3, r6
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2a:	462a      	mov	r2, r5
 800af2c:	f000 fa32 	bl	800b394 <_realloc_r>
 800af30:	4606      	mov	r6, r0
 800af32:	2800      	cmp	r0, #0
 800af34:	d1e0      	bne.n	800aef8 <__ssputs_r+0x5c>
 800af36:	4650      	mov	r0, sl
 800af38:	6921      	ldr	r1, [r4, #16]
 800af3a:	f7ff fb31 	bl	800a5a0 <_free_r>
 800af3e:	230c      	movs	r3, #12
 800af40:	f8ca 3000 	str.w	r3, [sl]
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f04f 30ff 	mov.w	r0, #4294967295
 800af4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	e7e9      	b.n	800af26 <__ssputs_r+0x8a>
	...

0800af54 <_svfiprintf_r>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4698      	mov	r8, r3
 800af5a:	898b      	ldrh	r3, [r1, #12]
 800af5c:	4607      	mov	r7, r0
 800af5e:	061b      	lsls	r3, r3, #24
 800af60:	460d      	mov	r5, r1
 800af62:	4614      	mov	r4, r2
 800af64:	b09d      	sub	sp, #116	@ 0x74
 800af66:	d510      	bpl.n	800af8a <_svfiprintf_r+0x36>
 800af68:	690b      	ldr	r3, [r1, #16]
 800af6a:	b973      	cbnz	r3, 800af8a <_svfiprintf_r+0x36>
 800af6c:	2140      	movs	r1, #64	@ 0x40
 800af6e:	f7ff fb89 	bl	800a684 <_malloc_r>
 800af72:	6028      	str	r0, [r5, #0]
 800af74:	6128      	str	r0, [r5, #16]
 800af76:	b930      	cbnz	r0, 800af86 <_svfiprintf_r+0x32>
 800af78:	230c      	movs	r3, #12
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	b01d      	add	sp, #116	@ 0x74
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	2340      	movs	r3, #64	@ 0x40
 800af88:	616b      	str	r3, [r5, #20]
 800af8a:	2300      	movs	r3, #0
 800af8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8e:	2320      	movs	r3, #32
 800af90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af94:	2330      	movs	r3, #48	@ 0x30
 800af96:	f04f 0901 	mov.w	r9, #1
 800af9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b138 <_svfiprintf_r+0x1e4>
 800afa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afa6:	4623      	mov	r3, r4
 800afa8:	469a      	mov	sl, r3
 800afaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afae:	b10a      	cbz	r2, 800afb4 <_svfiprintf_r+0x60>
 800afb0:	2a25      	cmp	r2, #37	@ 0x25
 800afb2:	d1f9      	bne.n	800afa8 <_svfiprintf_r+0x54>
 800afb4:	ebba 0b04 	subs.w	fp, sl, r4
 800afb8:	d00b      	beq.n	800afd2 <_svfiprintf_r+0x7e>
 800afba:	465b      	mov	r3, fp
 800afbc:	4622      	mov	r2, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	4638      	mov	r0, r7
 800afc2:	f7ff ff6b 	bl	800ae9c <__ssputs_r>
 800afc6:	3001      	adds	r0, #1
 800afc8:	f000 80a7 	beq.w	800b11a <_svfiprintf_r+0x1c6>
 800afcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afce:	445a      	add	r2, fp
 800afd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd2:	f89a 3000 	ldrb.w	r3, [sl]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 809f 	beq.w	800b11a <_svfiprintf_r+0x1c6>
 800afdc:	2300      	movs	r3, #0
 800afde:	f04f 32ff 	mov.w	r2, #4294967295
 800afe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe6:	f10a 0a01 	add.w	sl, sl, #1
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	9307      	str	r3, [sp, #28]
 800afee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aff2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aff4:	4654      	mov	r4, sl
 800aff6:	2205      	movs	r2, #5
 800aff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affc:	484e      	ldr	r0, [pc, #312]	@ (800b138 <_svfiprintf_r+0x1e4>)
 800affe:	f7fe fc6e 	bl	80098de <memchr>
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	b9d8      	cbnz	r0, 800b03e <_svfiprintf_r+0xea>
 800b006:	06d0      	lsls	r0, r2, #27
 800b008:	bf44      	itt	mi
 800b00a:	2320      	movmi	r3, #32
 800b00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b010:	0711      	lsls	r1, r2, #28
 800b012:	bf44      	itt	mi
 800b014:	232b      	movmi	r3, #43	@ 0x2b
 800b016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b01a:	f89a 3000 	ldrb.w	r3, [sl]
 800b01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b020:	d015      	beq.n	800b04e <_svfiprintf_r+0xfa>
 800b022:	4654      	mov	r4, sl
 800b024:	2000      	movs	r0, #0
 800b026:	f04f 0c0a 	mov.w	ip, #10
 800b02a:	9a07      	ldr	r2, [sp, #28]
 800b02c:	4621      	mov	r1, r4
 800b02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b032:	3b30      	subs	r3, #48	@ 0x30
 800b034:	2b09      	cmp	r3, #9
 800b036:	d94b      	bls.n	800b0d0 <_svfiprintf_r+0x17c>
 800b038:	b1b0      	cbz	r0, 800b068 <_svfiprintf_r+0x114>
 800b03a:	9207      	str	r2, [sp, #28]
 800b03c:	e014      	b.n	800b068 <_svfiprintf_r+0x114>
 800b03e:	eba0 0308 	sub.w	r3, r0, r8
 800b042:	fa09 f303 	lsl.w	r3, r9, r3
 800b046:	4313      	orrs	r3, r2
 800b048:	46a2      	mov	sl, r4
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	e7d2      	b.n	800aff4 <_svfiprintf_r+0xa0>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	1d19      	adds	r1, r3, #4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	9103      	str	r1, [sp, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	bfbb      	ittet	lt
 800b05a:	425b      	neglt	r3, r3
 800b05c:	f042 0202 	orrlt.w	r2, r2, #2
 800b060:	9307      	strge	r3, [sp, #28]
 800b062:	9307      	strlt	r3, [sp, #28]
 800b064:	bfb8      	it	lt
 800b066:	9204      	strlt	r2, [sp, #16]
 800b068:	7823      	ldrb	r3, [r4, #0]
 800b06a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b06c:	d10a      	bne.n	800b084 <_svfiprintf_r+0x130>
 800b06e:	7863      	ldrb	r3, [r4, #1]
 800b070:	2b2a      	cmp	r3, #42	@ 0x2a
 800b072:	d132      	bne.n	800b0da <_svfiprintf_r+0x186>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	3402      	adds	r4, #2
 800b078:	1d1a      	adds	r2, r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	9203      	str	r2, [sp, #12]
 800b07e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b13c <_svfiprintf_r+0x1e8>
 800b088:	2203      	movs	r2, #3
 800b08a:	4650      	mov	r0, sl
 800b08c:	7821      	ldrb	r1, [r4, #0]
 800b08e:	f7fe fc26 	bl	80098de <memchr>
 800b092:	b138      	cbz	r0, 800b0a4 <_svfiprintf_r+0x150>
 800b094:	2240      	movs	r2, #64	@ 0x40
 800b096:	9b04      	ldr	r3, [sp, #16]
 800b098:	eba0 000a 	sub.w	r0, r0, sl
 800b09c:	4082      	lsls	r2, r0
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a8:	2206      	movs	r2, #6
 800b0aa:	4825      	ldr	r0, [pc, #148]	@ (800b140 <_svfiprintf_r+0x1ec>)
 800b0ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0b0:	f7fe fc15 	bl	80098de <memchr>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d036      	beq.n	800b126 <_svfiprintf_r+0x1d2>
 800b0b8:	4b22      	ldr	r3, [pc, #136]	@ (800b144 <_svfiprintf_r+0x1f0>)
 800b0ba:	bb1b      	cbnz	r3, 800b104 <_svfiprintf_r+0x1b0>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	3307      	adds	r3, #7
 800b0c0:	f023 0307 	bic.w	r3, r3, #7
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	9303      	str	r3, [sp, #12]
 800b0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ca:	4433      	add	r3, r6
 800b0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ce:	e76a      	b.n	800afa6 <_svfiprintf_r+0x52>
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d8:	e7a8      	b.n	800b02c <_svfiprintf_r+0xd8>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f04f 0c0a 	mov.w	ip, #10
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ec:	3a30      	subs	r2, #48	@ 0x30
 800b0ee:	2a09      	cmp	r2, #9
 800b0f0:	d903      	bls.n	800b0fa <_svfiprintf_r+0x1a6>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0c6      	beq.n	800b084 <_svfiprintf_r+0x130>
 800b0f6:	9105      	str	r1, [sp, #20]
 800b0f8:	e7c4      	b.n	800b084 <_svfiprintf_r+0x130>
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b102:	e7f0      	b.n	800b0e6 <_svfiprintf_r+0x192>
 800b104:	ab03      	add	r3, sp, #12
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	462a      	mov	r2, r5
 800b10a:	4638      	mov	r0, r7
 800b10c:	4b0e      	ldr	r3, [pc, #56]	@ (800b148 <_svfiprintf_r+0x1f4>)
 800b10e:	a904      	add	r1, sp, #16
 800b110:	f7fd fe4a 	bl	8008da8 <_printf_float>
 800b114:	1c42      	adds	r2, r0, #1
 800b116:	4606      	mov	r6, r0
 800b118:	d1d6      	bne.n	800b0c8 <_svfiprintf_r+0x174>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	065b      	lsls	r3, r3, #25
 800b11e:	f53f af2d 	bmi.w	800af7c <_svfiprintf_r+0x28>
 800b122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b124:	e72c      	b.n	800af80 <_svfiprintf_r+0x2c>
 800b126:	ab03      	add	r3, sp, #12
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	462a      	mov	r2, r5
 800b12c:	4638      	mov	r0, r7
 800b12e:	4b06      	ldr	r3, [pc, #24]	@ (800b148 <_svfiprintf_r+0x1f4>)
 800b130:	a904      	add	r1, sp, #16
 800b132:	f7fe f8d7 	bl	80092e4 <_printf_i>
 800b136:	e7ed      	b.n	800b114 <_svfiprintf_r+0x1c0>
 800b138:	0800c278 	.word	0x0800c278
 800b13c:	0800c27e 	.word	0x0800c27e
 800b140:	0800c282 	.word	0x0800c282
 800b144:	08008da9 	.word	0x08008da9
 800b148:	0800ae9d 	.word	0x0800ae9d

0800b14c <__sflush_r>:
 800b14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	0716      	lsls	r6, r2, #28
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	d454      	bmi.n	800b204 <__sflush_r+0xb8>
 800b15a:	684b      	ldr	r3, [r1, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc02      	bgt.n	800b166 <__sflush_r+0x1a>
 800b160:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	dd48      	ble.n	800b1f8 <__sflush_r+0xac>
 800b166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b168:	2e00      	cmp	r6, #0
 800b16a:	d045      	beq.n	800b1f8 <__sflush_r+0xac>
 800b16c:	2300      	movs	r3, #0
 800b16e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b172:	682f      	ldr	r7, [r5, #0]
 800b174:	6a21      	ldr	r1, [r4, #32]
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	d030      	beq.n	800b1dc <__sflush_r+0x90>
 800b17a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	0759      	lsls	r1, r3, #29
 800b180:	d505      	bpl.n	800b18e <__sflush_r+0x42>
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	1ad2      	subs	r2, r2, r3
 800b186:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b188:	b10b      	cbz	r3, 800b18e <__sflush_r+0x42>
 800b18a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b18c:	1ad2      	subs	r2, r2, r3
 800b18e:	2300      	movs	r3, #0
 800b190:	4628      	mov	r0, r5
 800b192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b194:	6a21      	ldr	r1, [r4, #32]
 800b196:	47b0      	blx	r6
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	d106      	bne.n	800b1ac <__sflush_r+0x60>
 800b19e:	6829      	ldr	r1, [r5, #0]
 800b1a0:	291d      	cmp	r1, #29
 800b1a2:	d82b      	bhi.n	800b1fc <__sflush_r+0xb0>
 800b1a4:	4a28      	ldr	r2, [pc, #160]	@ (800b248 <__sflush_r+0xfc>)
 800b1a6:	410a      	asrs	r2, r1
 800b1a8:	07d6      	lsls	r6, r2, #31
 800b1aa:	d427      	bmi.n	800b1fc <__sflush_r+0xb0>
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	6062      	str	r2, [r4, #4]
 800b1b0:	6922      	ldr	r2, [r4, #16]
 800b1b2:	04d9      	lsls	r1, r3, #19
 800b1b4:	6022      	str	r2, [r4, #0]
 800b1b6:	d504      	bpl.n	800b1c2 <__sflush_r+0x76>
 800b1b8:	1c42      	adds	r2, r0, #1
 800b1ba:	d101      	bne.n	800b1c0 <__sflush_r+0x74>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b903      	cbnz	r3, 800b1c2 <__sflush_r+0x76>
 800b1c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1c4:	602f      	str	r7, [r5, #0]
 800b1c6:	b1b9      	cbz	r1, 800b1f8 <__sflush_r+0xac>
 800b1c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1cc:	4299      	cmp	r1, r3
 800b1ce:	d002      	beq.n	800b1d6 <__sflush_r+0x8a>
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f7ff f9e5 	bl	800a5a0 <_free_r>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1da:	e00d      	b.n	800b1f8 <__sflush_r+0xac>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	4628      	mov	r0, r5
 800b1e0:	47b0      	blx	r6
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	1c50      	adds	r0, r2, #1
 800b1e6:	d1c9      	bne.n	800b17c <__sflush_r+0x30>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0c6      	beq.n	800b17c <__sflush_r+0x30>
 800b1ee:	2b1d      	cmp	r3, #29
 800b1f0:	d001      	beq.n	800b1f6 <__sflush_r+0xaa>
 800b1f2:	2b16      	cmp	r3, #22
 800b1f4:	d11d      	bne.n	800b232 <__sflush_r+0xe6>
 800b1f6:	602f      	str	r7, [r5, #0]
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e021      	b.n	800b240 <__sflush_r+0xf4>
 800b1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b200:	b21b      	sxth	r3, r3
 800b202:	e01a      	b.n	800b23a <__sflush_r+0xee>
 800b204:	690f      	ldr	r7, [r1, #16]
 800b206:	2f00      	cmp	r7, #0
 800b208:	d0f6      	beq.n	800b1f8 <__sflush_r+0xac>
 800b20a:	0793      	lsls	r3, r2, #30
 800b20c:	bf18      	it	ne
 800b20e:	2300      	movne	r3, #0
 800b210:	680e      	ldr	r6, [r1, #0]
 800b212:	bf08      	it	eq
 800b214:	694b      	ldreq	r3, [r1, #20]
 800b216:	1bf6      	subs	r6, r6, r7
 800b218:	600f      	str	r7, [r1, #0]
 800b21a:	608b      	str	r3, [r1, #8]
 800b21c:	2e00      	cmp	r6, #0
 800b21e:	ddeb      	ble.n	800b1f8 <__sflush_r+0xac>
 800b220:	4633      	mov	r3, r6
 800b222:	463a      	mov	r2, r7
 800b224:	4628      	mov	r0, r5
 800b226:	6a21      	ldr	r1, [r4, #32]
 800b228:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b22c:	47e0      	blx	ip
 800b22e:	2800      	cmp	r0, #0
 800b230:	dc07      	bgt.n	800b242 <__sflush_r+0xf6>
 800b232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b23a:	f04f 30ff 	mov.w	r0, #4294967295
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b242:	4407      	add	r7, r0
 800b244:	1a36      	subs	r6, r6, r0
 800b246:	e7e9      	b.n	800b21c <__sflush_r+0xd0>
 800b248:	dfbffffe 	.word	0xdfbffffe

0800b24c <_fflush_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	690b      	ldr	r3, [r1, #16]
 800b250:	4605      	mov	r5, r0
 800b252:	460c      	mov	r4, r1
 800b254:	b913      	cbnz	r3, 800b25c <_fflush_r+0x10>
 800b256:	2500      	movs	r5, #0
 800b258:	4628      	mov	r0, r5
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	b118      	cbz	r0, 800b266 <_fflush_r+0x1a>
 800b25e:	6a03      	ldr	r3, [r0, #32]
 800b260:	b90b      	cbnz	r3, 800b266 <_fflush_r+0x1a>
 800b262:	f7fe f9eb 	bl	800963c <__sinit>
 800b266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0f3      	beq.n	800b256 <_fflush_r+0xa>
 800b26e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b270:	07d0      	lsls	r0, r2, #31
 800b272:	d404      	bmi.n	800b27e <_fflush_r+0x32>
 800b274:	0599      	lsls	r1, r3, #22
 800b276:	d402      	bmi.n	800b27e <_fflush_r+0x32>
 800b278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b27a:	f7fe fb2e 	bl	80098da <__retarget_lock_acquire_recursive>
 800b27e:	4628      	mov	r0, r5
 800b280:	4621      	mov	r1, r4
 800b282:	f7ff ff63 	bl	800b14c <__sflush_r>
 800b286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b288:	4605      	mov	r5, r0
 800b28a:	07da      	lsls	r2, r3, #31
 800b28c:	d4e4      	bmi.n	800b258 <_fflush_r+0xc>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	059b      	lsls	r3, r3, #22
 800b292:	d4e1      	bmi.n	800b258 <_fflush_r+0xc>
 800b294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b296:	f7fe fb21 	bl	80098dc <__retarget_lock_release_recursive>
 800b29a:	e7dd      	b.n	800b258 <_fflush_r+0xc>

0800b29c <memmove>:
 800b29c:	4288      	cmp	r0, r1
 800b29e:	b510      	push	{r4, lr}
 800b2a0:	eb01 0402 	add.w	r4, r1, r2
 800b2a4:	d902      	bls.n	800b2ac <memmove+0x10>
 800b2a6:	4284      	cmp	r4, r0
 800b2a8:	4623      	mov	r3, r4
 800b2aa:	d807      	bhi.n	800b2bc <memmove+0x20>
 800b2ac:	1e43      	subs	r3, r0, #1
 800b2ae:	42a1      	cmp	r1, r4
 800b2b0:	d008      	beq.n	800b2c4 <memmove+0x28>
 800b2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2ba:	e7f8      	b.n	800b2ae <memmove+0x12>
 800b2bc:	4601      	mov	r1, r0
 800b2be:	4402      	add	r2, r0
 800b2c0:	428a      	cmp	r2, r1
 800b2c2:	d100      	bne.n	800b2c6 <memmove+0x2a>
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2ce:	e7f7      	b.n	800b2c0 <memmove+0x24>

0800b2d0 <_sbrk_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4d05      	ldr	r5, [pc, #20]	@ (800b2ec <_sbrk_r+0x1c>)
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	602b      	str	r3, [r5, #0]
 800b2dc:	f7fa f8ba 	bl	8005454 <_sbrk>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_sbrk_r+0x1a>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_sbrk_r+0x1a>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	20000f58 	.word	0x20000f58

0800b2f0 <memcpy>:
 800b2f0:	440a      	add	r2, r1
 800b2f2:	4291      	cmp	r1, r2
 800b2f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2f8:	d100      	bne.n	800b2fc <memcpy+0xc>
 800b2fa:	4770      	bx	lr
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b302:	4291      	cmp	r1, r2
 800b304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b308:	d1f9      	bne.n	800b2fe <memcpy+0xe>
 800b30a:	bd10      	pop	{r4, pc}

0800b30c <__assert_func>:
 800b30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b30e:	4614      	mov	r4, r2
 800b310:	461a      	mov	r2, r3
 800b312:	4b09      	ldr	r3, [pc, #36]	@ (800b338 <__assert_func+0x2c>)
 800b314:	4605      	mov	r5, r0
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68d8      	ldr	r0, [r3, #12]
 800b31a:	b954      	cbnz	r4, 800b332 <__assert_func+0x26>
 800b31c:	4b07      	ldr	r3, [pc, #28]	@ (800b33c <__assert_func+0x30>)
 800b31e:	461c      	mov	r4, r3
 800b320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b324:	9100      	str	r1, [sp, #0]
 800b326:	462b      	mov	r3, r5
 800b328:	4905      	ldr	r1, [pc, #20]	@ (800b340 <__assert_func+0x34>)
 800b32a:	f000 f86f 	bl	800b40c <fiprintf>
 800b32e:	f000 f87f 	bl	800b430 <abort>
 800b332:	4b04      	ldr	r3, [pc, #16]	@ (800b344 <__assert_func+0x38>)
 800b334:	e7f4      	b.n	800b320 <__assert_func+0x14>
 800b336:	bf00      	nop
 800b338:	20000078 	.word	0x20000078
 800b33c:	0800c2ce 	.word	0x0800c2ce
 800b340:	0800c2a0 	.word	0x0800c2a0
 800b344:	0800c293 	.word	0x0800c293

0800b348 <_calloc_r>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	fba1 5402 	umull	r5, r4, r1, r2
 800b34e:	b93c      	cbnz	r4, 800b360 <_calloc_r+0x18>
 800b350:	4629      	mov	r1, r5
 800b352:	f7ff f997 	bl	800a684 <_malloc_r>
 800b356:	4606      	mov	r6, r0
 800b358:	b928      	cbnz	r0, 800b366 <_calloc_r+0x1e>
 800b35a:	2600      	movs	r6, #0
 800b35c:	4630      	mov	r0, r6
 800b35e:	bd70      	pop	{r4, r5, r6, pc}
 800b360:	220c      	movs	r2, #12
 800b362:	6002      	str	r2, [r0, #0]
 800b364:	e7f9      	b.n	800b35a <_calloc_r+0x12>
 800b366:	462a      	mov	r2, r5
 800b368:	4621      	mov	r1, r4
 800b36a:	f7fe fa39 	bl	80097e0 <memset>
 800b36e:	e7f5      	b.n	800b35c <_calloc_r+0x14>

0800b370 <__ascii_mbtowc>:
 800b370:	b082      	sub	sp, #8
 800b372:	b901      	cbnz	r1, 800b376 <__ascii_mbtowc+0x6>
 800b374:	a901      	add	r1, sp, #4
 800b376:	b142      	cbz	r2, 800b38a <__ascii_mbtowc+0x1a>
 800b378:	b14b      	cbz	r3, 800b38e <__ascii_mbtowc+0x1e>
 800b37a:	7813      	ldrb	r3, [r2, #0]
 800b37c:	600b      	str	r3, [r1, #0]
 800b37e:	7812      	ldrb	r2, [r2, #0]
 800b380:	1e10      	subs	r0, r2, #0
 800b382:	bf18      	it	ne
 800b384:	2001      	movne	r0, #1
 800b386:	b002      	add	sp, #8
 800b388:	4770      	bx	lr
 800b38a:	4610      	mov	r0, r2
 800b38c:	e7fb      	b.n	800b386 <__ascii_mbtowc+0x16>
 800b38e:	f06f 0001 	mvn.w	r0, #1
 800b392:	e7f8      	b.n	800b386 <__ascii_mbtowc+0x16>

0800b394 <_realloc_r>:
 800b394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b398:	4680      	mov	r8, r0
 800b39a:	4615      	mov	r5, r2
 800b39c:	460c      	mov	r4, r1
 800b39e:	b921      	cbnz	r1, 800b3aa <_realloc_r+0x16>
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a6:	f7ff b96d 	b.w	800a684 <_malloc_r>
 800b3aa:	b92a      	cbnz	r2, 800b3b8 <_realloc_r+0x24>
 800b3ac:	f7ff f8f8 	bl	800a5a0 <_free_r>
 800b3b0:	2400      	movs	r4, #0
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b8:	f000 f841 	bl	800b43e <_malloc_usable_size_r>
 800b3bc:	4285      	cmp	r5, r0
 800b3be:	4606      	mov	r6, r0
 800b3c0:	d802      	bhi.n	800b3c8 <_realloc_r+0x34>
 800b3c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3c6:	d8f4      	bhi.n	800b3b2 <_realloc_r+0x1e>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	f7ff f95a 	bl	800a684 <_malloc_r>
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d0ec      	beq.n	800b3b0 <_realloc_r+0x1c>
 800b3d6:	42b5      	cmp	r5, r6
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4621      	mov	r1, r4
 800b3dc:	bf28      	it	cs
 800b3de:	4632      	movcs	r2, r6
 800b3e0:	f7ff ff86 	bl	800b2f0 <memcpy>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f7ff f8da 	bl	800a5a0 <_free_r>
 800b3ec:	463c      	mov	r4, r7
 800b3ee:	e7e0      	b.n	800b3b2 <_realloc_r+0x1e>

0800b3f0 <__ascii_wctomb>:
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	4608      	mov	r0, r1
 800b3f4:	b141      	cbz	r1, 800b408 <__ascii_wctomb+0x18>
 800b3f6:	2aff      	cmp	r2, #255	@ 0xff
 800b3f8:	d904      	bls.n	800b404 <__ascii_wctomb+0x14>
 800b3fa:	228a      	movs	r2, #138	@ 0x8a
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	4770      	bx	lr
 800b404:	2001      	movs	r0, #1
 800b406:	700a      	strb	r2, [r1, #0]
 800b408:	4770      	bx	lr
	...

0800b40c <fiprintf>:
 800b40c:	b40e      	push	{r1, r2, r3}
 800b40e:	b503      	push	{r0, r1, lr}
 800b410:	4601      	mov	r1, r0
 800b412:	ab03      	add	r3, sp, #12
 800b414:	4805      	ldr	r0, [pc, #20]	@ (800b42c <fiprintf+0x20>)
 800b416:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	f000 f83d 	bl	800b49c <_vfiprintf_r>
 800b422:	b002      	add	sp, #8
 800b424:	f85d eb04 	ldr.w	lr, [sp], #4
 800b428:	b003      	add	sp, #12
 800b42a:	4770      	bx	lr
 800b42c:	20000078 	.word	0x20000078

0800b430 <abort>:
 800b430:	2006      	movs	r0, #6
 800b432:	b508      	push	{r3, lr}
 800b434:	f000 fa06 	bl	800b844 <raise>
 800b438:	2001      	movs	r0, #1
 800b43a:	f7f9 ff96 	bl	800536a <_exit>

0800b43e <_malloc_usable_size_r>:
 800b43e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b442:	1f18      	subs	r0, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfbc      	itt	lt
 800b448:	580b      	ldrlt	r3, [r1, r0]
 800b44a:	18c0      	addlt	r0, r0, r3
 800b44c:	4770      	bx	lr

0800b44e <__sfputc_r>:
 800b44e:	6893      	ldr	r3, [r2, #8]
 800b450:	b410      	push	{r4}
 800b452:	3b01      	subs	r3, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	6093      	str	r3, [r2, #8]
 800b458:	da07      	bge.n	800b46a <__sfputc_r+0x1c>
 800b45a:	6994      	ldr	r4, [r2, #24]
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	db01      	blt.n	800b464 <__sfputc_r+0x16>
 800b460:	290a      	cmp	r1, #10
 800b462:	d102      	bne.n	800b46a <__sfputc_r+0x1c>
 800b464:	bc10      	pop	{r4}
 800b466:	f000 b931 	b.w	800b6cc <__swbuf_r>
 800b46a:	6813      	ldr	r3, [r2, #0]
 800b46c:	1c58      	adds	r0, r3, #1
 800b46e:	6010      	str	r0, [r2, #0]
 800b470:	7019      	strb	r1, [r3, #0]
 800b472:	4608      	mov	r0, r1
 800b474:	bc10      	pop	{r4}
 800b476:	4770      	bx	lr

0800b478 <__sfputs_r>:
 800b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47a:	4606      	mov	r6, r0
 800b47c:	460f      	mov	r7, r1
 800b47e:	4614      	mov	r4, r2
 800b480:	18d5      	adds	r5, r2, r3
 800b482:	42ac      	cmp	r4, r5
 800b484:	d101      	bne.n	800b48a <__sfputs_r+0x12>
 800b486:	2000      	movs	r0, #0
 800b488:	e007      	b.n	800b49a <__sfputs_r+0x22>
 800b48a:	463a      	mov	r2, r7
 800b48c:	4630      	mov	r0, r6
 800b48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b492:	f7ff ffdc 	bl	800b44e <__sfputc_r>
 800b496:	1c43      	adds	r3, r0, #1
 800b498:	d1f3      	bne.n	800b482 <__sfputs_r+0xa>
 800b49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b49c <_vfiprintf_r>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	4698      	mov	r8, r3
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	b09d      	sub	sp, #116	@ 0x74
 800b4aa:	b118      	cbz	r0, 800b4b4 <_vfiprintf_r+0x18>
 800b4ac:	6a03      	ldr	r3, [r0, #32]
 800b4ae:	b90b      	cbnz	r3, 800b4b4 <_vfiprintf_r+0x18>
 800b4b0:	f7fe f8c4 	bl	800963c <__sinit>
 800b4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4b6:	07d9      	lsls	r1, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_vfiprintf_r+0x2a>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	059a      	lsls	r2, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_vfiprintf_r+0x2a>
 800b4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4c2:	f7fe fa0a 	bl	80098da <__retarget_lock_acquire_recursive>
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	071b      	lsls	r3, r3, #28
 800b4ca:	d501      	bpl.n	800b4d0 <_vfiprintf_r+0x34>
 800b4cc:	692b      	ldr	r3, [r5, #16]
 800b4ce:	b99b      	cbnz	r3, 800b4f8 <_vfiprintf_r+0x5c>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f000 f938 	bl	800b748 <__swsetup_r>
 800b4d8:	b170      	cbz	r0, 800b4f8 <_vfiprintf_r+0x5c>
 800b4da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4dc:	07dc      	lsls	r4, r3, #31
 800b4de:	d504      	bpl.n	800b4ea <_vfiprintf_r+0x4e>
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	b01d      	add	sp, #116	@ 0x74
 800b4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	0598      	lsls	r0, r3, #22
 800b4ee:	d4f7      	bmi.n	800b4e0 <_vfiprintf_r+0x44>
 800b4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4f2:	f7fe f9f3 	bl	80098dc <__retarget_lock_release_recursive>
 800b4f6:	e7f3      	b.n	800b4e0 <_vfiprintf_r+0x44>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4fc:	2320      	movs	r3, #32
 800b4fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b502:	2330      	movs	r3, #48	@ 0x30
 800b504:	f04f 0901 	mov.w	r9, #1
 800b508:	f8cd 800c 	str.w	r8, [sp, #12]
 800b50c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b6b8 <_vfiprintf_r+0x21c>
 800b510:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b514:	4623      	mov	r3, r4
 800b516:	469a      	mov	sl, r3
 800b518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b51c:	b10a      	cbz	r2, 800b522 <_vfiprintf_r+0x86>
 800b51e:	2a25      	cmp	r2, #37	@ 0x25
 800b520:	d1f9      	bne.n	800b516 <_vfiprintf_r+0x7a>
 800b522:	ebba 0b04 	subs.w	fp, sl, r4
 800b526:	d00b      	beq.n	800b540 <_vfiprintf_r+0xa4>
 800b528:	465b      	mov	r3, fp
 800b52a:	4622      	mov	r2, r4
 800b52c:	4629      	mov	r1, r5
 800b52e:	4630      	mov	r0, r6
 800b530:	f7ff ffa2 	bl	800b478 <__sfputs_r>
 800b534:	3001      	adds	r0, #1
 800b536:	f000 80a7 	beq.w	800b688 <_vfiprintf_r+0x1ec>
 800b53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b53c:	445a      	add	r2, fp
 800b53e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b540:	f89a 3000 	ldrb.w	r3, [sl]
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 809f 	beq.w	800b688 <_vfiprintf_r+0x1ec>
 800b54a:	2300      	movs	r3, #0
 800b54c:	f04f 32ff 	mov.w	r2, #4294967295
 800b550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b554:	f10a 0a01 	add.w	sl, sl, #1
 800b558:	9304      	str	r3, [sp, #16]
 800b55a:	9307      	str	r3, [sp, #28]
 800b55c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b560:	931a      	str	r3, [sp, #104]	@ 0x68
 800b562:	4654      	mov	r4, sl
 800b564:	2205      	movs	r2, #5
 800b566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56a:	4853      	ldr	r0, [pc, #332]	@ (800b6b8 <_vfiprintf_r+0x21c>)
 800b56c:	f7fe f9b7 	bl	80098de <memchr>
 800b570:	9a04      	ldr	r2, [sp, #16]
 800b572:	b9d8      	cbnz	r0, 800b5ac <_vfiprintf_r+0x110>
 800b574:	06d1      	lsls	r1, r2, #27
 800b576:	bf44      	itt	mi
 800b578:	2320      	movmi	r3, #32
 800b57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b57e:	0713      	lsls	r3, r2, #28
 800b580:	bf44      	itt	mi
 800b582:	232b      	movmi	r3, #43	@ 0x2b
 800b584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b588:	f89a 3000 	ldrb.w	r3, [sl]
 800b58c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b58e:	d015      	beq.n	800b5bc <_vfiprintf_r+0x120>
 800b590:	4654      	mov	r4, sl
 800b592:	2000      	movs	r0, #0
 800b594:	f04f 0c0a 	mov.w	ip, #10
 800b598:	9a07      	ldr	r2, [sp, #28]
 800b59a:	4621      	mov	r1, r4
 800b59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5a0:	3b30      	subs	r3, #48	@ 0x30
 800b5a2:	2b09      	cmp	r3, #9
 800b5a4:	d94b      	bls.n	800b63e <_vfiprintf_r+0x1a2>
 800b5a6:	b1b0      	cbz	r0, 800b5d6 <_vfiprintf_r+0x13a>
 800b5a8:	9207      	str	r2, [sp, #28]
 800b5aa:	e014      	b.n	800b5d6 <_vfiprintf_r+0x13a>
 800b5ac:	eba0 0308 	sub.w	r3, r0, r8
 800b5b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	46a2      	mov	sl, r4
 800b5b8:	9304      	str	r3, [sp, #16]
 800b5ba:	e7d2      	b.n	800b562 <_vfiprintf_r+0xc6>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	1d19      	adds	r1, r3, #4
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	9103      	str	r1, [sp, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bfbb      	ittet	lt
 800b5c8:	425b      	neglt	r3, r3
 800b5ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ce:	9307      	strge	r3, [sp, #28]
 800b5d0:	9307      	strlt	r3, [sp, #28]
 800b5d2:	bfb8      	it	lt
 800b5d4:	9204      	strlt	r2, [sp, #16]
 800b5d6:	7823      	ldrb	r3, [r4, #0]
 800b5d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5da:	d10a      	bne.n	800b5f2 <_vfiprintf_r+0x156>
 800b5dc:	7863      	ldrb	r3, [r4, #1]
 800b5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5e0:	d132      	bne.n	800b648 <_vfiprintf_r+0x1ac>
 800b5e2:	9b03      	ldr	r3, [sp, #12]
 800b5e4:	3402      	adds	r4, #2
 800b5e6:	1d1a      	adds	r2, r3, #4
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	9203      	str	r2, [sp, #12]
 800b5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b6bc <_vfiprintf_r+0x220>
 800b5f6:	2203      	movs	r2, #3
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	7821      	ldrb	r1, [r4, #0]
 800b5fc:	f7fe f96f 	bl	80098de <memchr>
 800b600:	b138      	cbz	r0, 800b612 <_vfiprintf_r+0x176>
 800b602:	2240      	movs	r2, #64	@ 0x40
 800b604:	9b04      	ldr	r3, [sp, #16]
 800b606:	eba0 000a 	sub.w	r0, r0, sl
 800b60a:	4082      	lsls	r2, r0
 800b60c:	4313      	orrs	r3, r2
 800b60e:	3401      	adds	r4, #1
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b616:	2206      	movs	r2, #6
 800b618:	4829      	ldr	r0, [pc, #164]	@ (800b6c0 <_vfiprintf_r+0x224>)
 800b61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b61e:	f7fe f95e 	bl	80098de <memchr>
 800b622:	2800      	cmp	r0, #0
 800b624:	d03f      	beq.n	800b6a6 <_vfiprintf_r+0x20a>
 800b626:	4b27      	ldr	r3, [pc, #156]	@ (800b6c4 <_vfiprintf_r+0x228>)
 800b628:	bb1b      	cbnz	r3, 800b672 <_vfiprintf_r+0x1d6>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	3307      	adds	r3, #7
 800b62e:	f023 0307 	bic.w	r3, r3, #7
 800b632:	3308      	adds	r3, #8
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b638:	443b      	add	r3, r7
 800b63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b63c:	e76a      	b.n	800b514 <_vfiprintf_r+0x78>
 800b63e:	460c      	mov	r4, r1
 800b640:	2001      	movs	r0, #1
 800b642:	fb0c 3202 	mla	r2, ip, r2, r3
 800b646:	e7a8      	b.n	800b59a <_vfiprintf_r+0xfe>
 800b648:	2300      	movs	r3, #0
 800b64a:	f04f 0c0a 	mov.w	ip, #10
 800b64e:	4619      	mov	r1, r3
 800b650:	3401      	adds	r4, #1
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	4620      	mov	r0, r4
 800b656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b65a:	3a30      	subs	r2, #48	@ 0x30
 800b65c:	2a09      	cmp	r2, #9
 800b65e:	d903      	bls.n	800b668 <_vfiprintf_r+0x1cc>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0c6      	beq.n	800b5f2 <_vfiprintf_r+0x156>
 800b664:	9105      	str	r1, [sp, #20]
 800b666:	e7c4      	b.n	800b5f2 <_vfiprintf_r+0x156>
 800b668:	4604      	mov	r4, r0
 800b66a:	2301      	movs	r3, #1
 800b66c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b670:	e7f0      	b.n	800b654 <_vfiprintf_r+0x1b8>
 800b672:	ab03      	add	r3, sp, #12
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	462a      	mov	r2, r5
 800b678:	4630      	mov	r0, r6
 800b67a:	4b13      	ldr	r3, [pc, #76]	@ (800b6c8 <_vfiprintf_r+0x22c>)
 800b67c:	a904      	add	r1, sp, #16
 800b67e:	f7fd fb93 	bl	8008da8 <_printf_float>
 800b682:	4607      	mov	r7, r0
 800b684:	1c78      	adds	r0, r7, #1
 800b686:	d1d6      	bne.n	800b636 <_vfiprintf_r+0x19a>
 800b688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b68a:	07d9      	lsls	r1, r3, #31
 800b68c:	d405      	bmi.n	800b69a <_vfiprintf_r+0x1fe>
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	059a      	lsls	r2, r3, #22
 800b692:	d402      	bmi.n	800b69a <_vfiprintf_r+0x1fe>
 800b694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b696:	f7fe f921 	bl	80098dc <__retarget_lock_release_recursive>
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	065b      	lsls	r3, r3, #25
 800b69e:	f53f af1f 	bmi.w	800b4e0 <_vfiprintf_r+0x44>
 800b6a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6a4:	e71e      	b.n	800b4e4 <_vfiprintf_r+0x48>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <_vfiprintf_r+0x22c>)
 800b6b0:	a904      	add	r1, sp, #16
 800b6b2:	f7fd fe17 	bl	80092e4 <_printf_i>
 800b6b6:	e7e4      	b.n	800b682 <_vfiprintf_r+0x1e6>
 800b6b8:	0800c278 	.word	0x0800c278
 800b6bc:	0800c27e 	.word	0x0800c27e
 800b6c0:	0800c282 	.word	0x0800c282
 800b6c4:	08008da9 	.word	0x08008da9
 800b6c8:	0800b479 	.word	0x0800b479

0800b6cc <__swbuf_r>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	460e      	mov	r6, r1
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	b118      	cbz	r0, 800b6de <__swbuf_r+0x12>
 800b6d6:	6a03      	ldr	r3, [r0, #32]
 800b6d8:	b90b      	cbnz	r3, 800b6de <__swbuf_r+0x12>
 800b6da:	f7fd ffaf 	bl	800963c <__sinit>
 800b6de:	69a3      	ldr	r3, [r4, #24]
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	071a      	lsls	r2, r3, #28
 800b6e6:	d501      	bpl.n	800b6ec <__swbuf_r+0x20>
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	b943      	cbnz	r3, 800b6fe <__swbuf_r+0x32>
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f000 f82a 	bl	800b748 <__swsetup_r>
 800b6f4:	b118      	cbz	r0, 800b6fe <__swbuf_r+0x32>
 800b6f6:	f04f 37ff 	mov.w	r7, #4294967295
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	6922      	ldr	r2, [r4, #16]
 800b702:	b2f6      	uxtb	r6, r6
 800b704:	1a98      	subs	r0, r3, r2
 800b706:	6963      	ldr	r3, [r4, #20]
 800b708:	4637      	mov	r7, r6
 800b70a:	4283      	cmp	r3, r0
 800b70c:	dc05      	bgt.n	800b71a <__swbuf_r+0x4e>
 800b70e:	4621      	mov	r1, r4
 800b710:	4628      	mov	r0, r5
 800b712:	f7ff fd9b 	bl	800b24c <_fflush_r>
 800b716:	2800      	cmp	r0, #0
 800b718:	d1ed      	bne.n	800b6f6 <__swbuf_r+0x2a>
 800b71a:	68a3      	ldr	r3, [r4, #8]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	60a3      	str	r3, [r4, #8]
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	6022      	str	r2, [r4, #0]
 800b726:	701e      	strb	r6, [r3, #0]
 800b728:	6962      	ldr	r2, [r4, #20]
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d004      	beq.n	800b73a <__swbuf_r+0x6e>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	07db      	lsls	r3, r3, #31
 800b734:	d5e1      	bpl.n	800b6fa <__swbuf_r+0x2e>
 800b736:	2e0a      	cmp	r6, #10
 800b738:	d1df      	bne.n	800b6fa <__swbuf_r+0x2e>
 800b73a:	4621      	mov	r1, r4
 800b73c:	4628      	mov	r0, r5
 800b73e:	f7ff fd85 	bl	800b24c <_fflush_r>
 800b742:	2800      	cmp	r0, #0
 800b744:	d0d9      	beq.n	800b6fa <__swbuf_r+0x2e>
 800b746:	e7d6      	b.n	800b6f6 <__swbuf_r+0x2a>

0800b748 <__swsetup_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4b29      	ldr	r3, [pc, #164]	@ (800b7f0 <__swsetup_r+0xa8>)
 800b74c:	4605      	mov	r5, r0
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	460c      	mov	r4, r1
 800b752:	b118      	cbz	r0, 800b75c <__swsetup_r+0x14>
 800b754:	6a03      	ldr	r3, [r0, #32]
 800b756:	b90b      	cbnz	r3, 800b75c <__swsetup_r+0x14>
 800b758:	f7fd ff70 	bl	800963c <__sinit>
 800b75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b760:	0719      	lsls	r1, r3, #28
 800b762:	d422      	bmi.n	800b7aa <__swsetup_r+0x62>
 800b764:	06da      	lsls	r2, r3, #27
 800b766:	d407      	bmi.n	800b778 <__swsetup_r+0x30>
 800b768:	2209      	movs	r2, #9
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	e033      	b.n	800b7e0 <__swsetup_r+0x98>
 800b778:	0758      	lsls	r0, r3, #29
 800b77a:	d512      	bpl.n	800b7a2 <__swsetup_r+0x5a>
 800b77c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b77e:	b141      	cbz	r1, 800b792 <__swsetup_r+0x4a>
 800b780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <__swsetup_r+0x46>
 800b788:	4628      	mov	r0, r5
 800b78a:	f7fe ff09 	bl	800a5a0 <_free_r>
 800b78e:	2300      	movs	r3, #0
 800b790:	6363      	str	r3, [r4, #52]	@ 0x34
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b798:	81a3      	strh	r3, [r4, #12]
 800b79a:	2300      	movs	r3, #0
 800b79c:	6063      	str	r3, [r4, #4]
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	f043 0308 	orr.w	r3, r3, #8
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	b94b      	cbnz	r3, 800b7c2 <__swsetup_r+0x7a>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b8:	d003      	beq.n	800b7c2 <__swsetup_r+0x7a>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f000 f882 	bl	800b8c6 <__smakebuf_r>
 800b7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c6:	f013 0201 	ands.w	r2, r3, #1
 800b7ca:	d00a      	beq.n	800b7e2 <__swsetup_r+0x9a>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	60a2      	str	r2, [r4, #8]
 800b7d0:	6962      	ldr	r2, [r4, #20]
 800b7d2:	4252      	negs	r2, r2
 800b7d4:	61a2      	str	r2, [r4, #24]
 800b7d6:	6922      	ldr	r2, [r4, #16]
 800b7d8:	b942      	cbnz	r2, 800b7ec <__swsetup_r+0xa4>
 800b7da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7de:	d1c5      	bne.n	800b76c <__swsetup_r+0x24>
 800b7e0:	bd38      	pop	{r3, r4, r5, pc}
 800b7e2:	0799      	lsls	r1, r3, #30
 800b7e4:	bf58      	it	pl
 800b7e6:	6962      	ldrpl	r2, [r4, #20]
 800b7e8:	60a2      	str	r2, [r4, #8]
 800b7ea:	e7f4      	b.n	800b7d6 <__swsetup_r+0x8e>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e7f7      	b.n	800b7e0 <__swsetup_r+0x98>
 800b7f0:	20000078 	.word	0x20000078

0800b7f4 <_raise_r>:
 800b7f4:	291f      	cmp	r1, #31
 800b7f6:	b538      	push	{r3, r4, r5, lr}
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	d904      	bls.n	800b808 <_raise_r+0x14>
 800b7fe:	2316      	movs	r3, #22
 800b800:	6003      	str	r3, [r0, #0]
 800b802:	f04f 30ff 	mov.w	r0, #4294967295
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b80a:	b112      	cbz	r2, 800b812 <_raise_r+0x1e>
 800b80c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b810:	b94b      	cbnz	r3, 800b826 <_raise_r+0x32>
 800b812:	4628      	mov	r0, r5
 800b814:	f000 f830 	bl	800b878 <_getpid_r>
 800b818:	4622      	mov	r2, r4
 800b81a:	4601      	mov	r1, r0
 800b81c:	4628      	mov	r0, r5
 800b81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b822:	f000 b817 	b.w	800b854 <_kill_r>
 800b826:	2b01      	cmp	r3, #1
 800b828:	d00a      	beq.n	800b840 <_raise_r+0x4c>
 800b82a:	1c59      	adds	r1, r3, #1
 800b82c:	d103      	bne.n	800b836 <_raise_r+0x42>
 800b82e:	2316      	movs	r3, #22
 800b830:	6003      	str	r3, [r0, #0]
 800b832:	2001      	movs	r0, #1
 800b834:	e7e7      	b.n	800b806 <_raise_r+0x12>
 800b836:	2100      	movs	r1, #0
 800b838:	4620      	mov	r0, r4
 800b83a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b83e:	4798      	blx	r3
 800b840:	2000      	movs	r0, #0
 800b842:	e7e0      	b.n	800b806 <_raise_r+0x12>

0800b844 <raise>:
 800b844:	4b02      	ldr	r3, [pc, #8]	@ (800b850 <raise+0xc>)
 800b846:	4601      	mov	r1, r0
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	f7ff bfd3 	b.w	800b7f4 <_raise_r>
 800b84e:	bf00      	nop
 800b850:	20000078 	.word	0x20000078

0800b854 <_kill_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	2300      	movs	r3, #0
 800b858:	4d06      	ldr	r5, [pc, #24]	@ (800b874 <_kill_r+0x20>)
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	4611      	mov	r1, r2
 800b860:	602b      	str	r3, [r5, #0]
 800b862:	f7f9 fd72 	bl	800534a <_kill>
 800b866:	1c43      	adds	r3, r0, #1
 800b868:	d102      	bne.n	800b870 <_kill_r+0x1c>
 800b86a:	682b      	ldr	r3, [r5, #0]
 800b86c:	b103      	cbz	r3, 800b870 <_kill_r+0x1c>
 800b86e:	6023      	str	r3, [r4, #0]
 800b870:	bd38      	pop	{r3, r4, r5, pc}
 800b872:	bf00      	nop
 800b874:	20000f58 	.word	0x20000f58

0800b878 <_getpid_r>:
 800b878:	f7f9 bd60 	b.w	800533c <_getpid>

0800b87c <__swhatbuf_r>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	460c      	mov	r4, r1
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	4615      	mov	r5, r2
 800b886:	2900      	cmp	r1, #0
 800b888:	461e      	mov	r6, r3
 800b88a:	b096      	sub	sp, #88	@ 0x58
 800b88c:	da0c      	bge.n	800b8a8 <__swhatbuf_r+0x2c>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	2100      	movs	r1, #0
 800b892:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b896:	bf14      	ite	ne
 800b898:	2340      	movne	r3, #64	@ 0x40
 800b89a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b89e:	2000      	movs	r0, #0
 800b8a0:	6031      	str	r1, [r6, #0]
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	b016      	add	sp, #88	@ 0x58
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	466a      	mov	r2, sp
 800b8aa:	f000 f849 	bl	800b940 <_fstat_r>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	dbed      	blt.n	800b88e <__swhatbuf_r+0x12>
 800b8b2:	9901      	ldr	r1, [sp, #4]
 800b8b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8bc:	4259      	negs	r1, r3
 800b8be:	4159      	adcs	r1, r3
 800b8c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8c4:	e7eb      	b.n	800b89e <__swhatbuf_r+0x22>

0800b8c6 <__smakebuf_r>:
 800b8c6:	898b      	ldrh	r3, [r1, #12]
 800b8c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ca:	079d      	lsls	r5, r3, #30
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	d507      	bpl.n	800b8e2 <__smakebuf_r+0x1c>
 800b8d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	2301      	movs	r3, #1
 800b8dc:	6163      	str	r3, [r4, #20]
 800b8de:	b003      	add	sp, #12
 800b8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8e2:	466a      	mov	r2, sp
 800b8e4:	ab01      	add	r3, sp, #4
 800b8e6:	f7ff ffc9 	bl	800b87c <__swhatbuf_r>
 800b8ea:	9f00      	ldr	r7, [sp, #0]
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7fe fec7 	bl	800a684 <_malloc_r>
 800b8f6:	b948      	cbnz	r0, 800b90c <__smakebuf_r+0x46>
 800b8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fc:	059a      	lsls	r2, r3, #22
 800b8fe:	d4ee      	bmi.n	800b8de <__smakebuf_r+0x18>
 800b900:	f023 0303 	bic.w	r3, r3, #3
 800b904:	f043 0302 	orr.w	r3, r3, #2
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	e7e2      	b.n	800b8d2 <__smakebuf_r+0xc>
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b916:	81a3      	strh	r3, [r4, #12]
 800b918:	9b01      	ldr	r3, [sp, #4]
 800b91a:	6020      	str	r0, [r4, #0]
 800b91c:	b15b      	cbz	r3, 800b936 <__smakebuf_r+0x70>
 800b91e:	4630      	mov	r0, r6
 800b920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b924:	f000 f81e 	bl	800b964 <_isatty_r>
 800b928:	b128      	cbz	r0, 800b936 <__smakebuf_r+0x70>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	f023 0303 	bic.w	r3, r3, #3
 800b930:	f043 0301 	orr.w	r3, r3, #1
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	431d      	orrs	r5, r3
 800b93a:	81a5      	strh	r5, [r4, #12]
 800b93c:	e7cf      	b.n	800b8de <__smakebuf_r+0x18>
	...

0800b940 <_fstat_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	2300      	movs	r3, #0
 800b944:	4d06      	ldr	r5, [pc, #24]	@ (800b960 <_fstat_r+0x20>)
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	4611      	mov	r1, r2
 800b94c:	602b      	str	r3, [r5, #0]
 800b94e:	f7f9 fd5b 	bl	8005408 <_fstat>
 800b952:	1c43      	adds	r3, r0, #1
 800b954:	d102      	bne.n	800b95c <_fstat_r+0x1c>
 800b956:	682b      	ldr	r3, [r5, #0]
 800b958:	b103      	cbz	r3, 800b95c <_fstat_r+0x1c>
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	bd38      	pop	{r3, r4, r5, pc}
 800b95e:	bf00      	nop
 800b960:	20000f58 	.word	0x20000f58

0800b964 <_isatty_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	2300      	movs	r3, #0
 800b968:	4d05      	ldr	r5, [pc, #20]	@ (800b980 <_isatty_r+0x1c>)
 800b96a:	4604      	mov	r4, r0
 800b96c:	4608      	mov	r0, r1
 800b96e:	602b      	str	r3, [r5, #0]
 800b970:	f7f9 fd59 	bl	8005426 <_isatty>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_isatty_r+0x1a>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_isatty_r+0x1a>
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20000f58 	.word	0x20000f58

0800b984 <_init>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	bf00      	nop
 800b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98a:	bc08      	pop	{r3}
 800b98c:	469e      	mov	lr, r3
 800b98e:	4770      	bx	lr

0800b990 <_fini>:
 800b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b992:	bf00      	nop
 800b994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b996:	bc08      	pop	{r3}
 800b998:	469e      	mov	lr, r3
 800b99a:	4770      	bx	lr
